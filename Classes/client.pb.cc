// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class Test_OneofDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Test_Oneof> {
  public:
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 age_;
} _Test_Oneof_default_instance_;
class Test_MapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Test_Map> {
} _Test_Map_default_instance_;
class TestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Test> {
} _Test_default_instance_;
class CommonReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommonReply> {
} _CommonReply_default_instance_;
class AutoIDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AutoID> {
} _AutoID_default_instance_;
class StringDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<String> {
} _String_default_instance_;
class UserRequest_LobbyLoginDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserRequest_LobbyLogin> {
} _UserRequest_LobbyLogin_default_instance_;
class UserRequest_NilBodyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserRequest_NilBody> {
} _UserRequest_NilBody_default_instance_;
class UserRequest_GameLoginDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserRequest_GameLogin> {
} _UserRequest_GameLogin_default_instance_;
class UserRequest_GameExitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserRequest_GameExit> {
} _UserRequest_GameExit_default_instance_;
class UserRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserRequest> {
} _UserRequest_default_instance_;
class Lobby_UserSnapshotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Lobby_UserSnapshot> {
} _Lobby_UserSnapshot_default_instance_;
class Lobby_TableSnapshotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Lobby_TableSnapshot> {
} _Lobby_TableSnapshot_default_instance_;
class LobbyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Lobby> {
} _Lobby_default_instance_;
class Game_JoinTableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Game_JoinTable> {
} _Game_JoinTable_default_instance_;
class Game_LeaveTableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Game_LeaveTable> {
} _Game_LeaveTable_default_instance_;
class Game_BetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Game_Bet> {
} _Game_Bet_default_instance_;
class Game_TipDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Game_Tip> {
} _Game_Tip_default_instance_;
class Game_UserSnapshotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Game_UserSnapshot> {
} _Game_UserSnapshot_default_instance_;
class Game_TableStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Game_TableStatus> {
} _Game_TableStatus_default_instance_;
class Game_TableConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Game_TableConfig> {
} _Game_TableConfig_default_instance_;
class Game_TableHistoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Game_TableHistory> {
} _Game_TableHistory_default_instance_;
class Game_VirtualTable_SeatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Game_VirtualTable_Seat> {
} _Game_VirtualTable_Seat_default_instance_;
class Game_VirtualTable_TableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Game_VirtualTable_Table> {
} _Game_VirtualTable_Table_default_instance_;
class Game_VirtualTableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Game_VirtualTable> {
} _Game_VirtualTable_default_instance_;
class GameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Game> {
} _Game_default_instance_;

namespace protobuf_client_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[33];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test_Oneof, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test_Oneof, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Test_Oneof_default_instance_), name_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Test_Oneof_default_instance_), age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test_Oneof, test_oneof_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test_Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test_Map, body_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReply, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReply, desc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoID, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(String, str_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequest_LobbyLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequest_LobbyLogin, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequest_LobbyLogin, passwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequest_LobbyLogin, way_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequest_LobbyLogin, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequest_LobbyLogin, platform_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequest_NilBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequest_GameLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequest_GameLogin, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequest_GameLogin, tableid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequest_GameExit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequest_GameExit, gameid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_UserSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_UserSnapshot, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_UserSnapshot, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_UserSnapshot, balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_UserSnapshot, videochips_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_UserSnapshot, roulettechips_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_UserSnapshot, limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_UserSnapshot, moneysort_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_UserSnapshot, parentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_UserSnapshot, istip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_UserSnapshot, ischat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_UserSnapshot, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_TableSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_TableSnapshot, gametype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_TableSnapshot, tableid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_TableSnapshot, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_TableSnapshot, inning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_TableSnapshot, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_TableSnapshot, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_TableSnapshot, ways_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_TableSnapshot, counts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_TableSnapshot, isopen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_TableSnapshot, dealer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_TableSnapshot, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby_TableSnapshot, platform_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_JoinTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_JoinTable, tableid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_JoinTable, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_LeaveTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_LeaveTable, tableid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_Bet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_Bet, tableid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_Bet, subtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_Bet, detail_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_Tip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_Tip, tableid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_Tip, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_Tip, amount_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_UserSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_UserSnapshot, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_UserSnapshot, balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_UserSnapshot, home_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_UserSnapshot, vtable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_UserSnapshot, vseat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_UserSnapshot, winlose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_UserSnapshot, totalbet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_UserSnapshot, betinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableStatus, tableid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableStatus, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableStatus, inning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableStatus, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableStatus, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableStatus, poker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableStatus, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableStatus, betinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableStatus, vbetinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableStatus, winlose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableStatus, pokerindex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableConfig, tableid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableConfig, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableConfig, dealer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableConfig, date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableConfig, limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableHistory, tableid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableHistory, way_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableHistory, counts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_TableHistory, poker_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_VirtualTable_Seat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_VirtualTable_Seat, uname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_VirtualTable_Seat, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_VirtualTable_Seat, balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_VirtualTable_Seat, avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_VirtualTable_Seat, betinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_VirtualTable_Seat, seatid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_VirtualTable_Seat, isseat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_VirtualTable_Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_VirtualTable_Table, tableid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_VirtualTable_Table, maxseatnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_VirtualTable_Table, seats_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_VirtualTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Test_Oneof)},
  { 7, -1, sizeof(Test_Map)},
  { 12, -1, sizeof(Test)},
  { 16, -1, sizeof(CommonReply)},
  { 22, -1, sizeof(AutoID)},
  { 27, -1, sizeof(String)},
  { 32, -1, sizeof(UserRequest_LobbyLogin)},
  { 41, -1, sizeof(UserRequest_NilBody)},
  { 45, -1, sizeof(UserRequest_GameLogin)},
  { 51, -1, sizeof(UserRequest_GameExit)},
  { 56, -1, sizeof(UserRequest)},
  { 60, -1, sizeof(Lobby_UserSnapshot)},
  { 75, -1, sizeof(Lobby_TableSnapshot)},
  { 91, -1, sizeof(Lobby)},
  { 95, -1, sizeof(Game_JoinTable)},
  { 101, -1, sizeof(Game_LeaveTable)},
  { 106, -1, sizeof(Game_Bet)},
  { 113, -1, sizeof(Game_Tip)},
  { 120, -1, sizeof(Game_UserSnapshot)},
  { 132, -1, sizeof(Game_TableStatus)},
  { 147, -1, sizeof(Game_TableConfig)},
  { 157, -1, sizeof(Game_TableHistory)},
  { 165, -1, sizeof(Game_VirtualTable_Seat)},
  { 176, -1, sizeof(Game_VirtualTable_Table)},
  { 183, -1, sizeof(Game_VirtualTable)},
  { 187, -1, sizeof(Game)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Test_Oneof_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Test_Map_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Test_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommonReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AutoID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_String_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserRequest_LobbyLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserRequest_NilBody_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserRequest_GameLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserRequest_GameExit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Lobby_UserSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Lobby_TableSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Lobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Game_JoinTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Game_LeaveTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Game_Bet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Game_Tip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Game_UserSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Game_TableStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Game_TableConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Game_TableHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Game_VirtualTable_Seat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Game_VirtualTable_Table_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Game_VirtualTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Game_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "client.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 33);
  const ::google::protobuf::Descriptor* Test_Map_BodyEntry_descriptor = protobuf_client_2eproto::file_level_metadata[1].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Test_Map_BodyEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            double,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
            0>::CreateDefaultInstance(
                Test_Map_BodyEntry_descriptor));
  const ::google::protobuf::Descriptor* Game_Bet_DetailEntry_descriptor = protobuf_client_2eproto::file_level_metadata[17].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Game_Bet_DetailEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            double,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
            0>::CreateDefaultInstance(
                Game_Bet_DetailEntry_descriptor));
  const ::google::protobuf::Descriptor* Game_UserSnapshot_BetinfoEntry_descriptor = protobuf_client_2eproto::file_level_metadata[20].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Game_UserSnapshot_BetinfoEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            double,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
            0>::CreateDefaultInstance(
                Game_UserSnapshot_BetinfoEntry_descriptor));
  const ::google::protobuf::Descriptor* Game_TableStatus_BetinfoEntry_descriptor = protobuf_client_2eproto::file_level_metadata[22].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Game_TableStatus_BetinfoEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            double,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
            0>::CreateDefaultInstance(
                Game_TableStatus_BetinfoEntry_descriptor));
  const ::google::protobuf::Descriptor* Game_TableStatus_VbetinfoEntry_descriptor = protobuf_client_2eproto::file_level_metadata[23].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Game_TableStatus_VbetinfoEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            double,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
            0>::CreateDefaultInstance(
                Game_TableStatus_VbetinfoEntry_descriptor));
  const ::google::protobuf::Descriptor* Game_VirtualTable_Seat_BetinfoEntry_descriptor = protobuf_client_2eproto::file_level_metadata[27].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Game_VirtualTable_Seat_BetinfoEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            double,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
            0>::CreateDefaultInstance(
                Game_VirtualTable_Seat_BetinfoEntry_descriptor));
  const ::google::protobuf::Descriptor* Game_VirtualTable_Table_SeatsEntry_descriptor = protobuf_client_2eproto::file_level_metadata[29].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Game_VirtualTable_Table_SeatsEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            ::proto::Game_VirtualTable_Seat,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Game_VirtualTable_Table_SeatsEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _Test_Oneof_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Test_Map_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Test_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CommonReply_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _AutoID_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _String_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _UserRequest_LobbyLogin_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _UserRequest_NilBody_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _UserRequest_GameLogin_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _UserRequest_GameExit_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _UserRequest_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _Lobby_UserSnapshot_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _Lobby_TableSnapshot_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _Lobby_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _Game_JoinTable_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _Game_LeaveTable_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _Game_Bet_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _Game_Tip_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _Game_UserSnapshot_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _Game_TableStatus_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _Game_TableConfig_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _Game_TableHistory_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _Game_VirtualTable_Seat_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _Game_VirtualTable_Table_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _Game_VirtualTable_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _Game_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Test_Oneof_default_instance_.DefaultConstruct();
  _Test_Map_default_instance_.DefaultConstruct();
  _Test_default_instance_.DefaultConstruct();
  _CommonReply_default_instance_.DefaultConstruct();
  _AutoID_default_instance_.DefaultConstruct();
  _String_default_instance_.DefaultConstruct();
  _UserRequest_LobbyLogin_default_instance_.DefaultConstruct();
  _UserRequest_NilBody_default_instance_.DefaultConstruct();
  _UserRequest_GameLogin_default_instance_.DefaultConstruct();
  _UserRequest_GameExit_default_instance_.DefaultConstruct();
  _UserRequest_default_instance_.DefaultConstruct();
  _Lobby_UserSnapshot_default_instance_.DefaultConstruct();
  _Lobby_TableSnapshot_default_instance_.DefaultConstruct();
  _Lobby_default_instance_.DefaultConstruct();
  _Game_JoinTable_default_instance_.DefaultConstruct();
  _Game_LeaveTable_default_instance_.DefaultConstruct();
  _Game_Bet_default_instance_.DefaultConstruct();
  _Game_Tip_default_instance_.DefaultConstruct();
  _Game_UserSnapshot_default_instance_.DefaultConstruct();
  _Game_TableStatus_default_instance_.DefaultConstruct();
  _Game_TableConfig_default_instance_.DefaultConstruct();
  _Game_TableHistory_default_instance_.DefaultConstruct();
  _Game_VirtualTable_Seat_default_instance_.DefaultConstruct();
  _Game_VirtualTable_Table_default_instance_.DefaultConstruct();
  _Game_VirtualTable_default_instance_.DefaultConstruct();
  _Game_default_instance_.DefaultConstruct();
  _Test_Oneof_default_instance_.name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _Test_Oneof_default_instance_.age_ = 0;
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014client.proto\022\005proto\"\231\001\n\004Test\0324\n\005Oneof\022"
      "\016\n\004name\030\001 \001(\tH\000\022\r\n\003age\030\002 \001(\005H\000B\014\n\ntest_o"
      "neof\032[\n\003Map\022\'\n\004body\030\001 \003(\0132\031.proto.Test.M"
      "ap.BodyEntry\032+\n\tBodyEntry\022\013\n\003key\030\001 \001(\r\022\r"
      "\n\005value\030\002 \001(\001:\0028\001\")\n\013CommonReply\022\014\n\004code"
      "\030\001 \001(\005\022\014\n\004desc\030\002 \001(\t\"\024\n\006AutoID\022\n\n\002id\030\001 \001"
      "(\003\"\025\n\006String\022\013\n\003str\030\001 \001(\t\"\333\001\n\013UserReques"
      "t\032U\n\nLobbyLogin\022\014\n\004name\030\001 \001(\t\022\016\n\006passwd\030"
      "\002 \001(\t\022\013\n\003way\030\003 \001(\t\022\n\n\002ip\030\004 \001(\t\022\020\n\010platfo"
      "rm\030\005 \001(\r\032\t\n\007NilBody\032=\n\tGameLogin\022\037\n\006game"
      "ID\030\001 \001(\0162\017.proto.GameType\022\017\n\007tableID\030\002 \001"
      "(\r\032+\n\010GameExit\022\037\n\006gameID\030\001 \001(\0162\017.proto.G"
      "ameType\"\242\003\n\005Lobby\032\307\001\n\014UserSnapshot\022\014\n\004na"
      "me\030\001 \001(\t\022\014\n\004nick\030\002 \001(\t\022\017\n\007balance\030\003 \001(\001\022"
      "\022\n\nvideoChips\030\004 \001(\t\022\025\n\rrouletteChips\030\005 \001"
      "(\t\022\016\n\006limits\030\006 \001(\004\022\021\n\tmoneysort\030\007 \001(\t\022\020\n"
      "\010parentID\030\010 \001(\003\022\r\n\005isTip\030\t \001(\010\022\016\n\006isChat"
      "\030\n \001(\010\022\013\n\003uid\030\013 \001(\003\032\316\001\n\rTableSnapshot\022\020\n"
      "\010gameType\030\001 \001(\r\022\017\n\007tableID\030\002 \001(\r\022\r\n\005stag"
      "e\030\003 \001(\005\022\016\n\006inning\030\004 \001(\005\022\016\n\006status\030\005 \001(\r\022"
      "\014\n\004time\030\006 \001(\005\022\014\n\004ways\030\007 \001(\t\022\016\n\006counts\030\010 "
      "\001(\t\022\016\n\006isopen\030\t \001(\010\022\016\n\006dealer\030\n \001(\t\022\r\n\005l"
      "imit\030\013 \001(\t\022\020\n\010platform\030\014 \001(\r\"\227\r\n\004Game\032*\n"
      "\tJoinTable\022\017\n\007tableID\030\001 \001(\r\022\014\n\004type\030\002 \001("
      "\005\032\035\n\nLeaveTable\022\017\n\007tableID\030\001 \001(\r\032\230\001\n\003Bet"
      "\022\017\n\007tableID\030\001 \001(\r\022$\n\007subtype\030\002 \001(\0162\023.pro"
      "to.Game.Subtype\022+\n\006detail\030\003 \003(\0132\033.proto."
      "Game.Bet.DetailEntry\032-\n\013DetailEntry\022\013\n\003k"
      "ey\030\001 \001(\005\022\r\n\005value\030\002 \001(\001:\0028\001\0324\n\003Tip\022\017\n\007ta"
      "bleID\030\001 \001(\r\022\014\n\004type\030\002 \001(\005\022\016\n\006amount\030\003 \001("
      "\001\032\345\001\n\014UserSnapshot\022\014\n\004name\030\001 \001(\t\022\017\n\007bala"
      "nce\030\002 \001(\001\022\014\n\004home\030\003 \001(\r\022\016\n\006vtable\030\004 \001(\r\022"
      "\r\n\005vseat\030\005 \001(\r\022\017\n\007winlose\030\006 \001(\001\022\020\n\010total"
      "bet\030\007 \001(\001\0226\n\007betinfo\030\010 \003(\0132%.proto.Game."
      "UserSnapshot.BetinfoEntry\032.\n\014BetinfoEntr"
      "y\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\001:\0028\001\032\360\002\n\013Ta"
      "bleStatus\022\017\n\007tableID\030\001 \001(\r\022\r\n\005stage\030\002 \001("
      "\005\022\016\n\006inning\030\003 \001(\005\022\016\n\006status\030\004 \001(\r\022\014\n\004tim"
      "e\030\005 \001(\005\022\r\n\005poker\030\006 \001(\t\022\016\n\006result\030\007 \001(\t\0225"
      "\n\007betinfo\030\010 \003(\0132$.proto.Game.TableStatus"
      ".BetinfoEntry\0227\n\010vbetinfo\030\t \003(\0132%.proto."
      "Game.TableStatus.VbetinfoEntry\022\017\n\007winlos"
      "e\030\n \001(\001\022\022\n\npokerIndex\030\013 \001(\005\032.\n\014BetinfoEn"
      "try\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\001:\0028\001\032/\n\rV"
      "betinfoEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\001"
      ":\0028\001\032g\n\013TableConfig\022\017\n\007tableID\030\001 \001(\r\022\014\n\004"
      "time\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\016\n\006dealer\030\004 \001(\t"
      "\022\014\n\004date\030\005 \001(\t\022\r\n\005limit\030\006 \001(\t\032K\n\014TableHi"
      "story\022\017\n\007tableID\030\001 \001(\r\022\013\n\003way\030\002 \001(\t\022\016\n\006c"
      "ounts\030\003 \001(\t\022\r\n\005poker\030\004 \001(\t\032\227\003\n\014VirtualTa"
      "ble\032\320\001\n\004Seat\022\r\n\005uname\030\001 \001(\t\022\013\n\003uid\030\002 \001(\003"
      "\022\017\n\007balance\030\003 \001(\001\022\016\n\006avatar\030\004 \001(\t\022;\n\007bet"
      "info\030\005 \003(\0132*.proto.Game.VirtualTable.Sea"
      "t.BetinfoEntry\022\016\n\006seatID\030\006 \001(\r\022\016\n\006isSeat"
      "\030\007 \001(\010\032.\n\014BetinfoEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005v"
      "alue\030\002 \001(\001:\0028\001\032\263\001\n\005Table\022\017\n\007tableID\030\001 \001("
      "\r\022\022\n\nmaxSeatNum\030\002 \001(\r\0228\n\005seats\030\003 \003(\0132).p"
      "roto.Game.VirtualTable.Table.SeatsEntry\032"
      "K\n\nSeatsEntry\022\013\n\003key\030\001 \001(\r\022,\n\005value\030\002 \001("
      "\0132\035.proto.Game.VirtualTable.Seat:\0028\001\"\307\001\n"
      "\007Subtype\022\n\n\006UnKnow\020\000\022\023\n\017ClassicBaccarat\020"
      "o\022\024\n\020MianYongBaccarat\020p\022\021\n\rSuperBaccarat"
      "\020q\022\021\n\rChainBaccarat\020r\022\031\n\025MianYongChainBa"
      "ccarat\020s\022\013\n\006LongHu\020\323\001\022\r\n\010Roulette\020\267\002\022\n\n\005"
      "SicBo\020\233\003\022\013\n\006FanTan\020\377\003\022\017\n\nTexasPoker\020\343\004*\354"
      "\006\n\007Command\022\025\n\021client_heart_beat\020\000\022\031\n\025cli"
      "ent_heart_beat_ack\020\001\022\024\n\020user_lobby_login"
      "\020\n\022\030\n\024user_lobby_login_ack\020\013\022\023\n\017user_gam"
      "e_login\0202\022\027\n\023user_game_login_ack\0203\022\022\n\016us"
      "er_game_exit\020<\022\026\n\022user_game_exit_ack\020=\022\026"
      "\n\021user_lobby_logout\020\220\003\022\032\n\025user_lobby_log"
      "out_ack\020\221\003\022\027\n\023server_message_push\020n\022\030\n\023l"
      "obby_change_avatar\020\376\003\022\034\n\027lobby_change_av"
      "atar_ack\020\377\003\022\026\n\021lobby_change_nick\020\210\004\022\032\n\025l"
      "obby_change_nick_ack\020\211\004\022\026\n\021lobby_player_"
      "push\020\330\004\022\030\n\023lobby_videourl_push\020\331\004\022\026\n\021lob"
      "by_status_push\020\332\004\022\033\n\026lobby_playercount_p"
      "ush\020\333\004\022\025\n\020game_leave_table\020\350\007\022\031\n\024game_le"
      "ave_table_ack\020\351\007\022\024\n\017game_join_table\020\362\007\022\030"
      "\n\023game_join_table_ack\020\363\007\022\r\n\010game_bet\020\374\007\022"
      "\021\n\014game_bet_ack\020\375\007\022\r\n\010game_tip\020\206\010\022\021\n\014gam"
      "e_tip_ack\020\207\010\022\035\n\030game_table_snapshot_push"
      "\020\355\016\022\033\n\026game_table_status_push\020\356\016\022\033\n\026game"
      "_table_config_push\020\357\016\022\034\n\027game_table_hist"
      "ory_push\020\360\016\022\025\n\020game_player_push\020\361\016\022\034\n\027ga"
      "me_virtual_table_push\020\362\016\022\023\n\016dealer_comma"
      "nd\020\320\017\022\017\n\ntest_oneof\020\222N\022\r\n\010test_map\020\223N*e\n"
      "\010GameType\022\n\n\006UnKnow\020\000\022\014\n\010Baccarat\020\013\022\n\n\006L"
      "ongHu\020\014\022\014\n\010Roulette\020\r\022\t\n\005SicBo\020\016\022\n\n\006FanT"
      "an\020\017\022\016\n\nTexasPoker\020\020b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3588);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_client_2eproto

const ::google::protobuf::EnumDescriptor* Game_Subtype_descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_enum_descriptors[0];
}
bool Game_Subtype_IsValid(int value) {
  switch (value) {
    case 0:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 211:
    case 311:
    case 411:
    case 511:
    case 611:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Game_Subtype Game::UnKnow;
const Game_Subtype Game::ClassicBaccarat;
const Game_Subtype Game::MianYongBaccarat;
const Game_Subtype Game::SuperBaccarat;
const Game_Subtype Game::ChainBaccarat;
const Game_Subtype Game::MianYongChainBaccarat;
const Game_Subtype Game::LongHu;
const Game_Subtype Game::Roulette;
const Game_Subtype Game::SicBo;
const Game_Subtype Game::FanTan;
const Game_Subtype Game::TexasPoker;
const Game_Subtype Game::Subtype_MIN;
const Game_Subtype Game::Subtype_MAX;
const int Game::Subtype_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Command_descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_enum_descriptors[1];
}
bool Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 11:
    case 50:
    case 51:
    case 60:
    case 61:
    case 110:
    case 400:
    case 401:
    case 510:
    case 511:
    case 520:
    case 521:
    case 600:
    case 601:
    case 602:
    case 603:
    case 1000:
    case 1001:
    case 1010:
    case 1011:
    case 1020:
    case 1021:
    case 1030:
    case 1031:
    case 1901:
    case 1902:
    case 1903:
    case 1904:
    case 1905:
    case 1906:
    case 2000:
    case 10002:
    case 10003:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameType_descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_enum_descriptors[2];
}
bool GameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Test_Oneof::kNameFieldNumber;
const int Test_Oneof::kAgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Test_Oneof::Test_Oneof()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Test.Oneof)
}
Test_Oneof::Test_Oneof(const Test_Oneof& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_test_oneof();
  switch (from.test_oneof_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kAge: {
      set_age(from.age());
      break;
    }
    case TEST_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.Test.Oneof)
}

void Test_Oneof::SharedCtor() {
  clear_has_test_oneof();
  _cached_size_ = 0;
}

Test_Oneof::~Test_Oneof() {
  // @@protoc_insertion_point(destructor:proto.Test.Oneof)
  SharedDtor();
}

void Test_Oneof::SharedDtor() {
  if (has_test_oneof()) {
    clear_test_oneof();
  }
}

void Test_Oneof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test_Oneof::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[0].descriptor;
}

const Test_Oneof& Test_Oneof::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Test_Oneof* Test_Oneof::New(::google::protobuf::Arena* arena) const {
  Test_Oneof* n = new Test_Oneof;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Test_Oneof::clear_test_oneof() {
// @@protoc_insertion_point(one_of_clear_start:proto.Test.Oneof)
  switch (test_oneof_case()) {
    case kName: {
      test_oneof_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kAge: {
      // No need to clear
      break;
    }
    case TEST_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TEST_ONEOF_NOT_SET;
}


void Test_Oneof::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Test.Oneof)
  clear_test_oneof();
}

bool Test_Oneof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Test.Oneof)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Test.Oneof.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 age = 2;
      case 2: {
        if (tag == 16u) {
          clear_test_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_oneof_.age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Test.Oneof)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Test.Oneof)
  return false;
#undef DO_
}

void Test_Oneof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Test.Oneof)
  // string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Test.Oneof.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 age = 2;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->age(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Test.Oneof)
}

::google::protobuf::uint8* Test_Oneof::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Test.Oneof)
  // string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Test.Oneof.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 age = 2;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->age(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Test.Oneof)
  return target;
}

size_t Test_Oneof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Test.Oneof)
  size_t total_size = 0;

  switch (test_oneof_case()) {
    // string name = 1;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    // int32 age = 2;
    case kAge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
      break;
    }
    case TEST_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test_Oneof::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Test.Oneof)
  GOOGLE_DCHECK_NE(&from, this);
  const Test_Oneof* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Test_Oneof>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Test.Oneof)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Test.Oneof)
    MergeFrom(*source);
  }
}

void Test_Oneof::MergeFrom(const Test_Oneof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Test.Oneof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.test_oneof_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kAge: {
      set_age(from.age());
      break;
    }
    case TEST_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Test_Oneof::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Test.Oneof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test_Oneof::CopyFrom(const Test_Oneof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Test.Oneof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test_Oneof::IsInitialized() const {
  return true;
}

void Test_Oneof::Swap(Test_Oneof* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Test_Oneof::InternalSwap(Test_Oneof* other) {
  std::swap(test_oneof_, other->test_oneof_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Test_Oneof::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Test_Oneof

// string name = 1;
bool Test_Oneof::has_name() const {
  return test_oneof_case() == kName;
}
void Test_Oneof::set_has_name() {
  _oneof_case_[0] = kName;
}
void Test_Oneof::clear_name() {
  if (has_name()) {
    test_oneof_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_test_oneof();
  }
}
const ::std::string& Test_Oneof::name() const {
  // @@protoc_insertion_point(field_get:proto.Test.Oneof.name)
  if (has_name()) {
    return test_oneof_.name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Test_Oneof::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.Test.Oneof.name)
  if (!has_name()) {
    clear_test_oneof();
    set_has_name();
    test_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Test.Oneof.name)
}
#if LANG_CXX11
void Test_Oneof::set_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.Test.Oneof.name)
  if (!has_name()) {
    clear_test_oneof();
    set_has_name();
    test_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Test.Oneof.name)
}
#endif
void Test_Oneof::set_name(const char* value) {
  if (!has_name()) {
    clear_test_oneof();
    set_has_name();
    test_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Test.Oneof.name)
}
void Test_Oneof::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_test_oneof();
    set_has_name();
    test_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Test.Oneof.name)
}
::std::string* Test_Oneof::mutable_name() {
  if (!has_name()) {
    clear_test_oneof();
    set_has_name();
    test_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:proto.Test.Oneof.name)
  return test_oneof_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Test_Oneof::release_name() {
  // @@protoc_insertion_point(field_release:proto.Test.Oneof.name)
  if (has_name()) {
    clear_has_test_oneof();
    return test_oneof_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Test_Oneof::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    test_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_test_oneof();
  if (name != NULL) {
    set_has_name();
    test_oneof_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Test.Oneof.name)
}

// int32 age = 2;
bool Test_Oneof::has_age() const {
  return test_oneof_case() == kAge;
}
void Test_Oneof::set_has_age() {
  _oneof_case_[0] = kAge;
}
void Test_Oneof::clear_age() {
  if (has_age()) {
    test_oneof_.age_ = 0;
    clear_has_test_oneof();
  }
}
::google::protobuf::int32 Test_Oneof::age() const {
  // @@protoc_insertion_point(field_get:proto.Test.Oneof.age)
  if (has_age()) {
    return test_oneof_.age_;
  }
  return 0;
}
void Test_Oneof::set_age(::google::protobuf::int32 value) {
  if (!has_age()) {
    clear_test_oneof();
    set_has_age();
  }
  test_oneof_.age_ = value;
  // @@protoc_insertion_point(field_set:proto.Test.Oneof.age)
}

bool Test_Oneof::has_test_oneof() const {
  return test_oneof_case() != TEST_ONEOF_NOT_SET;
}
void Test_Oneof::clear_has_test_oneof() {
  _oneof_case_[0] = TEST_ONEOF_NOT_SET;
}
Test_Oneof::TestOneofCase Test_Oneof::test_oneof_case() const {
  return Test_Oneof::TestOneofCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Test_Map::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Test_Map::Test_Map()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Test.Map)
}
Test_Map::Test_Map(const Test_Map& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& Test_Map_BodyEntry_descriptor = protobuf_client_2eproto::file_level_metadata[1].descriptor;
  body_.SetAssignDescriptorCallback(
      protobuf_client_2eproto::protobuf_AssignDescriptorsOnce);
  body_.SetEntryDescriptor(
      &Test_Map_BodyEntry_descriptor);
  body_.MergeFrom(from.body_);
  // @@protoc_insertion_point(copy_constructor:proto.Test.Map)
}

void Test_Map::SharedCtor() {
  const ::google::protobuf::Descriptor*& Test_Map_BodyEntry_descriptor = protobuf_client_2eproto::file_level_metadata[1].descriptor;
  body_.SetAssignDescriptorCallback(
      protobuf_client_2eproto::protobuf_AssignDescriptorsOnce);
  body_.SetEntryDescriptor(
      &Test_Map_BodyEntry_descriptor);
  _cached_size_ = 0;
}

Test_Map::~Test_Map() {
  // @@protoc_insertion_point(destructor:proto.Test.Map)
  SharedDtor();
}

void Test_Map::SharedDtor() {
}

void Test_Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test_Map::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[2].descriptor;
}

const Test_Map& Test_Map::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Test_Map* Test_Map::New(::google::protobuf::Arena* arena) const {
  Test_Map* n = new Test_Map;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Test_Map::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Test.Map)
  body_.Clear();
}

bool Test_Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Test.Map)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, double> body = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          Test_Map_BodyEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::uint32, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, double > > parser(&body_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Test.Map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Test.Map)
  return false;
#undef DO_
}

void Test_Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Test.Map)
  // map<uint32, double> body = 1;
  if (!this->body().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->body().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->body().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, double >::const_iterator
          it = this->body().begin();
          it != this->body().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Test_Map_BodyEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(body_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<Test_Map_BodyEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, double >::const_iterator
          it = this->body().begin();
          it != this->body().end(); ++it) {
        entry.reset(body_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:proto.Test.Map)
}

::google::protobuf::uint8* Test_Map::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Test.Map)
  // map<uint32, double> body = 1;
  if (!this->body().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->body().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->body().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, double >::const_iterator
          it = this->body().begin();
          it != this->body().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Test_Map_BodyEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(body_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<Test_Map_BodyEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, double >::const_iterator
          it = this->body().begin();
          it != this->body().end(); ++it) {
        entry.reset(body_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Test.Map)
  return target;
}

size_t Test_Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Test.Map)
  size_t total_size = 0;

  // map<uint32, double> body = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->body_size());
  {
    ::google::protobuf::scoped_ptr<Test_Map_BodyEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, double >::const_iterator
        it = this->body().begin();
        it != this->body().end(); ++it) {
      entry.reset(body_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test_Map::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Test.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Test_Map* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Test_Map>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Test.Map)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Test.Map)
    MergeFrom(*source);
  }
}

void Test_Map::MergeFrom(const Test_Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Test.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.MergeFrom(from.body_);
}

void Test_Map::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Test.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test_Map::CopyFrom(const Test_Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Test.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test_Map::IsInitialized() const {
  return true;
}

void Test_Map::Swap(Test_Map* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Test_Map::InternalSwap(Test_Map* other) {
  body_.Swap(&other->body_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Test_Map::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Test_Map

// map<uint32, double> body = 1;
int Test_Map::body_size() const {
  return body_.size();
}
void Test_Map::clear_body() {
  body_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, double >&
Test_Map::body() const {
  // @@protoc_insertion_point(field_map:proto.Test.Map.body)
  return body_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, double >*
Test_Map::mutable_body() {
  // @@protoc_insertion_point(field_mutable_map:proto.Test.Map.body)
  return body_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Test::Test()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Test)
}
Test::Test(const Test& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.Test)
}

void Test::SharedCtor() {
  _cached_size_ = 0;
}

Test::~Test() {
  // @@protoc_insertion_point(destructor:proto.Test)
  SharedDtor();
}

void Test::SharedDtor() {
}

void Test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[3].descriptor;
}

const Test& Test::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Test* Test::New(::google::protobuf::Arena* arena) const {
  Test* n = new Test;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Test::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Test)
}

bool Test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Test)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Test)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Test)
  return false;
#undef DO_
}

void Test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Test)
  // @@protoc_insertion_point(serialize_end:proto.Test)
}

::google::protobuf::uint8* Test::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Test)
  // @@protoc_insertion_point(serialize_to_array_end:proto.Test)
  return target;
}

size_t Test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Test)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Test)
  GOOGLE_DCHECK_NE(&from, this);
  const Test* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Test>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Test)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Test)
    MergeFrom(*source);
  }
}

void Test::MergeFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Test)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Test::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test::CopyFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {
  return true;
}

void Test::Swap(Test* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Test::InternalSwap(Test* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Test::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Test

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonReply::kCodeFieldNumber;
const int CommonReply::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonReply::CommonReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CommonReply)
}
CommonReply::CommonReply(const CommonReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desc().size() > 0) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:proto.CommonReply)
}

void CommonReply::SharedCtor() {
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

CommonReply::~CommonReply() {
  // @@protoc_insertion_point(destructor:proto.CommonReply)
  SharedDtor();
}

void CommonReply::SharedDtor() {
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommonReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonReply::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[4].descriptor;
}

const CommonReply& CommonReply::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommonReply* CommonReply::New(::google::protobuf::Arena* arena) const {
  CommonReply* n = new CommonReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CommonReply)
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

bool CommonReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CommonReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string desc = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.CommonReply.desc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CommonReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CommonReply)
  return false;
#undef DO_
}

void CommonReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CommonReply)
  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // string desc = 2;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.CommonReply.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.CommonReply)
}

::google::protobuf::uint8* CommonReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CommonReply)
  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // string desc = 2;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.CommonReply.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.CommonReply)
  return target;
}

size_t CommonReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CommonReply)
  size_t total_size = 0;

  // string desc = 2;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CommonReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CommonReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CommonReply)
    MergeFrom(*source);
  }
}

void CommonReply::MergeFrom(const CommonReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CommonReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void CommonReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CommonReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonReply::CopyFrom(const CommonReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CommonReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonReply::IsInitialized() const {
  return true;
}

void CommonReply::Swap(CommonReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonReply::InternalSwap(CommonReply* other) {
  desc_.Swap(&other->desc_);
  std::swap(code_, other->code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonReply::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonReply

// int32 code = 1;
void CommonReply::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 CommonReply::code() const {
  // @@protoc_insertion_point(field_get:proto.CommonReply.code)
  return code_;
}
void CommonReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:proto.CommonReply.code)
}

// string desc = 2;
void CommonReply::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommonReply::desc() const {
  // @@protoc_insertion_point(field_get:proto.CommonReply.desc)
  return desc_.GetNoArena();
}
void CommonReply::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CommonReply.desc)
}
#if LANG_CXX11
void CommonReply::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.CommonReply.desc)
}
#endif
void CommonReply::set_desc(const char* value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CommonReply.desc)
}
void CommonReply::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CommonReply.desc)
}
::std::string* CommonReply::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:proto.CommonReply.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommonReply::release_desc() {
  // @@protoc_insertion_point(field_release:proto.CommonReply.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommonReply::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:proto.CommonReply.desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoID::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoID::AutoID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AutoID)
}
AutoID::AutoID(const AutoID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.AutoID)
}

void AutoID::SharedCtor() {
  id_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

AutoID::~AutoID() {
  // @@protoc_insertion_point(destructor:proto.AutoID)
  SharedDtor();
}

void AutoID::SharedDtor() {
}

void AutoID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoID::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[5].descriptor;
}

const AutoID& AutoID::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutoID* AutoID::New(::google::protobuf::Arena* arena) const {
  AutoID* n = new AutoID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutoID::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AutoID)
  id_ = GOOGLE_LONGLONG(0);
}

bool AutoID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AutoID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AutoID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AutoID)
  return false;
#undef DO_
}

void AutoID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AutoID)
  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.AutoID)
}

::google::protobuf::uint8* AutoID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.AutoID)
  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.AutoID)
  return target;
}

size_t AutoID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AutoID)
  size_t total_size = 0;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AutoID)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AutoID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AutoID)
    MergeFrom(*source);
  }
}

void AutoID::MergeFrom(const AutoID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AutoID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void AutoID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AutoID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoID::CopyFrom(const AutoID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AutoID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoID::IsInitialized() const {
  return true;
}

void AutoID::Swap(AutoID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoID::InternalSwap(AutoID* other) {
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoID::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoID

// int64 id = 1;
void AutoID::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 AutoID::id() const {
  // @@protoc_insertion_point(field_get:proto.AutoID.id)
  return id_;
}
void AutoID::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.AutoID.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int String::kStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

String::String()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.String)
}
String::String(const String& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.str().size() > 0) {
    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.String)
}

void String::SharedCtor() {
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

String::~String() {
  // @@protoc_insertion_point(destructor:proto.String)
  SharedDtor();
}

void String::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void String::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* String::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[6].descriptor;
}

const String& String::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

String* String::New(::google::protobuf::Arena* arena) const {
  String* n = new String;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void String::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.String)
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.String)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string str = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.String.str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.String)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.String)
  return false;
#undef DO_
}

void String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.String)
  // string str = 1;
  if (this->str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.String.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.String)
}

::google::protobuf::uint8* String::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.String)
  // string str = 1;
  if (this->str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.String.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.String)
  return target;
}

size_t String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.String)
  size_t total_size = 0;

  // string str = 1;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void String::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.String)
  GOOGLE_DCHECK_NE(&from, this);
  const String* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const String>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.String)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.String)
    MergeFrom(*source);
  }
}

void String::MergeFrom(const String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.String)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.str().size() > 0) {

    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
}

void String::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void String::CopyFrom(const String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool String::IsInitialized() const {
  return true;
}

void String::Swap(String* other) {
  if (other == this) return;
  InternalSwap(other);
}
void String::InternalSwap(String* other) {
  str_.Swap(&other->str_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata String::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// String

// string str = 1;
void String::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& String::str() const {
  // @@protoc_insertion_point(field_get:proto.String.str)
  return str_.GetNoArena();
}
void String::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.String.str)
}
#if LANG_CXX11
void String::set_str(::std::string&& value) {
  
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.String.str)
}
#endif
void String::set_str(const char* value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.String.str)
}
void String::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.String.str)
}
::std::string* String::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:proto.String.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* String::release_str() {
  // @@protoc_insertion_point(field_release:proto.String.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void String::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:proto.String.str)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserRequest_LobbyLogin::kNameFieldNumber;
const int UserRequest_LobbyLogin::kPasswdFieldNumber;
const int UserRequest_LobbyLogin::kWayFieldNumber;
const int UserRequest_LobbyLogin::kIpFieldNumber;
const int UserRequest_LobbyLogin::kPlatformFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRequest_LobbyLogin::UserRequest_LobbyLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UserRequest.LobbyLogin)
}
UserRequest_LobbyLogin::UserRequest_LobbyLogin(const UserRequest_LobbyLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.passwd().size() > 0) {
    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  way_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.way().size() > 0) {
    way_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.way_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  platform_ = from.platform_;
  // @@protoc_insertion_point(copy_constructor:proto.UserRequest.LobbyLogin)
}

void UserRequest_LobbyLogin::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  way_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = 0u;
  _cached_size_ = 0;
}

UserRequest_LobbyLogin::~UserRequest_LobbyLogin() {
  // @@protoc_insertion_point(destructor:proto.UserRequest.LobbyLogin)
  SharedDtor();
}

void UserRequest_LobbyLogin::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  way_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserRequest_LobbyLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRequest_LobbyLogin::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[7].descriptor;
}

const UserRequest_LobbyLogin& UserRequest_LobbyLogin::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserRequest_LobbyLogin* UserRequest_LobbyLogin::New(::google::protobuf::Arena* arena) const {
  UserRequest_LobbyLogin* n = new UserRequest_LobbyLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserRequest_LobbyLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UserRequest.LobbyLogin)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  way_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = 0u;
}

bool UserRequest_LobbyLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UserRequest.LobbyLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.UserRequest.LobbyLogin.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string passwd = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.UserRequest.LobbyLogin.passwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string way = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_way()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->way().data(), this->way().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.UserRequest.LobbyLogin.way"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.UserRequest.LobbyLogin.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 platform = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UserRequest.LobbyLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UserRequest.LobbyLogin)
  return false;
#undef DO_
}

void UserRequest_LobbyLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UserRequest.LobbyLogin)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.UserRequest.LobbyLogin.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string passwd = 2;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.UserRequest.LobbyLogin.passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->passwd(), output);
  }

  // string way = 3;
  if (this->way().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->way().data(), this->way().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.UserRequest.LobbyLogin.way");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->way(), output);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.UserRequest.LobbyLogin.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip(), output);
  }

  // uint32 platform = 5;
  if (this->platform() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->platform(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.UserRequest.LobbyLogin)
}

::google::protobuf::uint8* UserRequest_LobbyLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.UserRequest.LobbyLogin)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.UserRequest.LobbyLogin.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string passwd = 2;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.UserRequest.LobbyLogin.passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->passwd(), target);
  }

  // string way = 3;
  if (this->way().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->way().data(), this->way().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.UserRequest.LobbyLogin.way");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->way(), target);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.UserRequest.LobbyLogin.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // uint32 platform = 5;
  if (this->platform() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->platform(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.UserRequest.LobbyLogin)
  return target;
}

size_t UserRequest_LobbyLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UserRequest.LobbyLogin)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string passwd = 2;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passwd());
  }

  // string way = 3;
  if (this->way().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->way());
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // uint32 platform = 5;
  if (this->platform() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->platform());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRequest_LobbyLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.UserRequest.LobbyLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRequest_LobbyLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserRequest_LobbyLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.UserRequest.LobbyLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.UserRequest.LobbyLogin)
    MergeFrom(*source);
  }
}

void UserRequest_LobbyLogin::MergeFrom(const UserRequest_LobbyLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UserRequest.LobbyLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.passwd().size() > 0) {

    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  if (from.way().size() > 0) {

    way_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.way_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.platform() != 0) {
    set_platform(from.platform());
  }
}

void UserRequest_LobbyLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.UserRequest.LobbyLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRequest_LobbyLogin::CopyFrom(const UserRequest_LobbyLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UserRequest.LobbyLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequest_LobbyLogin::IsInitialized() const {
  return true;
}

void UserRequest_LobbyLogin::Swap(UserRequest_LobbyLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserRequest_LobbyLogin::InternalSwap(UserRequest_LobbyLogin* other) {
  name_.Swap(&other->name_);
  passwd_.Swap(&other->passwd_);
  way_.Swap(&other->way_);
  ip_.Swap(&other->ip_);
  std::swap(platform_, other->platform_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserRequest_LobbyLogin::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserRequest_LobbyLogin

// string name = 1;
void UserRequest_LobbyLogin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserRequest_LobbyLogin::name() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.LobbyLogin.name)
  return name_.GetNoArena();
}
void UserRequest_LobbyLogin::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.UserRequest.LobbyLogin.name)
}
#if LANG_CXX11
void UserRequest_LobbyLogin::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UserRequest.LobbyLogin.name)
}
#endif
void UserRequest_LobbyLogin::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UserRequest.LobbyLogin.name)
}
void UserRequest_LobbyLogin::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UserRequest.LobbyLogin.name)
}
::std::string* UserRequest_LobbyLogin::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.UserRequest.LobbyLogin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserRequest_LobbyLogin::release_name() {
  // @@protoc_insertion_point(field_release:proto.UserRequest.LobbyLogin.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserRequest_LobbyLogin::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.UserRequest.LobbyLogin.name)
}

// string passwd = 2;
void UserRequest_LobbyLogin::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserRequest_LobbyLogin::passwd() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.LobbyLogin.passwd)
  return passwd_.GetNoArena();
}
void UserRequest_LobbyLogin::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.UserRequest.LobbyLogin.passwd)
}
#if LANG_CXX11
void UserRequest_LobbyLogin::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UserRequest.LobbyLogin.passwd)
}
#endif
void UserRequest_LobbyLogin::set_passwd(const char* value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UserRequest.LobbyLogin.passwd)
}
void UserRequest_LobbyLogin::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UserRequest.LobbyLogin.passwd)
}
::std::string* UserRequest_LobbyLogin::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:proto.UserRequest.LobbyLogin.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserRequest_LobbyLogin::release_passwd() {
  // @@protoc_insertion_point(field_release:proto.UserRequest.LobbyLogin.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserRequest_LobbyLogin::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:proto.UserRequest.LobbyLogin.passwd)
}

// string way = 3;
void UserRequest_LobbyLogin::clear_way() {
  way_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserRequest_LobbyLogin::way() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.LobbyLogin.way)
  return way_.GetNoArena();
}
void UserRequest_LobbyLogin::set_way(const ::std::string& value) {
  
  way_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.UserRequest.LobbyLogin.way)
}
#if LANG_CXX11
void UserRequest_LobbyLogin::set_way(::std::string&& value) {
  
  way_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UserRequest.LobbyLogin.way)
}
#endif
void UserRequest_LobbyLogin::set_way(const char* value) {
  
  way_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UserRequest.LobbyLogin.way)
}
void UserRequest_LobbyLogin::set_way(const char* value, size_t size) {
  
  way_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UserRequest.LobbyLogin.way)
}
::std::string* UserRequest_LobbyLogin::mutable_way() {
  
  // @@protoc_insertion_point(field_mutable:proto.UserRequest.LobbyLogin.way)
  return way_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserRequest_LobbyLogin::release_way() {
  // @@protoc_insertion_point(field_release:proto.UserRequest.LobbyLogin.way)
  
  return way_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserRequest_LobbyLogin::set_allocated_way(::std::string* way) {
  if (way != NULL) {
    
  } else {
    
  }
  way_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), way);
  // @@protoc_insertion_point(field_set_allocated:proto.UserRequest.LobbyLogin.way)
}

// string ip = 4;
void UserRequest_LobbyLogin::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserRequest_LobbyLogin::ip() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.LobbyLogin.ip)
  return ip_.GetNoArena();
}
void UserRequest_LobbyLogin::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.UserRequest.LobbyLogin.ip)
}
#if LANG_CXX11
void UserRequest_LobbyLogin::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UserRequest.LobbyLogin.ip)
}
#endif
void UserRequest_LobbyLogin::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UserRequest.LobbyLogin.ip)
}
void UserRequest_LobbyLogin::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UserRequest.LobbyLogin.ip)
}
::std::string* UserRequest_LobbyLogin::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:proto.UserRequest.LobbyLogin.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserRequest_LobbyLogin::release_ip() {
  // @@protoc_insertion_point(field_release:proto.UserRequest.LobbyLogin.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserRequest_LobbyLogin::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:proto.UserRequest.LobbyLogin.ip)
}

// uint32 platform = 5;
void UserRequest_LobbyLogin::clear_platform() {
  platform_ = 0u;
}
::google::protobuf::uint32 UserRequest_LobbyLogin::platform() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.LobbyLogin.platform)
  return platform_;
}
void UserRequest_LobbyLogin::set_platform(::google::protobuf::uint32 value) {
  
  platform_ = value;
  // @@protoc_insertion_point(field_set:proto.UserRequest.LobbyLogin.platform)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRequest_NilBody::UserRequest_NilBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UserRequest.NilBody)
}
UserRequest_NilBody::UserRequest_NilBody(const UserRequest_NilBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.UserRequest.NilBody)
}

void UserRequest_NilBody::SharedCtor() {
  _cached_size_ = 0;
}

UserRequest_NilBody::~UserRequest_NilBody() {
  // @@protoc_insertion_point(destructor:proto.UserRequest.NilBody)
  SharedDtor();
}

void UserRequest_NilBody::SharedDtor() {
}

void UserRequest_NilBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRequest_NilBody::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[8].descriptor;
}

const UserRequest_NilBody& UserRequest_NilBody::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserRequest_NilBody* UserRequest_NilBody::New(::google::protobuf::Arena* arena) const {
  UserRequest_NilBody* n = new UserRequest_NilBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserRequest_NilBody::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UserRequest.NilBody)
}

bool UserRequest_NilBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UserRequest.NilBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UserRequest.NilBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UserRequest.NilBody)
  return false;
#undef DO_
}

void UserRequest_NilBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UserRequest.NilBody)
  // @@protoc_insertion_point(serialize_end:proto.UserRequest.NilBody)
}

::google::protobuf::uint8* UserRequest_NilBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.UserRequest.NilBody)
  // @@protoc_insertion_point(serialize_to_array_end:proto.UserRequest.NilBody)
  return target;
}

size_t UserRequest_NilBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UserRequest.NilBody)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRequest_NilBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.UserRequest.NilBody)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRequest_NilBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserRequest_NilBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.UserRequest.NilBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.UserRequest.NilBody)
    MergeFrom(*source);
  }
}

void UserRequest_NilBody::MergeFrom(const UserRequest_NilBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UserRequest.NilBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void UserRequest_NilBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.UserRequest.NilBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRequest_NilBody::CopyFrom(const UserRequest_NilBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UserRequest.NilBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequest_NilBody::IsInitialized() const {
  return true;
}

void UserRequest_NilBody::Swap(UserRequest_NilBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserRequest_NilBody::InternalSwap(UserRequest_NilBody* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserRequest_NilBody::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserRequest_NilBody

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserRequest_GameLogin::kGameIDFieldNumber;
const int UserRequest_GameLogin::kTableIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRequest_GameLogin::UserRequest_GameLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UserRequest.GameLogin)
}
UserRequest_GameLogin::UserRequest_GameLogin(const UserRequest_GameLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    reinterpret_cast<char*>(&tableid_) -
    reinterpret_cast<char*>(&gameid_) + sizeof(tableid_));
  // @@protoc_insertion_point(copy_constructor:proto.UserRequest.GameLogin)
}

void UserRequest_GameLogin::SharedCtor() {
  ::memset(&gameid_, 0, reinterpret_cast<char*>(&tableid_) -
    reinterpret_cast<char*>(&gameid_) + sizeof(tableid_));
  _cached_size_ = 0;
}

UserRequest_GameLogin::~UserRequest_GameLogin() {
  // @@protoc_insertion_point(destructor:proto.UserRequest.GameLogin)
  SharedDtor();
}

void UserRequest_GameLogin::SharedDtor() {
}

void UserRequest_GameLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRequest_GameLogin::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[9].descriptor;
}

const UserRequest_GameLogin& UserRequest_GameLogin::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserRequest_GameLogin* UserRequest_GameLogin::New(::google::protobuf::Arena* arena) const {
  UserRequest_GameLogin* n = new UserRequest_GameLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserRequest_GameLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UserRequest.GameLogin)
  ::memset(&gameid_, 0, reinterpret_cast<char*>(&tableid_) -
    reinterpret_cast<char*>(&gameid_) + sizeof(tableid_));
}

bool UserRequest_GameLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UserRequest.GameLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GameType gameID = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gameid(static_cast< ::proto::GameType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tableID = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UserRequest.GameLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UserRequest.GameLogin)
  return false;
#undef DO_
}

void UserRequest_GameLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UserRequest.GameLogin)
  // .proto.GameType gameID = 1;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gameid(), output);
  }

  // uint32 tableID = 2;
  if (this->tableid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tableid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.UserRequest.GameLogin)
}

::google::protobuf::uint8* UserRequest_GameLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.UserRequest.GameLogin)
  // .proto.GameType gameID = 1;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gameid(), target);
  }

  // uint32 tableID = 2;
  if (this->tableid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tableid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.UserRequest.GameLogin)
  return target;
}

size_t UserRequest_GameLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UserRequest.GameLogin)
  size_t total_size = 0;

  // .proto.GameType gameID = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gameid());
  }

  // uint32 tableID = 2;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tableid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRequest_GameLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.UserRequest.GameLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRequest_GameLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserRequest_GameLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.UserRequest.GameLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.UserRequest.GameLogin)
    MergeFrom(*source);
  }
}

void UserRequest_GameLogin::MergeFrom(const UserRequest_GameLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UserRequest.GameLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
  if (from.tableid() != 0) {
    set_tableid(from.tableid());
  }
}

void UserRequest_GameLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.UserRequest.GameLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRequest_GameLogin::CopyFrom(const UserRequest_GameLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UserRequest.GameLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequest_GameLogin::IsInitialized() const {
  return true;
}

void UserRequest_GameLogin::Swap(UserRequest_GameLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserRequest_GameLogin::InternalSwap(UserRequest_GameLogin* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(tableid_, other->tableid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserRequest_GameLogin::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserRequest_GameLogin

// .proto.GameType gameID = 1;
void UserRequest_GameLogin::clear_gameid() {
  gameid_ = 0;
}
::proto::GameType UserRequest_GameLogin::gameid() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.GameLogin.gameID)
  return static_cast< ::proto::GameType >(gameid_);
}
void UserRequest_GameLogin::set_gameid(::proto::GameType value) {
  
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.UserRequest.GameLogin.gameID)
}

// uint32 tableID = 2;
void UserRequest_GameLogin::clear_tableid() {
  tableid_ = 0u;
}
::google::protobuf::uint32 UserRequest_GameLogin::tableid() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.GameLogin.tableID)
  return tableid_;
}
void UserRequest_GameLogin::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.UserRequest.GameLogin.tableID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserRequest_GameExit::kGameIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRequest_GameExit::UserRequest_GameExit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UserRequest.GameExit)
}
UserRequest_GameExit::UserRequest_GameExit(const UserRequest_GameExit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:proto.UserRequest.GameExit)
}

void UserRequest_GameExit::SharedCtor() {
  gameid_ = 0;
  _cached_size_ = 0;
}

UserRequest_GameExit::~UserRequest_GameExit() {
  // @@protoc_insertion_point(destructor:proto.UserRequest.GameExit)
  SharedDtor();
}

void UserRequest_GameExit::SharedDtor() {
}

void UserRequest_GameExit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRequest_GameExit::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[10].descriptor;
}

const UserRequest_GameExit& UserRequest_GameExit::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserRequest_GameExit* UserRequest_GameExit::New(::google::protobuf::Arena* arena) const {
  UserRequest_GameExit* n = new UserRequest_GameExit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserRequest_GameExit::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UserRequest.GameExit)
  gameid_ = 0;
}

bool UserRequest_GameExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UserRequest.GameExit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GameType gameID = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gameid(static_cast< ::proto::GameType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UserRequest.GameExit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UserRequest.GameExit)
  return false;
#undef DO_
}

void UserRequest_GameExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UserRequest.GameExit)
  // .proto.GameType gameID = 1;
  if (this->gameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gameid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.UserRequest.GameExit)
}

::google::protobuf::uint8* UserRequest_GameExit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.UserRequest.GameExit)
  // .proto.GameType gameID = 1;
  if (this->gameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gameid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.UserRequest.GameExit)
  return target;
}

size_t UserRequest_GameExit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UserRequest.GameExit)
  size_t total_size = 0;

  // .proto.GameType gameID = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gameid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRequest_GameExit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.UserRequest.GameExit)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRequest_GameExit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserRequest_GameExit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.UserRequest.GameExit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.UserRequest.GameExit)
    MergeFrom(*source);
  }
}

void UserRequest_GameExit::MergeFrom(const UserRequest_GameExit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UserRequest.GameExit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.gameid() != 0) {
    set_gameid(from.gameid());
  }
}

void UserRequest_GameExit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.UserRequest.GameExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRequest_GameExit::CopyFrom(const UserRequest_GameExit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UserRequest.GameExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequest_GameExit::IsInitialized() const {
  return true;
}

void UserRequest_GameExit::Swap(UserRequest_GameExit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserRequest_GameExit::InternalSwap(UserRequest_GameExit* other) {
  std::swap(gameid_, other->gameid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserRequest_GameExit::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserRequest_GameExit

// .proto.GameType gameID = 1;
void UserRequest_GameExit::clear_gameid() {
  gameid_ = 0;
}
::proto::GameType UserRequest_GameExit::gameid() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.GameExit.gameID)
  return static_cast< ::proto::GameType >(gameid_);
}
void UserRequest_GameExit::set_gameid(::proto::GameType value) {
  
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.UserRequest.GameExit.gameID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRequest::UserRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UserRequest)
}
UserRequest::UserRequest(const UserRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.UserRequest)
}

void UserRequest::SharedCtor() {
  _cached_size_ = 0;
}

UserRequest::~UserRequest() {
  // @@protoc_insertion_point(destructor:proto.UserRequest)
  SharedDtor();
}

void UserRequest::SharedDtor() {
}

void UserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRequest::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[11].descriptor;
}

const UserRequest& UserRequest::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserRequest* UserRequest::New(::google::protobuf::Arena* arena) const {
  UserRequest* n = new UserRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UserRequest)
}

bool UserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UserRequest)
  return false;
#undef DO_
}

void UserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UserRequest)
  // @@protoc_insertion_point(serialize_end:proto.UserRequest)
}

::google::protobuf::uint8* UserRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.UserRequest)
  // @@protoc_insertion_point(serialize_to_array_end:proto.UserRequest)
  return target;
}

size_t UserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UserRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.UserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.UserRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.UserRequest)
    MergeFrom(*source);
  }
}

void UserRequest::MergeFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void UserRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.UserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRequest::CopyFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequest::IsInitialized() const {
  return true;
}

void UserRequest::Swap(UserRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserRequest::InternalSwap(UserRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserRequest::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lobby_UserSnapshot::kNameFieldNumber;
const int Lobby_UserSnapshot::kNickFieldNumber;
const int Lobby_UserSnapshot::kBalanceFieldNumber;
const int Lobby_UserSnapshot::kVideoChipsFieldNumber;
const int Lobby_UserSnapshot::kRouletteChipsFieldNumber;
const int Lobby_UserSnapshot::kLimitsFieldNumber;
const int Lobby_UserSnapshot::kMoneysortFieldNumber;
const int Lobby_UserSnapshot::kParentIDFieldNumber;
const int Lobby_UserSnapshot::kIsTipFieldNumber;
const int Lobby_UserSnapshot::kIsChatFieldNumber;
const int Lobby_UserSnapshot::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lobby_UserSnapshot::Lobby_UserSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Lobby.UserSnapshot)
}
Lobby_UserSnapshot::Lobby_UserSnapshot(const Lobby_UserSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nick().size() > 0) {
    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  videochips_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.videochips().size() > 0) {
    videochips_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videochips_);
  }
  roulettechips_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.roulettechips().size() > 0) {
    roulettechips_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roulettechips_);
  }
  moneysort_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.moneysort().size() > 0) {
    moneysort_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moneysort_);
  }
  ::memcpy(&balance_, &from.balance_,
    reinterpret_cast<char*>(&ischat_) -
    reinterpret_cast<char*>(&balance_) + sizeof(ischat_));
  // @@protoc_insertion_point(copy_constructor:proto.Lobby.UserSnapshot)
}

void Lobby_UserSnapshot::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videochips_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roulettechips_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  moneysort_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&balance_, 0, reinterpret_cast<char*>(&ischat_) -
    reinterpret_cast<char*>(&balance_) + sizeof(ischat_));
  _cached_size_ = 0;
}

Lobby_UserSnapshot::~Lobby_UserSnapshot() {
  // @@protoc_insertion_point(destructor:proto.Lobby.UserSnapshot)
  SharedDtor();
}

void Lobby_UserSnapshot::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videochips_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roulettechips_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  moneysort_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Lobby_UserSnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby_UserSnapshot::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[12].descriptor;
}

const Lobby_UserSnapshot& Lobby_UserSnapshot::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lobby_UserSnapshot* Lobby_UserSnapshot::New(::google::protobuf::Arena* arena) const {
  Lobby_UserSnapshot* n = new Lobby_UserSnapshot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lobby_UserSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Lobby.UserSnapshot)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videochips_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roulettechips_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  moneysort_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&balance_, 0, reinterpret_cast<char*>(&ischat_) -
    reinterpret_cast<char*>(&balance_) + sizeof(ischat_));
}

bool Lobby_UserSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Lobby.UserSnapshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Lobby.UserSnapshot.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nick = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Lobby.UserSnapshot.nick"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double balance = 3;
      case 3: {
        if (tag == 25u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string videoChips = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videochips()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->videochips().data(), this->videochips().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Lobby.UserSnapshot.videoChips"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rouletteChips = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roulettechips()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->roulettechips().data(), this->roulettechips().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Lobby.UserSnapshot.rouletteChips"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 limits = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &limits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string moneysort = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_moneysort()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->moneysort().data(), this->moneysort().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Lobby.UserSnapshot.moneysort"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 parentID = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isTip = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isChat = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 uid = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Lobby.UserSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Lobby.UserSnapshot)
  return false;
#undef DO_
}

void Lobby_UserSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Lobby.UserSnapshot)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.UserSnapshot.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.UserSnapshot.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick(), output);
  }

  // double balance = 3;
  if (this->balance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->balance(), output);
  }

  // string videoChips = 4;
  if (this->videochips().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->videochips().data(), this->videochips().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.UserSnapshot.videoChips");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->videochips(), output);
  }

  // string rouletteChips = 5;
  if (this->roulettechips().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roulettechips().data(), this->roulettechips().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.UserSnapshot.rouletteChips");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->roulettechips(), output);
  }

  // uint64 limits = 6;
  if (this->limits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->limits(), output);
  }

  // string moneysort = 7;
  if (this->moneysort().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->moneysort().data(), this->moneysort().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.UserSnapshot.moneysort");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->moneysort(), output);
  }

  // int64 parentID = 8;
  if (this->parentid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->parentid(), output);
  }

  // bool isTip = 9;
  if (this->istip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->istip(), output);
  }

  // bool isChat = 10;
  if (this->ischat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->ischat(), output);
  }

  // int64 uid = 11;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->uid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Lobby.UserSnapshot)
}

::google::protobuf::uint8* Lobby_UserSnapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Lobby.UserSnapshot)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.UserSnapshot.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.UserSnapshot.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick(), target);
  }

  // double balance = 3;
  if (this->balance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->balance(), target);
  }

  // string videoChips = 4;
  if (this->videochips().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->videochips().data(), this->videochips().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.UserSnapshot.videoChips");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->videochips(), target);
  }

  // string rouletteChips = 5;
  if (this->roulettechips().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->roulettechips().data(), this->roulettechips().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.UserSnapshot.rouletteChips");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->roulettechips(), target);
  }

  // uint64 limits = 6;
  if (this->limits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->limits(), target);
  }

  // string moneysort = 7;
  if (this->moneysort().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->moneysort().data(), this->moneysort().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.UserSnapshot.moneysort");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->moneysort(), target);
  }

  // int64 parentID = 8;
  if (this->parentid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->parentid(), target);
  }

  // bool isTip = 9;
  if (this->istip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->istip(), target);
  }

  // bool isChat = 10;
  if (this->ischat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ischat(), target);
  }

  // int64 uid = 11;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->uid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Lobby.UserSnapshot)
  return target;
}

size_t Lobby_UserSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Lobby.UserSnapshot)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());
  }

  // string videoChips = 4;
  if (this->videochips().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->videochips());
  }

  // string rouletteChips = 5;
  if (this->roulettechips().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->roulettechips());
  }

  // string moneysort = 7;
  if (this->moneysort().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->moneysort());
  }

  // double balance = 3;
  if (this->balance() != 0) {
    total_size += 1 + 8;
  }

  // uint64 limits = 6;
  if (this->limits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->limits());
  }

  // int64 parentID = 8;
  if (this->parentid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->parentid());
  }

  // int64 uid = 11;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  // bool isTip = 9;
  if (this->istip() != 0) {
    total_size += 1 + 1;
  }

  // bool isChat = 10;
  if (this->ischat() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby_UserSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Lobby.UserSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const Lobby_UserSnapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lobby_UserSnapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Lobby.UserSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Lobby.UserSnapshot)
    MergeFrom(*source);
  }
}

void Lobby_UserSnapshot::MergeFrom(const Lobby_UserSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Lobby.UserSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.videochips().size() > 0) {

    videochips_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.videochips_);
  }
  if (from.roulettechips().size() > 0) {

    roulettechips_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.roulettechips_);
  }
  if (from.moneysort().size() > 0) {

    moneysort_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moneysort_);
  }
  if (from.balance() != 0) {
    set_balance(from.balance());
  }
  if (from.limits() != 0) {
    set_limits(from.limits());
  }
  if (from.parentid() != 0) {
    set_parentid(from.parentid());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.istip() != 0) {
    set_istip(from.istip());
  }
  if (from.ischat() != 0) {
    set_ischat(from.ischat());
  }
}

void Lobby_UserSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Lobby.UserSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby_UserSnapshot::CopyFrom(const Lobby_UserSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Lobby.UserSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby_UserSnapshot::IsInitialized() const {
  return true;
}

void Lobby_UserSnapshot::Swap(Lobby_UserSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lobby_UserSnapshot::InternalSwap(Lobby_UserSnapshot* other) {
  name_.Swap(&other->name_);
  nick_.Swap(&other->nick_);
  videochips_.Swap(&other->videochips_);
  roulettechips_.Swap(&other->roulettechips_);
  moneysort_.Swap(&other->moneysort_);
  std::swap(balance_, other->balance_);
  std::swap(limits_, other->limits_);
  std::swap(parentid_, other->parentid_);
  std::swap(uid_, other->uid_);
  std::swap(istip_, other->istip_);
  std::swap(ischat_, other->ischat_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lobby_UserSnapshot::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lobby_UserSnapshot

// string name = 1;
void Lobby_UserSnapshot::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Lobby_UserSnapshot::name() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.name)
  return name_.GetNoArena();
}
void Lobby_UserSnapshot::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.name)
}
#if LANG_CXX11
void Lobby_UserSnapshot::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.UserSnapshot.name)
}
#endif
void Lobby_UserSnapshot::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.UserSnapshot.name)
}
void Lobby_UserSnapshot::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.UserSnapshot.name)
}
::std::string* Lobby_UserSnapshot::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.UserSnapshot.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Lobby_UserSnapshot::release_name() {
  // @@protoc_insertion_point(field_release:proto.Lobby.UserSnapshot.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Lobby_UserSnapshot::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.UserSnapshot.name)
}

// string nick = 2;
void Lobby_UserSnapshot::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Lobby_UserSnapshot::nick() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.nick)
  return nick_.GetNoArena();
}
void Lobby_UserSnapshot::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.nick)
}
#if LANG_CXX11
void Lobby_UserSnapshot::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.UserSnapshot.nick)
}
#endif
void Lobby_UserSnapshot::set_nick(const char* value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.UserSnapshot.nick)
}
void Lobby_UserSnapshot::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.UserSnapshot.nick)
}
::std::string* Lobby_UserSnapshot::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.UserSnapshot.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Lobby_UserSnapshot::release_nick() {
  // @@protoc_insertion_point(field_release:proto.Lobby.UserSnapshot.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Lobby_UserSnapshot::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.UserSnapshot.nick)
}

// double balance = 3;
void Lobby_UserSnapshot::clear_balance() {
  balance_ = 0;
}
double Lobby_UserSnapshot::balance() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.balance)
  return balance_;
}
void Lobby_UserSnapshot::set_balance(double value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.balance)
}

// string videoChips = 4;
void Lobby_UserSnapshot::clear_videochips() {
  videochips_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Lobby_UserSnapshot::videochips() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.videoChips)
  return videochips_.GetNoArena();
}
void Lobby_UserSnapshot::set_videochips(const ::std::string& value) {
  
  videochips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.videoChips)
}
#if LANG_CXX11
void Lobby_UserSnapshot::set_videochips(::std::string&& value) {
  
  videochips_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.UserSnapshot.videoChips)
}
#endif
void Lobby_UserSnapshot::set_videochips(const char* value) {
  
  videochips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.UserSnapshot.videoChips)
}
void Lobby_UserSnapshot::set_videochips(const char* value, size_t size) {
  
  videochips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.UserSnapshot.videoChips)
}
::std::string* Lobby_UserSnapshot::mutable_videochips() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.UserSnapshot.videoChips)
  return videochips_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Lobby_UserSnapshot::release_videochips() {
  // @@protoc_insertion_point(field_release:proto.Lobby.UserSnapshot.videoChips)
  
  return videochips_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Lobby_UserSnapshot::set_allocated_videochips(::std::string* videochips) {
  if (videochips != NULL) {
    
  } else {
    
  }
  videochips_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videochips);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.UserSnapshot.videoChips)
}

// string rouletteChips = 5;
void Lobby_UserSnapshot::clear_roulettechips() {
  roulettechips_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Lobby_UserSnapshot::roulettechips() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.rouletteChips)
  return roulettechips_.GetNoArena();
}
void Lobby_UserSnapshot::set_roulettechips(const ::std::string& value) {
  
  roulettechips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.rouletteChips)
}
#if LANG_CXX11
void Lobby_UserSnapshot::set_roulettechips(::std::string&& value) {
  
  roulettechips_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.UserSnapshot.rouletteChips)
}
#endif
void Lobby_UserSnapshot::set_roulettechips(const char* value) {
  
  roulettechips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.UserSnapshot.rouletteChips)
}
void Lobby_UserSnapshot::set_roulettechips(const char* value, size_t size) {
  
  roulettechips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.UserSnapshot.rouletteChips)
}
::std::string* Lobby_UserSnapshot::mutable_roulettechips() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.UserSnapshot.rouletteChips)
  return roulettechips_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Lobby_UserSnapshot::release_roulettechips() {
  // @@protoc_insertion_point(field_release:proto.Lobby.UserSnapshot.rouletteChips)
  
  return roulettechips_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Lobby_UserSnapshot::set_allocated_roulettechips(::std::string* roulettechips) {
  if (roulettechips != NULL) {
    
  } else {
    
  }
  roulettechips_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roulettechips);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.UserSnapshot.rouletteChips)
}

// uint64 limits = 6;
void Lobby_UserSnapshot::clear_limits() {
  limits_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Lobby_UserSnapshot::limits() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.limits)
  return limits_;
}
void Lobby_UserSnapshot::set_limits(::google::protobuf::uint64 value) {
  
  limits_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.limits)
}

// string moneysort = 7;
void Lobby_UserSnapshot::clear_moneysort() {
  moneysort_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Lobby_UserSnapshot::moneysort() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.moneysort)
  return moneysort_.GetNoArena();
}
void Lobby_UserSnapshot::set_moneysort(const ::std::string& value) {
  
  moneysort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.moneysort)
}
#if LANG_CXX11
void Lobby_UserSnapshot::set_moneysort(::std::string&& value) {
  
  moneysort_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.UserSnapshot.moneysort)
}
#endif
void Lobby_UserSnapshot::set_moneysort(const char* value) {
  
  moneysort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.UserSnapshot.moneysort)
}
void Lobby_UserSnapshot::set_moneysort(const char* value, size_t size) {
  
  moneysort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.UserSnapshot.moneysort)
}
::std::string* Lobby_UserSnapshot::mutable_moneysort() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.UserSnapshot.moneysort)
  return moneysort_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Lobby_UserSnapshot::release_moneysort() {
  // @@protoc_insertion_point(field_release:proto.Lobby.UserSnapshot.moneysort)
  
  return moneysort_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Lobby_UserSnapshot::set_allocated_moneysort(::std::string* moneysort) {
  if (moneysort != NULL) {
    
  } else {
    
  }
  moneysort_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moneysort);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.UserSnapshot.moneysort)
}

// int64 parentID = 8;
void Lobby_UserSnapshot::clear_parentid() {
  parentid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Lobby_UserSnapshot::parentid() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.parentID)
  return parentid_;
}
void Lobby_UserSnapshot::set_parentid(::google::protobuf::int64 value) {
  
  parentid_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.parentID)
}

// bool isTip = 9;
void Lobby_UserSnapshot::clear_istip() {
  istip_ = false;
}
bool Lobby_UserSnapshot::istip() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.isTip)
  return istip_;
}
void Lobby_UserSnapshot::set_istip(bool value) {
  
  istip_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.isTip)
}

// bool isChat = 10;
void Lobby_UserSnapshot::clear_ischat() {
  ischat_ = false;
}
bool Lobby_UserSnapshot::ischat() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.isChat)
  return ischat_;
}
void Lobby_UserSnapshot::set_ischat(bool value) {
  
  ischat_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.isChat)
}

// int64 uid = 11;
void Lobby_UserSnapshot::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Lobby_UserSnapshot::uid() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.uid)
  return uid_;
}
void Lobby_UserSnapshot::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lobby_TableSnapshot::kGameTypeFieldNumber;
const int Lobby_TableSnapshot::kTableIDFieldNumber;
const int Lobby_TableSnapshot::kStageFieldNumber;
const int Lobby_TableSnapshot::kInningFieldNumber;
const int Lobby_TableSnapshot::kStatusFieldNumber;
const int Lobby_TableSnapshot::kTimeFieldNumber;
const int Lobby_TableSnapshot::kWaysFieldNumber;
const int Lobby_TableSnapshot::kCountsFieldNumber;
const int Lobby_TableSnapshot::kIsopenFieldNumber;
const int Lobby_TableSnapshot::kDealerFieldNumber;
const int Lobby_TableSnapshot::kLimitFieldNumber;
const int Lobby_TableSnapshot::kPlatformFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lobby_TableSnapshot::Lobby_TableSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Lobby.TableSnapshot)
}
Lobby_TableSnapshot::Lobby_TableSnapshot(const Lobby_TableSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ways_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ways().size() > 0) {
    ways_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ways_);
  }
  counts_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.counts().size() > 0) {
    counts_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.counts_);
  }
  dealer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dealer().size() > 0) {
    dealer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dealer_);
  }
  limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.limit().size() > 0) {
    limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.limit_);
  }
  ::memcpy(&gametype_, &from.gametype_,
    reinterpret_cast<char*>(&platform_) -
    reinterpret_cast<char*>(&gametype_) + sizeof(platform_));
  // @@protoc_insertion_point(copy_constructor:proto.Lobby.TableSnapshot)
}

void Lobby_TableSnapshot::SharedCtor() {
  ways_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  counts_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dealer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gametype_, 0, reinterpret_cast<char*>(&platform_) -
    reinterpret_cast<char*>(&gametype_) + sizeof(platform_));
  _cached_size_ = 0;
}

Lobby_TableSnapshot::~Lobby_TableSnapshot() {
  // @@protoc_insertion_point(destructor:proto.Lobby.TableSnapshot)
  SharedDtor();
}

void Lobby_TableSnapshot::SharedDtor() {
  ways_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  counts_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dealer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Lobby_TableSnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby_TableSnapshot::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[13].descriptor;
}

const Lobby_TableSnapshot& Lobby_TableSnapshot::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lobby_TableSnapshot* Lobby_TableSnapshot::New(::google::protobuf::Arena* arena) const {
  Lobby_TableSnapshot* n = new Lobby_TableSnapshot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lobby_TableSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Lobby.TableSnapshot)
  ways_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  counts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dealer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gametype_, 0, reinterpret_cast<char*>(&platform_) -
    reinterpret_cast<char*>(&gametype_) + sizeof(platform_));
}

bool Lobby_TableSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Lobby.TableSnapshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gameType = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gametype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tableID = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stage = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 inning = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 status = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ways = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ways()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ways().data(), this->ways().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Lobby.TableSnapshot.ways"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string counts = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_counts()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->counts().data(), this->counts().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Lobby.TableSnapshot.counts"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isopen = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dealer = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dealer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dealer().data(), this->dealer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Lobby.TableSnapshot.dealer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string limit = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_limit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->limit().data(), this->limit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Lobby.TableSnapshot.limit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 platform = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Lobby.TableSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Lobby.TableSnapshot)
  return false;
#undef DO_
}

void Lobby_TableSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Lobby.TableSnapshot)
  // uint32 gameType = 1;
  if (this->gametype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gametype(), output);
  }

  // uint32 tableID = 2;
  if (this->tableid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tableid(), output);
  }

  // int32 stage = 3;
  if (this->stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stage(), output);
  }

  // int32 inning = 4;
  if (this->inning() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->inning(), output);
  }

  // uint32 status = 5;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  // int32 time = 6;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->time(), output);
  }

  // string ways = 7;
  if (this->ways().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ways().data(), this->ways().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.TableSnapshot.ways");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ways(), output);
  }

  // string counts = 8;
  if (this->counts().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->counts().data(), this->counts().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.TableSnapshot.counts");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->counts(), output);
  }

  // bool isopen = 9;
  if (this->isopen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isopen(), output);
  }

  // string dealer = 10;
  if (this->dealer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dealer().data(), this->dealer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.TableSnapshot.dealer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->dealer(), output);
  }

  // string limit = 11;
  if (this->limit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->limit().data(), this->limit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.TableSnapshot.limit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->limit(), output);
  }

  // uint32 platform = 12;
  if (this->platform() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->platform(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Lobby.TableSnapshot)
}

::google::protobuf::uint8* Lobby_TableSnapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Lobby.TableSnapshot)
  // uint32 gameType = 1;
  if (this->gametype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gametype(), target);
  }

  // uint32 tableID = 2;
  if (this->tableid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tableid(), target);
  }

  // int32 stage = 3;
  if (this->stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stage(), target);
  }

  // int32 inning = 4;
  if (this->inning() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->inning(), target);
  }

  // uint32 status = 5;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  // int32 time = 6;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->time(), target);
  }

  // string ways = 7;
  if (this->ways().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ways().data(), this->ways().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.TableSnapshot.ways");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ways(), target);
  }

  // string counts = 8;
  if (this->counts().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->counts().data(), this->counts().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.TableSnapshot.counts");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->counts(), target);
  }

  // bool isopen = 9;
  if (this->isopen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isopen(), target);
  }

  // string dealer = 10;
  if (this->dealer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dealer().data(), this->dealer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.TableSnapshot.dealer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->dealer(), target);
  }

  // string limit = 11;
  if (this->limit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->limit().data(), this->limit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Lobby.TableSnapshot.limit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->limit(), target);
  }

  // uint32 platform = 12;
  if (this->platform() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->platform(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Lobby.TableSnapshot)
  return target;
}

size_t Lobby_TableSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Lobby.TableSnapshot)
  size_t total_size = 0;

  // string ways = 7;
  if (this->ways().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ways());
  }

  // string counts = 8;
  if (this->counts().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->counts());
  }

  // string dealer = 10;
  if (this->dealer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dealer());
  }

  // string limit = 11;
  if (this->limit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->limit());
  }

  // uint32 gameType = 1;
  if (this->gametype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gametype());
  }

  // uint32 tableID = 2;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tableid());
  }

  // int32 stage = 3;
  if (this->stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stage());
  }

  // int32 inning = 4;
  if (this->inning() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inning());
  }

  // uint32 status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // int32 time = 6;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // bool isopen = 9;
  if (this->isopen() != 0) {
    total_size += 1 + 1;
  }

  // uint32 platform = 12;
  if (this->platform() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->platform());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby_TableSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Lobby.TableSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const Lobby_TableSnapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lobby_TableSnapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Lobby.TableSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Lobby.TableSnapshot)
    MergeFrom(*source);
  }
}

void Lobby_TableSnapshot::MergeFrom(const Lobby_TableSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Lobby.TableSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ways().size() > 0) {

    ways_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ways_);
  }
  if (from.counts().size() > 0) {

    counts_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.counts_);
  }
  if (from.dealer().size() > 0) {

    dealer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dealer_);
  }
  if (from.limit().size() > 0) {

    limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.limit_);
  }
  if (from.gametype() != 0) {
    set_gametype(from.gametype());
  }
  if (from.tableid() != 0) {
    set_tableid(from.tableid());
  }
  if (from.stage() != 0) {
    set_stage(from.stage());
  }
  if (from.inning() != 0) {
    set_inning(from.inning());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.isopen() != 0) {
    set_isopen(from.isopen());
  }
  if (from.platform() != 0) {
    set_platform(from.platform());
  }
}

void Lobby_TableSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Lobby.TableSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby_TableSnapshot::CopyFrom(const Lobby_TableSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Lobby.TableSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby_TableSnapshot::IsInitialized() const {
  return true;
}

void Lobby_TableSnapshot::Swap(Lobby_TableSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lobby_TableSnapshot::InternalSwap(Lobby_TableSnapshot* other) {
  ways_.Swap(&other->ways_);
  counts_.Swap(&other->counts_);
  dealer_.Swap(&other->dealer_);
  limit_.Swap(&other->limit_);
  std::swap(gametype_, other->gametype_);
  std::swap(tableid_, other->tableid_);
  std::swap(stage_, other->stage_);
  std::swap(inning_, other->inning_);
  std::swap(status_, other->status_);
  std::swap(time_, other->time_);
  std::swap(isopen_, other->isopen_);
  std::swap(platform_, other->platform_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lobby_TableSnapshot::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lobby_TableSnapshot

// uint32 gameType = 1;
void Lobby_TableSnapshot::clear_gametype() {
  gametype_ = 0u;
}
::google::protobuf::uint32 Lobby_TableSnapshot::gametype() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.gameType)
  return gametype_;
}
void Lobby_TableSnapshot::set_gametype(::google::protobuf::uint32 value) {
  
  gametype_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.gameType)
}

// uint32 tableID = 2;
void Lobby_TableSnapshot::clear_tableid() {
  tableid_ = 0u;
}
::google::protobuf::uint32 Lobby_TableSnapshot::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.tableID)
  return tableid_;
}
void Lobby_TableSnapshot::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.tableID)
}

// int32 stage = 3;
void Lobby_TableSnapshot::clear_stage() {
  stage_ = 0;
}
::google::protobuf::int32 Lobby_TableSnapshot::stage() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.stage)
  return stage_;
}
void Lobby_TableSnapshot::set_stage(::google::protobuf::int32 value) {
  
  stage_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.stage)
}

// int32 inning = 4;
void Lobby_TableSnapshot::clear_inning() {
  inning_ = 0;
}
::google::protobuf::int32 Lobby_TableSnapshot::inning() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.inning)
  return inning_;
}
void Lobby_TableSnapshot::set_inning(::google::protobuf::int32 value) {
  
  inning_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.inning)
}

// uint32 status = 5;
void Lobby_TableSnapshot::clear_status() {
  status_ = 0u;
}
::google::protobuf::uint32 Lobby_TableSnapshot::status() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.status)
  return status_;
}
void Lobby_TableSnapshot::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.status)
}

// int32 time = 6;
void Lobby_TableSnapshot::clear_time() {
  time_ = 0;
}
::google::protobuf::int32 Lobby_TableSnapshot::time() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.time)
  return time_;
}
void Lobby_TableSnapshot::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.time)
}

// string ways = 7;
void Lobby_TableSnapshot::clear_ways() {
  ways_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Lobby_TableSnapshot::ways() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.ways)
  return ways_.GetNoArena();
}
void Lobby_TableSnapshot::set_ways(const ::std::string& value) {
  
  ways_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.ways)
}
#if LANG_CXX11
void Lobby_TableSnapshot::set_ways(::std::string&& value) {
  
  ways_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.TableSnapshot.ways)
}
#endif
void Lobby_TableSnapshot::set_ways(const char* value) {
  
  ways_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.TableSnapshot.ways)
}
void Lobby_TableSnapshot::set_ways(const char* value, size_t size) {
  
  ways_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.TableSnapshot.ways)
}
::std::string* Lobby_TableSnapshot::mutable_ways() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.TableSnapshot.ways)
  return ways_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Lobby_TableSnapshot::release_ways() {
  // @@protoc_insertion_point(field_release:proto.Lobby.TableSnapshot.ways)
  
  return ways_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Lobby_TableSnapshot::set_allocated_ways(::std::string* ways) {
  if (ways != NULL) {
    
  } else {
    
  }
  ways_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ways);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.TableSnapshot.ways)
}

// string counts = 8;
void Lobby_TableSnapshot::clear_counts() {
  counts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Lobby_TableSnapshot::counts() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.counts)
  return counts_.GetNoArena();
}
void Lobby_TableSnapshot::set_counts(const ::std::string& value) {
  
  counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.counts)
}
#if LANG_CXX11
void Lobby_TableSnapshot::set_counts(::std::string&& value) {
  
  counts_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.TableSnapshot.counts)
}
#endif
void Lobby_TableSnapshot::set_counts(const char* value) {
  
  counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.TableSnapshot.counts)
}
void Lobby_TableSnapshot::set_counts(const char* value, size_t size) {
  
  counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.TableSnapshot.counts)
}
::std::string* Lobby_TableSnapshot::mutable_counts() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.TableSnapshot.counts)
  return counts_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Lobby_TableSnapshot::release_counts() {
  // @@protoc_insertion_point(field_release:proto.Lobby.TableSnapshot.counts)
  
  return counts_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Lobby_TableSnapshot::set_allocated_counts(::std::string* counts) {
  if (counts != NULL) {
    
  } else {
    
  }
  counts_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), counts);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.TableSnapshot.counts)
}

// bool isopen = 9;
void Lobby_TableSnapshot::clear_isopen() {
  isopen_ = false;
}
bool Lobby_TableSnapshot::isopen() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.isopen)
  return isopen_;
}
void Lobby_TableSnapshot::set_isopen(bool value) {
  
  isopen_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.isopen)
}

// string dealer = 10;
void Lobby_TableSnapshot::clear_dealer() {
  dealer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Lobby_TableSnapshot::dealer() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.dealer)
  return dealer_.GetNoArena();
}
void Lobby_TableSnapshot::set_dealer(const ::std::string& value) {
  
  dealer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.dealer)
}
#if LANG_CXX11
void Lobby_TableSnapshot::set_dealer(::std::string&& value) {
  
  dealer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.TableSnapshot.dealer)
}
#endif
void Lobby_TableSnapshot::set_dealer(const char* value) {
  
  dealer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.TableSnapshot.dealer)
}
void Lobby_TableSnapshot::set_dealer(const char* value, size_t size) {
  
  dealer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.TableSnapshot.dealer)
}
::std::string* Lobby_TableSnapshot::mutable_dealer() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.TableSnapshot.dealer)
  return dealer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Lobby_TableSnapshot::release_dealer() {
  // @@protoc_insertion_point(field_release:proto.Lobby.TableSnapshot.dealer)
  
  return dealer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Lobby_TableSnapshot::set_allocated_dealer(::std::string* dealer) {
  if (dealer != NULL) {
    
  } else {
    
  }
  dealer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dealer);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.TableSnapshot.dealer)
}

// string limit = 11;
void Lobby_TableSnapshot::clear_limit() {
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Lobby_TableSnapshot::limit() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.limit)
  return limit_.GetNoArena();
}
void Lobby_TableSnapshot::set_limit(const ::std::string& value) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.limit)
}
#if LANG_CXX11
void Lobby_TableSnapshot::set_limit(::std::string&& value) {
  
  limit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.TableSnapshot.limit)
}
#endif
void Lobby_TableSnapshot::set_limit(const char* value) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.TableSnapshot.limit)
}
void Lobby_TableSnapshot::set_limit(const char* value, size_t size) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.TableSnapshot.limit)
}
::std::string* Lobby_TableSnapshot::mutable_limit() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.TableSnapshot.limit)
  return limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Lobby_TableSnapshot::release_limit() {
  // @@protoc_insertion_point(field_release:proto.Lobby.TableSnapshot.limit)
  
  return limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Lobby_TableSnapshot::set_allocated_limit(::std::string* limit) {
  if (limit != NULL) {
    
  } else {
    
  }
  limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), limit);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.TableSnapshot.limit)
}

// uint32 platform = 12;
void Lobby_TableSnapshot::clear_platform() {
  platform_ = 0u;
}
::google::protobuf::uint32 Lobby_TableSnapshot::platform() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.platform)
  return platform_;
}
void Lobby_TableSnapshot::set_platform(::google::protobuf::uint32 value) {
  
  platform_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.platform)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lobby::Lobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Lobby)
}
Lobby::Lobby(const Lobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.Lobby)
}

void Lobby::SharedCtor() {
  _cached_size_ = 0;
}

Lobby::~Lobby() {
  // @@protoc_insertion_point(destructor:proto.Lobby)
  SharedDtor();
}

void Lobby::SharedDtor() {
}

void Lobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[14].descriptor;
}

const Lobby& Lobby::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lobby* Lobby::New(::google::protobuf::Arena* arena) const {
  Lobby* n = new Lobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Lobby)
}

bool Lobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Lobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Lobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Lobby)
  return false;
#undef DO_
}

void Lobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Lobby)
  // @@protoc_insertion_point(serialize_end:proto.Lobby)
}

::google::protobuf::uint8* Lobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Lobby)
  // @@protoc_insertion_point(serialize_to_array_end:proto.Lobby)
  return target;
}

size_t Lobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Lobby)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Lobby)
  GOOGLE_DCHECK_NE(&from, this);
  const Lobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Lobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Lobby)
    MergeFrom(*source);
  }
}

void Lobby::MergeFrom(const Lobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Lobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Lobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Lobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby::CopyFrom(const Lobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Lobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby::IsInitialized() const {
  return true;
}

void Lobby::Swap(Lobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lobby::InternalSwap(Lobby* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lobby::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lobby

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Game_JoinTable::kTableIDFieldNumber;
const int Game_JoinTable::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Game_JoinTable::Game_JoinTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Game.JoinTable)
}
Game_JoinTable::Game_JoinTable(const Game_JoinTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tableid_, &from.tableid_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto.Game.JoinTable)
}

void Game_JoinTable::SharedCtor() {
  ::memset(&tableid_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(type_));
  _cached_size_ = 0;
}

Game_JoinTable::~Game_JoinTable() {
  // @@protoc_insertion_point(destructor:proto.Game.JoinTable)
  SharedDtor();
}

void Game_JoinTable::SharedDtor() {
}

void Game_JoinTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game_JoinTable::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[15].descriptor;
}

const Game_JoinTable& Game_JoinTable::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Game_JoinTable* Game_JoinTable::New(::google::protobuf::Arena* arena) const {
  Game_JoinTable* n = new Game_JoinTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Game_JoinTable::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Game.JoinTable)
  ::memset(&tableid_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(type_));
}

bool Game_JoinTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Game.JoinTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tableID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Game.JoinTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Game.JoinTable)
  return false;
#undef DO_
}

void Game_JoinTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Game.JoinTable)
  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Game.JoinTable)
}

::google::protobuf::uint8* Game_JoinTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Game.JoinTable)
  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Game.JoinTable)
  return target;
}

size_t Game_JoinTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Game.JoinTable)
  size_t total_size = 0;

  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tableid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game_JoinTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Game.JoinTable)
  GOOGLE_DCHECK_NE(&from, this);
  const Game_JoinTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Game_JoinTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Game.JoinTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Game.JoinTable)
    MergeFrom(*source);
  }
}

void Game_JoinTable::MergeFrom(const Game_JoinTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Game.JoinTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.tableid() != 0) {
    set_tableid(from.tableid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Game_JoinTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Game.JoinTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game_JoinTable::CopyFrom(const Game_JoinTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Game.JoinTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_JoinTable::IsInitialized() const {
  return true;
}

void Game_JoinTable::Swap(Game_JoinTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Game_JoinTable::InternalSwap(Game_JoinTable* other) {
  std::swap(tableid_, other->tableid_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Game_JoinTable::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Game_JoinTable

// uint32 tableID = 1;
void Game_JoinTable::clear_tableid() {
  tableid_ = 0u;
}
::google::protobuf::uint32 Game_JoinTable::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Game.JoinTable.tableID)
  return tableid_;
}
void Game_JoinTable::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.JoinTable.tableID)
}

// int32 type = 2;
void Game_JoinTable::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 Game_JoinTable::type() const {
  // @@protoc_insertion_point(field_get:proto.Game.JoinTable.type)
  return type_;
}
void Game_JoinTable::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.JoinTable.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Game_LeaveTable::kTableIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Game_LeaveTable::Game_LeaveTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Game.LeaveTable)
}
Game_LeaveTable::Game_LeaveTable(const Game_LeaveTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tableid_ = from.tableid_;
  // @@protoc_insertion_point(copy_constructor:proto.Game.LeaveTable)
}

void Game_LeaveTable::SharedCtor() {
  tableid_ = 0u;
  _cached_size_ = 0;
}

Game_LeaveTable::~Game_LeaveTable() {
  // @@protoc_insertion_point(destructor:proto.Game.LeaveTable)
  SharedDtor();
}

void Game_LeaveTable::SharedDtor() {
}

void Game_LeaveTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game_LeaveTable::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[16].descriptor;
}

const Game_LeaveTable& Game_LeaveTable::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Game_LeaveTable* Game_LeaveTable::New(::google::protobuf::Arena* arena) const {
  Game_LeaveTable* n = new Game_LeaveTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Game_LeaveTable::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Game.LeaveTable)
  tableid_ = 0u;
}

bool Game_LeaveTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Game.LeaveTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tableID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Game.LeaveTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Game.LeaveTable)
  return false;
#undef DO_
}

void Game_LeaveTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Game.LeaveTable)
  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Game.LeaveTable)
}

::google::protobuf::uint8* Game_LeaveTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Game.LeaveTable)
  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Game.LeaveTable)
  return target;
}

size_t Game_LeaveTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Game.LeaveTable)
  size_t total_size = 0;

  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tableid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game_LeaveTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Game.LeaveTable)
  GOOGLE_DCHECK_NE(&from, this);
  const Game_LeaveTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Game_LeaveTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Game.LeaveTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Game.LeaveTable)
    MergeFrom(*source);
  }
}

void Game_LeaveTable::MergeFrom(const Game_LeaveTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Game.LeaveTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.tableid() != 0) {
    set_tableid(from.tableid());
  }
}

void Game_LeaveTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Game.LeaveTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game_LeaveTable::CopyFrom(const Game_LeaveTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Game.LeaveTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_LeaveTable::IsInitialized() const {
  return true;
}

void Game_LeaveTable::Swap(Game_LeaveTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Game_LeaveTable::InternalSwap(Game_LeaveTable* other) {
  std::swap(tableid_, other->tableid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Game_LeaveTable::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Game_LeaveTable

// uint32 tableID = 1;
void Game_LeaveTable::clear_tableid() {
  tableid_ = 0u;
}
::google::protobuf::uint32 Game_LeaveTable::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Game.LeaveTable.tableID)
  return tableid_;
}
void Game_LeaveTable::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.LeaveTable.tableID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Game_Bet::kTableIDFieldNumber;
const int Game_Bet::kSubtypeFieldNumber;
const int Game_Bet::kDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Game_Bet::Game_Bet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Game.Bet)
}
Game_Bet::Game_Bet(const Game_Bet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& Game_Bet_DetailEntry_descriptor = protobuf_client_2eproto::file_level_metadata[17].descriptor;
  detail_.SetAssignDescriptorCallback(
      protobuf_client_2eproto::protobuf_AssignDescriptorsOnce);
  detail_.SetEntryDescriptor(
      &Game_Bet_DetailEntry_descriptor);
  detail_.MergeFrom(from.detail_);
  ::memcpy(&tableid_, &from.tableid_,
    reinterpret_cast<char*>(&subtype_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(subtype_));
  // @@protoc_insertion_point(copy_constructor:proto.Game.Bet)
}

void Game_Bet::SharedCtor() {
  const ::google::protobuf::Descriptor*& Game_Bet_DetailEntry_descriptor = protobuf_client_2eproto::file_level_metadata[17].descriptor;
  detail_.SetAssignDescriptorCallback(
      protobuf_client_2eproto::protobuf_AssignDescriptorsOnce);
  detail_.SetEntryDescriptor(
      &Game_Bet_DetailEntry_descriptor);
  ::memset(&tableid_, 0, reinterpret_cast<char*>(&subtype_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(subtype_));
  _cached_size_ = 0;
}

Game_Bet::~Game_Bet() {
  // @@protoc_insertion_point(destructor:proto.Game.Bet)
  SharedDtor();
}

void Game_Bet::SharedDtor() {
}

void Game_Bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game_Bet::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[18].descriptor;
}

const Game_Bet& Game_Bet::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Game_Bet* Game_Bet::New(::google::protobuf::Arena* arena) const {
  Game_Bet* n = new Game_Bet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Game_Bet::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Game.Bet)
  detail_.Clear();
  ::memset(&tableid_, 0, reinterpret_cast<char*>(&subtype_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(subtype_));
}

bool Game_Bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Game.Bet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tableID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Game.Subtype subtype = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subtype(static_cast< ::proto::Game_Subtype >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, double> detail = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          Game_Bet_DetailEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, double > > parser(&detail_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Game.Bet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Game.Bet)
  return false;
#undef DO_
}

void Game_Bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Game.Bet)
  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // .proto.Game.Subtype subtype = 2;
  if (this->subtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->subtype(), output);
  }

  // map<int32, double> detail = 3;
  if (!this->detail().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->detail().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->detail().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->detail().begin();
          it != this->detail().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Game_Bet_DetailEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(detail_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<Game_Bet_DetailEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->detail().begin();
          it != this->detail().end(); ++it) {
        entry.reset(detail_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:proto.Game.Bet)
}

::google::protobuf::uint8* Game_Bet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Game.Bet)
  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // .proto.Game.Subtype subtype = 2;
  if (this->subtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->subtype(), target);
  }

  // map<int32, double> detail = 3;
  if (!this->detail().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->detail().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->detail().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->detail().begin();
          it != this->detail().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Game_Bet_DetailEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(detail_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<Game_Bet_DetailEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->detail().begin();
          it != this->detail().end(); ++it) {
        entry.reset(detail_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Game.Bet)
  return target;
}

size_t Game_Bet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Game.Bet)
  size_t total_size = 0;

  // map<int32, double> detail = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->detail_size());
  {
    ::google::protobuf::scoped_ptr<Game_Bet_DetailEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
        it = this->detail().begin();
        it != this->detail().end(); ++it) {
      entry.reset(detail_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tableid());
  }

  // .proto.Game.Subtype subtype = 2;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game_Bet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Game.Bet)
  GOOGLE_DCHECK_NE(&from, this);
  const Game_Bet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Game_Bet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Game.Bet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Game.Bet)
    MergeFrom(*source);
  }
}

void Game_Bet::MergeFrom(const Game_Bet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Game.Bet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_.MergeFrom(from.detail_);
  if (from.tableid() != 0) {
    set_tableid(from.tableid());
  }
  if (from.subtype() != 0) {
    set_subtype(from.subtype());
  }
}

void Game_Bet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Game.Bet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game_Bet::CopyFrom(const Game_Bet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Game.Bet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_Bet::IsInitialized() const {
  return true;
}

void Game_Bet::Swap(Game_Bet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Game_Bet::InternalSwap(Game_Bet* other) {
  detail_.Swap(&other->detail_);
  std::swap(tableid_, other->tableid_);
  std::swap(subtype_, other->subtype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Game_Bet::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Game_Bet

// uint32 tableID = 1;
void Game_Bet::clear_tableid() {
  tableid_ = 0u;
}
::google::protobuf::uint32 Game_Bet::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Game.Bet.tableID)
  return tableid_;
}
void Game_Bet::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.Bet.tableID)
}

// .proto.Game.Subtype subtype = 2;
void Game_Bet::clear_subtype() {
  subtype_ = 0;
}
::proto::Game_Subtype Game_Bet::subtype() const {
  // @@protoc_insertion_point(field_get:proto.Game.Bet.subtype)
  return static_cast< ::proto::Game_Subtype >(subtype_);
}
void Game_Bet::set_subtype(::proto::Game_Subtype value) {
  
  subtype_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.Bet.subtype)
}

// map<int32, double> detail = 3;
int Game_Bet::detail_size() const {
  return detail_.size();
}
void Game_Bet::clear_detail() {
  detail_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, double >&
Game_Bet::detail() const {
  // @@protoc_insertion_point(field_map:proto.Game.Bet.detail)
  return detail_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, double >*
Game_Bet::mutable_detail() {
  // @@protoc_insertion_point(field_mutable_map:proto.Game.Bet.detail)
  return detail_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Game_Tip::kTableIDFieldNumber;
const int Game_Tip::kTypeFieldNumber;
const int Game_Tip::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Game_Tip::Game_Tip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Game.Tip)
}
Game_Tip::Game_Tip(const Game_Tip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tableid_, &from.tableid_,
    reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:proto.Game.Tip)
}

void Game_Tip::SharedCtor() {
  ::memset(&tableid_, 0, reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(amount_));
  _cached_size_ = 0;
}

Game_Tip::~Game_Tip() {
  // @@protoc_insertion_point(destructor:proto.Game.Tip)
  SharedDtor();
}

void Game_Tip::SharedDtor() {
}

void Game_Tip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game_Tip::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[19].descriptor;
}

const Game_Tip& Game_Tip::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Game_Tip* Game_Tip::New(::google::protobuf::Arena* arena) const {
  Game_Tip* n = new Game_Tip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Game_Tip::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Game.Tip)
  ::memset(&tableid_, 0, reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(amount_));
}

bool Game_Tip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Game.Tip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tableID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double amount = 3;
      case 3: {
        if (tag == 25u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Game.Tip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Game.Tip)
  return false;
#undef DO_
}

void Game_Tip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Game.Tip)
  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // double amount = 3;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->amount(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Game.Tip)
}

::google::protobuf::uint8* Game_Tip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Game.Tip)
  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // double amount = 3;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->amount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Game.Tip)
  return target;
}

size_t Game_Tip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Game.Tip)
  size_t total_size = 0;

  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tableid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // double amount = 3;
  if (this->amount() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game_Tip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Game.Tip)
  GOOGLE_DCHECK_NE(&from, this);
  const Game_Tip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Game_Tip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Game.Tip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Game.Tip)
    MergeFrom(*source);
  }
}

void Game_Tip::MergeFrom(const Game_Tip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Game.Tip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.tableid() != 0) {
    set_tableid(from.tableid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void Game_Tip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Game.Tip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game_Tip::CopyFrom(const Game_Tip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Game.Tip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_Tip::IsInitialized() const {
  return true;
}

void Game_Tip::Swap(Game_Tip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Game_Tip::InternalSwap(Game_Tip* other) {
  std::swap(tableid_, other->tableid_);
  std::swap(type_, other->type_);
  std::swap(amount_, other->amount_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Game_Tip::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Game_Tip

// uint32 tableID = 1;
void Game_Tip::clear_tableid() {
  tableid_ = 0u;
}
::google::protobuf::uint32 Game_Tip::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Game.Tip.tableID)
  return tableid_;
}
void Game_Tip::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.Tip.tableID)
}

// int32 type = 2;
void Game_Tip::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 Game_Tip::type() const {
  // @@protoc_insertion_point(field_get:proto.Game.Tip.type)
  return type_;
}
void Game_Tip::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.Tip.type)
}

// double amount = 3;
void Game_Tip::clear_amount() {
  amount_ = 0;
}
double Game_Tip::amount() const {
  // @@protoc_insertion_point(field_get:proto.Game.Tip.amount)
  return amount_;
}
void Game_Tip::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.Tip.amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Game_UserSnapshot::kNameFieldNumber;
const int Game_UserSnapshot::kBalanceFieldNumber;
const int Game_UserSnapshot::kHomeFieldNumber;
const int Game_UserSnapshot::kVtableFieldNumber;
const int Game_UserSnapshot::kVseatFieldNumber;
const int Game_UserSnapshot::kWinloseFieldNumber;
const int Game_UserSnapshot::kTotalbetFieldNumber;
const int Game_UserSnapshot::kBetinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Game_UserSnapshot::Game_UserSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Game.UserSnapshot)
}
Game_UserSnapshot::Game_UserSnapshot(const Game_UserSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& Game_UserSnapshot_BetinfoEntry_descriptor = protobuf_client_2eproto::file_level_metadata[20].descriptor;
  betinfo_.SetAssignDescriptorCallback(
      protobuf_client_2eproto::protobuf_AssignDescriptorsOnce);
  betinfo_.SetEntryDescriptor(
      &Game_UserSnapshot_BetinfoEntry_descriptor);
  betinfo_.MergeFrom(from.betinfo_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&balance_, &from.balance_,
    reinterpret_cast<char*>(&vseat_) -
    reinterpret_cast<char*>(&balance_) + sizeof(vseat_));
  // @@protoc_insertion_point(copy_constructor:proto.Game.UserSnapshot)
}

void Game_UserSnapshot::SharedCtor() {
  const ::google::protobuf::Descriptor*& Game_UserSnapshot_BetinfoEntry_descriptor = protobuf_client_2eproto::file_level_metadata[20].descriptor;
  betinfo_.SetAssignDescriptorCallback(
      protobuf_client_2eproto::protobuf_AssignDescriptorsOnce);
  betinfo_.SetEntryDescriptor(
      &Game_UserSnapshot_BetinfoEntry_descriptor);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&balance_, 0, reinterpret_cast<char*>(&vseat_) -
    reinterpret_cast<char*>(&balance_) + sizeof(vseat_));
  _cached_size_ = 0;
}

Game_UserSnapshot::~Game_UserSnapshot() {
  // @@protoc_insertion_point(destructor:proto.Game.UserSnapshot)
  SharedDtor();
}

void Game_UserSnapshot::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Game_UserSnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game_UserSnapshot::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[21].descriptor;
}

const Game_UserSnapshot& Game_UserSnapshot::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Game_UserSnapshot* Game_UserSnapshot::New(::google::protobuf::Arena* arena) const {
  Game_UserSnapshot* n = new Game_UserSnapshot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Game_UserSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Game.UserSnapshot)
  betinfo_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&balance_, 0, reinterpret_cast<char*>(&vseat_) -
    reinterpret_cast<char*>(&balance_) + sizeof(vseat_));
}

bool Game_UserSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Game.UserSnapshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Game.UserSnapshot.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double balance = 2;
      case 2: {
        if (tag == 17u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 home = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &home_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vtable = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vtable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vseat = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vseat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double winlose = 6;
      case 6: {
        if (tag == 49u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &winlose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double totalbet = 7;
      case 7: {
        if (tag == 57u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalbet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, double> betinfo = 8;
      case 8: {
        if (tag == 66u) {
          DO_(input->IncrementRecursionDepth());
          Game_UserSnapshot_BetinfoEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, double > > parser(&betinfo_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Game.UserSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Game.UserSnapshot)
  return false;
#undef DO_
}

void Game_UserSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Game.UserSnapshot)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.UserSnapshot.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // double balance = 2;
  if (this->balance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->balance(), output);
  }

  // uint32 home = 3;
  if (this->home() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->home(), output);
  }

  // uint32 vtable = 4;
  if (this->vtable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vtable(), output);
  }

  // uint32 vseat = 5;
  if (this->vseat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vseat(), output);
  }

  // double winlose = 6;
  if (this->winlose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->winlose(), output);
  }

  // double totalbet = 7;
  if (this->totalbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->totalbet(), output);
  }

  // map<int32, double> betinfo = 8;
  if (!this->betinfo().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->betinfo().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->betinfo().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->betinfo().begin();
          it != this->betinfo().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Game_UserSnapshot_BetinfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(betinfo_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<Game_UserSnapshot_BetinfoEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->betinfo().begin();
          it != this->betinfo().end(); ++it) {
        entry.reset(betinfo_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:proto.Game.UserSnapshot)
}

::google::protobuf::uint8* Game_UserSnapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Game.UserSnapshot)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.UserSnapshot.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // double balance = 2;
  if (this->balance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->balance(), target);
  }

  // uint32 home = 3;
  if (this->home() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->home(), target);
  }

  // uint32 vtable = 4;
  if (this->vtable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vtable(), target);
  }

  // uint32 vseat = 5;
  if (this->vseat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vseat(), target);
  }

  // double winlose = 6;
  if (this->winlose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->winlose(), target);
  }

  // double totalbet = 7;
  if (this->totalbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->totalbet(), target);
  }

  // map<int32, double> betinfo = 8;
  if (!this->betinfo().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->betinfo().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->betinfo().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->betinfo().begin();
          it != this->betinfo().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Game_UserSnapshot_BetinfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(betinfo_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<Game_UserSnapshot_BetinfoEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->betinfo().begin();
          it != this->betinfo().end(); ++it) {
        entry.reset(betinfo_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Game.UserSnapshot)
  return target;
}

size_t Game_UserSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Game.UserSnapshot)
  size_t total_size = 0;

  // map<int32, double> betinfo = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->betinfo_size());
  {
    ::google::protobuf::scoped_ptr<Game_UserSnapshot_BetinfoEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
        it = this->betinfo().begin();
        it != this->betinfo().end(); ++it) {
      entry.reset(betinfo_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // double balance = 2;
  if (this->balance() != 0) {
    total_size += 1 + 8;
  }

  // uint32 home = 3;
  if (this->home() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->home());
  }

  // uint32 vtable = 4;
  if (this->vtable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vtable());
  }

  // double winlose = 6;
  if (this->winlose() != 0) {
    total_size += 1 + 8;
  }

  // double totalbet = 7;
  if (this->totalbet() != 0) {
    total_size += 1 + 8;
  }

  // uint32 vseat = 5;
  if (this->vseat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vseat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game_UserSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Game.UserSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const Game_UserSnapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Game_UserSnapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Game.UserSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Game.UserSnapshot)
    MergeFrom(*source);
  }
}

void Game_UserSnapshot::MergeFrom(const Game_UserSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Game.UserSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  betinfo_.MergeFrom(from.betinfo_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.balance() != 0) {
    set_balance(from.balance());
  }
  if (from.home() != 0) {
    set_home(from.home());
  }
  if (from.vtable() != 0) {
    set_vtable(from.vtable());
  }
  if (from.winlose() != 0) {
    set_winlose(from.winlose());
  }
  if (from.totalbet() != 0) {
    set_totalbet(from.totalbet());
  }
  if (from.vseat() != 0) {
    set_vseat(from.vseat());
  }
}

void Game_UserSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Game.UserSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game_UserSnapshot::CopyFrom(const Game_UserSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Game.UserSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_UserSnapshot::IsInitialized() const {
  return true;
}

void Game_UserSnapshot::Swap(Game_UserSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Game_UserSnapshot::InternalSwap(Game_UserSnapshot* other) {
  betinfo_.Swap(&other->betinfo_);
  name_.Swap(&other->name_);
  std::swap(balance_, other->balance_);
  std::swap(home_, other->home_);
  std::swap(vtable_, other->vtable_);
  std::swap(winlose_, other->winlose_);
  std::swap(totalbet_, other->totalbet_);
  std::swap(vseat_, other->vseat_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Game_UserSnapshot::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Game_UserSnapshot

// string name = 1;
void Game_UserSnapshot::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Game_UserSnapshot::name() const {
  // @@protoc_insertion_point(field_get:proto.Game.UserSnapshot.name)
  return name_.GetNoArena();
}
void Game_UserSnapshot::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.UserSnapshot.name)
}
#if LANG_CXX11
void Game_UserSnapshot::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.UserSnapshot.name)
}
#endif
void Game_UserSnapshot::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.UserSnapshot.name)
}
void Game_UserSnapshot::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.UserSnapshot.name)
}
::std::string* Game_UserSnapshot::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.UserSnapshot.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Game_UserSnapshot::release_name() {
  // @@protoc_insertion_point(field_release:proto.Game.UserSnapshot.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Game_UserSnapshot::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.UserSnapshot.name)
}

// double balance = 2;
void Game_UserSnapshot::clear_balance() {
  balance_ = 0;
}
double Game_UserSnapshot::balance() const {
  // @@protoc_insertion_point(field_get:proto.Game.UserSnapshot.balance)
  return balance_;
}
void Game_UserSnapshot::set_balance(double value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.UserSnapshot.balance)
}

// uint32 home = 3;
void Game_UserSnapshot::clear_home() {
  home_ = 0u;
}
::google::protobuf::uint32 Game_UserSnapshot::home() const {
  // @@protoc_insertion_point(field_get:proto.Game.UserSnapshot.home)
  return home_;
}
void Game_UserSnapshot::set_home(::google::protobuf::uint32 value) {
  
  home_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.UserSnapshot.home)
}

// uint32 vtable = 4;
void Game_UserSnapshot::clear_vtable() {
  vtable_ = 0u;
}
::google::protobuf::uint32 Game_UserSnapshot::vtable() const {
  // @@protoc_insertion_point(field_get:proto.Game.UserSnapshot.vtable)
  return vtable_;
}
void Game_UserSnapshot::set_vtable(::google::protobuf::uint32 value) {
  
  vtable_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.UserSnapshot.vtable)
}

// uint32 vseat = 5;
void Game_UserSnapshot::clear_vseat() {
  vseat_ = 0u;
}
::google::protobuf::uint32 Game_UserSnapshot::vseat() const {
  // @@protoc_insertion_point(field_get:proto.Game.UserSnapshot.vseat)
  return vseat_;
}
void Game_UserSnapshot::set_vseat(::google::protobuf::uint32 value) {
  
  vseat_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.UserSnapshot.vseat)
}

// double winlose = 6;
void Game_UserSnapshot::clear_winlose() {
  winlose_ = 0;
}
double Game_UserSnapshot::winlose() const {
  // @@protoc_insertion_point(field_get:proto.Game.UserSnapshot.winlose)
  return winlose_;
}
void Game_UserSnapshot::set_winlose(double value) {
  
  winlose_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.UserSnapshot.winlose)
}

// double totalbet = 7;
void Game_UserSnapshot::clear_totalbet() {
  totalbet_ = 0;
}
double Game_UserSnapshot::totalbet() const {
  // @@protoc_insertion_point(field_get:proto.Game.UserSnapshot.totalbet)
  return totalbet_;
}
void Game_UserSnapshot::set_totalbet(double value) {
  
  totalbet_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.UserSnapshot.totalbet)
}

// map<int32, double> betinfo = 8;
int Game_UserSnapshot::betinfo_size() const {
  return betinfo_.size();
}
void Game_UserSnapshot::clear_betinfo() {
  betinfo_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, double >&
Game_UserSnapshot::betinfo() const {
  // @@protoc_insertion_point(field_map:proto.Game.UserSnapshot.betinfo)
  return betinfo_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, double >*
Game_UserSnapshot::mutable_betinfo() {
  // @@protoc_insertion_point(field_mutable_map:proto.Game.UserSnapshot.betinfo)
  return betinfo_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Game_TableStatus::kTableIDFieldNumber;
const int Game_TableStatus::kStageFieldNumber;
const int Game_TableStatus::kInningFieldNumber;
const int Game_TableStatus::kStatusFieldNumber;
const int Game_TableStatus::kTimeFieldNumber;
const int Game_TableStatus::kPokerFieldNumber;
const int Game_TableStatus::kResultFieldNumber;
const int Game_TableStatus::kBetinfoFieldNumber;
const int Game_TableStatus::kVbetinfoFieldNumber;
const int Game_TableStatus::kWinloseFieldNumber;
const int Game_TableStatus::kPokerIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Game_TableStatus::Game_TableStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Game.TableStatus)
}
Game_TableStatus::Game_TableStatus(const Game_TableStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& Game_TableStatus_BetinfoEntry_descriptor = protobuf_client_2eproto::file_level_metadata[22].descriptor;
  const ::google::protobuf::Descriptor*& Game_TableStatus_VbetinfoEntry_descriptor = protobuf_client_2eproto::file_level_metadata[23].descriptor;
  betinfo_.SetAssignDescriptorCallback(
      protobuf_client_2eproto::protobuf_AssignDescriptorsOnce);
  betinfo_.SetEntryDescriptor(
      &Game_TableStatus_BetinfoEntry_descriptor);
  betinfo_.MergeFrom(from.betinfo_);
  vbetinfo_.SetAssignDescriptorCallback(
      protobuf_client_2eproto::protobuf_AssignDescriptorsOnce);
  vbetinfo_.SetEntryDescriptor(
      &Game_TableStatus_VbetinfoEntry_descriptor);
  vbetinfo_.MergeFrom(from.vbetinfo_);
  poker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.poker().size() > 0) {
    poker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.poker_);
  }
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.result().size() > 0) {
    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  ::memcpy(&tableid_, &from.tableid_,
    reinterpret_cast<char*>(&winlose_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(winlose_));
  // @@protoc_insertion_point(copy_constructor:proto.Game.TableStatus)
}

void Game_TableStatus::SharedCtor() {
  const ::google::protobuf::Descriptor*& Game_TableStatus_BetinfoEntry_descriptor = protobuf_client_2eproto::file_level_metadata[22].descriptor;
  const ::google::protobuf::Descriptor*& Game_TableStatus_VbetinfoEntry_descriptor = protobuf_client_2eproto::file_level_metadata[23].descriptor;
  betinfo_.SetAssignDescriptorCallback(
      protobuf_client_2eproto::protobuf_AssignDescriptorsOnce);
  betinfo_.SetEntryDescriptor(
      &Game_TableStatus_BetinfoEntry_descriptor);
  vbetinfo_.SetAssignDescriptorCallback(
      protobuf_client_2eproto::protobuf_AssignDescriptorsOnce);
  vbetinfo_.SetEntryDescriptor(
      &Game_TableStatus_VbetinfoEntry_descriptor);
  poker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tableid_, 0, reinterpret_cast<char*>(&winlose_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(winlose_));
  _cached_size_ = 0;
}

Game_TableStatus::~Game_TableStatus() {
  // @@protoc_insertion_point(destructor:proto.Game.TableStatus)
  SharedDtor();
}

void Game_TableStatus::SharedDtor() {
  poker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Game_TableStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game_TableStatus::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[24].descriptor;
}

const Game_TableStatus& Game_TableStatus::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Game_TableStatus* Game_TableStatus::New(::google::protobuf::Arena* arena) const {
  Game_TableStatus* n = new Game_TableStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Game_TableStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Game.TableStatus)
  betinfo_.Clear();
  vbetinfo_.Clear();
  poker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tableid_, 0, reinterpret_cast<char*>(&winlose_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(winlose_));
}

bool Game_TableStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Game.TableStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tableID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stage = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 inning = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 status = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string poker = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poker()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->poker().data(), this->poker().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Game.TableStatus.poker"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Game.TableStatus.result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, double> betinfo = 8;
      case 8: {
        if (tag == 66u) {
          DO_(input->IncrementRecursionDepth());
          Game_TableStatus_BetinfoEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, double > > parser(&betinfo_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, double> vbetinfo = 9;
      case 9: {
        if (tag == 74u) {
          DO_(input->IncrementRecursionDepth());
          Game_TableStatus_VbetinfoEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, double > > parser(&vbetinfo_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // double winlose = 10;
      case 10: {
        if (tag == 81u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &winlose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pokerIndex = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pokerindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Game.TableStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Game.TableStatus)
  return false;
#undef DO_
}

void Game_TableStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Game.TableStatus)
  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // int32 stage = 2;
  if (this->stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage(), output);
  }

  // int32 inning = 3;
  if (this->inning() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inning(), output);
  }

  // uint32 status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // int32 time = 5;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // string poker = 6;
  if (this->poker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->poker().data(), this->poker().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableStatus.poker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->poker(), output);
  }

  // string result = 7;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableStatus.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->result(), output);
  }

  // map<int32, double> betinfo = 8;
  if (!this->betinfo().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->betinfo().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->betinfo().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->betinfo().begin();
          it != this->betinfo().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Game_TableStatus_BetinfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(betinfo_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<Game_TableStatus_BetinfoEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->betinfo().begin();
          it != this->betinfo().end(); ++it) {
        entry.reset(betinfo_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    }
  }

  // map<int32, double> vbetinfo = 9;
  if (!this->vbetinfo().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->vbetinfo().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->vbetinfo().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->vbetinfo().begin();
          it != this->vbetinfo().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Game_TableStatus_VbetinfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(vbetinfo_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<Game_TableStatus_VbetinfoEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->vbetinfo().begin();
          it != this->vbetinfo().end(); ++it) {
        entry.reset(vbetinfo_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
      }
    }
  }

  // double winlose = 10;
  if (this->winlose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->winlose(), output);
  }

  // int32 pokerIndex = 11;
  if (this->pokerindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pokerindex(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Game.TableStatus)
}

::google::protobuf::uint8* Game_TableStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Game.TableStatus)
  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // int32 stage = 2;
  if (this->stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage(), target);
  }

  // int32 inning = 3;
  if (this->inning() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inning(), target);
  }

  // uint32 status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // int32 time = 5;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // string poker = 6;
  if (this->poker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->poker().data(), this->poker().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableStatus.poker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->poker(), target);
  }

  // string result = 7;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableStatus.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->result(), target);
  }

  // map<int32, double> betinfo = 8;
  if (!this->betinfo().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->betinfo().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->betinfo().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->betinfo().begin();
          it != this->betinfo().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Game_TableStatus_BetinfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(betinfo_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<Game_TableStatus_BetinfoEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->betinfo().begin();
          it != this->betinfo().end(); ++it) {
        entry.reset(betinfo_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, double> vbetinfo = 9;
  if (!this->vbetinfo().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->vbetinfo().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->vbetinfo().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->vbetinfo().begin();
          it != this->vbetinfo().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Game_TableStatus_VbetinfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(vbetinfo_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<Game_TableStatus_VbetinfoEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->vbetinfo().begin();
          it != this->vbetinfo().end(); ++it) {
        entry.reset(vbetinfo_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
      }
    }
  }

  // double winlose = 10;
  if (this->winlose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->winlose(), target);
  }

  // int32 pokerIndex = 11;
  if (this->pokerindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pokerindex(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Game.TableStatus)
  return target;
}

size_t Game_TableStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Game.TableStatus)
  size_t total_size = 0;

  // map<int32, double> betinfo = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->betinfo_size());
  {
    ::google::protobuf::scoped_ptr<Game_TableStatus_BetinfoEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
        it = this->betinfo().begin();
        it != this->betinfo().end(); ++it) {
      entry.reset(betinfo_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, double> vbetinfo = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->vbetinfo_size());
  {
    ::google::protobuf::scoped_ptr<Game_TableStatus_VbetinfoEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
        it = this->vbetinfo().begin();
        it != this->vbetinfo().end(); ++it) {
      entry.reset(vbetinfo_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string poker = 6;
  if (this->poker().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->poker());
  }

  // string result = 7;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result());
  }

  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tableid());
  }

  // int32 stage = 2;
  if (this->stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stage());
  }

  // int32 inning = 3;
  if (this->inning() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inning());
  }

  // uint32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // int32 time = 5;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // int32 pokerIndex = 11;
  if (this->pokerindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pokerindex());
  }

  // double winlose = 10;
  if (this->winlose() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game_TableStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Game.TableStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const Game_TableStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Game_TableStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Game.TableStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Game.TableStatus)
    MergeFrom(*source);
  }
}

void Game_TableStatus::MergeFrom(const Game_TableStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Game.TableStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  betinfo_.MergeFrom(from.betinfo_);
  vbetinfo_.MergeFrom(from.vbetinfo_);
  if (from.poker().size() > 0) {

    poker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.poker_);
  }
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.tableid() != 0) {
    set_tableid(from.tableid());
  }
  if (from.stage() != 0) {
    set_stage(from.stage());
  }
  if (from.inning() != 0) {
    set_inning(from.inning());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.pokerindex() != 0) {
    set_pokerindex(from.pokerindex());
  }
  if (from.winlose() != 0) {
    set_winlose(from.winlose());
  }
}

void Game_TableStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Game.TableStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game_TableStatus::CopyFrom(const Game_TableStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Game.TableStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_TableStatus::IsInitialized() const {
  return true;
}

void Game_TableStatus::Swap(Game_TableStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Game_TableStatus::InternalSwap(Game_TableStatus* other) {
  betinfo_.Swap(&other->betinfo_);
  vbetinfo_.Swap(&other->vbetinfo_);
  poker_.Swap(&other->poker_);
  result_.Swap(&other->result_);
  std::swap(tableid_, other->tableid_);
  std::swap(stage_, other->stage_);
  std::swap(inning_, other->inning_);
  std::swap(status_, other->status_);
  std::swap(time_, other->time_);
  std::swap(pokerindex_, other->pokerindex_);
  std::swap(winlose_, other->winlose_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Game_TableStatus::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Game_TableStatus

// uint32 tableID = 1;
void Game_TableStatus::clear_tableid() {
  tableid_ = 0u;
}
::google::protobuf::uint32 Game_TableStatus::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.tableID)
  return tableid_;
}
void Game_TableStatus::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.tableID)
}

// int32 stage = 2;
void Game_TableStatus::clear_stage() {
  stage_ = 0;
}
::google::protobuf::int32 Game_TableStatus::stage() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.stage)
  return stage_;
}
void Game_TableStatus::set_stage(::google::protobuf::int32 value) {
  
  stage_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.stage)
}

// int32 inning = 3;
void Game_TableStatus::clear_inning() {
  inning_ = 0;
}
::google::protobuf::int32 Game_TableStatus::inning() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.inning)
  return inning_;
}
void Game_TableStatus::set_inning(::google::protobuf::int32 value) {
  
  inning_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.inning)
}

// uint32 status = 4;
void Game_TableStatus::clear_status() {
  status_ = 0u;
}
::google::protobuf::uint32 Game_TableStatus::status() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.status)
  return status_;
}
void Game_TableStatus::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.status)
}

// int32 time = 5;
void Game_TableStatus::clear_time() {
  time_ = 0;
}
::google::protobuf::int32 Game_TableStatus::time() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.time)
  return time_;
}
void Game_TableStatus::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.time)
}

// string poker = 6;
void Game_TableStatus::clear_poker() {
  poker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Game_TableStatus::poker() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.poker)
  return poker_.GetNoArena();
}
void Game_TableStatus::set_poker(const ::std::string& value) {
  
  poker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.poker)
}
#if LANG_CXX11
void Game_TableStatus::set_poker(::std::string&& value) {
  
  poker_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableStatus.poker)
}
#endif
void Game_TableStatus::set_poker(const char* value) {
  
  poker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableStatus.poker)
}
void Game_TableStatus::set_poker(const char* value, size_t size) {
  
  poker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableStatus.poker)
}
::std::string* Game_TableStatus::mutable_poker() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableStatus.poker)
  return poker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Game_TableStatus::release_poker() {
  // @@protoc_insertion_point(field_release:proto.Game.TableStatus.poker)
  
  return poker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Game_TableStatus::set_allocated_poker(::std::string* poker) {
  if (poker != NULL) {
    
  } else {
    
  }
  poker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), poker);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableStatus.poker)
}

// string result = 7;
void Game_TableStatus::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Game_TableStatus::result() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.result)
  return result_.GetNoArena();
}
void Game_TableStatus::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.result)
}
#if LANG_CXX11
void Game_TableStatus::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableStatus.result)
}
#endif
void Game_TableStatus::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableStatus.result)
}
void Game_TableStatus::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableStatus.result)
}
::std::string* Game_TableStatus::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableStatus.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Game_TableStatus::release_result() {
  // @@protoc_insertion_point(field_release:proto.Game.TableStatus.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Game_TableStatus::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableStatus.result)
}

// map<int32, double> betinfo = 8;
int Game_TableStatus::betinfo_size() const {
  return betinfo_.size();
}
void Game_TableStatus::clear_betinfo() {
  betinfo_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, double >&
Game_TableStatus::betinfo() const {
  // @@protoc_insertion_point(field_map:proto.Game.TableStatus.betinfo)
  return betinfo_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, double >*
Game_TableStatus::mutable_betinfo() {
  // @@protoc_insertion_point(field_mutable_map:proto.Game.TableStatus.betinfo)
  return betinfo_.MutableMap();
}

// map<int32, double> vbetinfo = 9;
int Game_TableStatus::vbetinfo_size() const {
  return vbetinfo_.size();
}
void Game_TableStatus::clear_vbetinfo() {
  vbetinfo_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, double >&
Game_TableStatus::vbetinfo() const {
  // @@protoc_insertion_point(field_map:proto.Game.TableStatus.vbetinfo)
  return vbetinfo_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, double >*
Game_TableStatus::mutable_vbetinfo() {
  // @@protoc_insertion_point(field_mutable_map:proto.Game.TableStatus.vbetinfo)
  return vbetinfo_.MutableMap();
}

// double winlose = 10;
void Game_TableStatus::clear_winlose() {
  winlose_ = 0;
}
double Game_TableStatus::winlose() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.winlose)
  return winlose_;
}
void Game_TableStatus::set_winlose(double value) {
  
  winlose_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.winlose)
}

// int32 pokerIndex = 11;
void Game_TableStatus::clear_pokerindex() {
  pokerindex_ = 0;
}
::google::protobuf::int32 Game_TableStatus::pokerindex() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.pokerIndex)
  return pokerindex_;
}
void Game_TableStatus::set_pokerindex(::google::protobuf::int32 value) {
  
  pokerindex_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.pokerIndex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Game_TableConfig::kTableIDFieldNumber;
const int Game_TableConfig::kTimeFieldNumber;
const int Game_TableConfig::kNameFieldNumber;
const int Game_TableConfig::kDealerFieldNumber;
const int Game_TableConfig::kDateFieldNumber;
const int Game_TableConfig::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Game_TableConfig::Game_TableConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Game.TableConfig)
}
Game_TableConfig::Game_TableConfig(const Game_TableConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  dealer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dealer().size() > 0) {
    dealer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dealer_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.date().size() > 0) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.limit().size() > 0) {
    limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.limit_);
  }
  ::memcpy(&tableid_, &from.tableid_,
    reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:proto.Game.TableConfig)
}

void Game_TableConfig::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dealer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tableid_, 0, reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(time_));
  _cached_size_ = 0;
}

Game_TableConfig::~Game_TableConfig() {
  // @@protoc_insertion_point(destructor:proto.Game.TableConfig)
  SharedDtor();
}

void Game_TableConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dealer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Game_TableConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game_TableConfig::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[25].descriptor;
}

const Game_TableConfig& Game_TableConfig::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Game_TableConfig* Game_TableConfig::New(::google::protobuf::Arena* arena) const {
  Game_TableConfig* n = new Game_TableConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Game_TableConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Game.TableConfig)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dealer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tableid_, 0, reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(time_));
}

bool Game_TableConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Game.TableConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tableID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Game.TableConfig.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dealer = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dealer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dealer().data(), this->dealer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Game.TableConfig.dealer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string date = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Game.TableConfig.date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string limit = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_limit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->limit().data(), this->limit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Game.TableConfig.limit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Game.TableConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Game.TableConfig)
  return false;
#undef DO_
}

void Game_TableConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Game.TableConfig)
  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string dealer = 4;
  if (this->dealer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dealer().data(), this->dealer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableConfig.dealer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dealer(), output);
  }

  // string date = 5;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableConfig.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->date(), output);
  }

  // string limit = 6;
  if (this->limit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->limit().data(), this->limit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableConfig.limit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Game.TableConfig)
}

::google::protobuf::uint8* Game_TableConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Game.TableConfig)
  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string dealer = 4;
  if (this->dealer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dealer().data(), this->dealer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableConfig.dealer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dealer(), target);
  }

  // string date = 5;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableConfig.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->date(), target);
  }

  // string limit = 6;
  if (this->limit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->limit().data(), this->limit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableConfig.limit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Game.TableConfig)
  return target;
}

size_t Game_TableConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Game.TableConfig)
  size_t total_size = 0;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string dealer = 4;
  if (this->dealer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dealer());
  }

  // string date = 5;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  // string limit = 6;
  if (this->limit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->limit());
  }

  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tableid());
  }

  // int32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game_TableConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Game.TableConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const Game_TableConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Game_TableConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Game.TableConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Game.TableConfig)
    MergeFrom(*source);
  }
}

void Game_TableConfig::MergeFrom(const Game_TableConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Game.TableConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.dealer().size() > 0) {

    dealer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dealer_);
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  if (from.limit().size() > 0) {

    limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.limit_);
  }
  if (from.tableid() != 0) {
    set_tableid(from.tableid());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void Game_TableConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Game.TableConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game_TableConfig::CopyFrom(const Game_TableConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Game.TableConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_TableConfig::IsInitialized() const {
  return true;
}

void Game_TableConfig::Swap(Game_TableConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Game_TableConfig::InternalSwap(Game_TableConfig* other) {
  name_.Swap(&other->name_);
  dealer_.Swap(&other->dealer_);
  date_.Swap(&other->date_);
  limit_.Swap(&other->limit_);
  std::swap(tableid_, other->tableid_);
  std::swap(time_, other->time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Game_TableConfig::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Game_TableConfig

// uint32 tableID = 1;
void Game_TableConfig::clear_tableid() {
  tableid_ = 0u;
}
::google::protobuf::uint32 Game_TableConfig::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableConfig.tableID)
  return tableid_;
}
void Game_TableConfig::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableConfig.tableID)
}

// int32 time = 2;
void Game_TableConfig::clear_time() {
  time_ = 0;
}
::google::protobuf::int32 Game_TableConfig::time() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableConfig.time)
  return time_;
}
void Game_TableConfig::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableConfig.time)
}

// string name = 3;
void Game_TableConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Game_TableConfig::name() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableConfig.name)
  return name_.GetNoArena();
}
void Game_TableConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableConfig.name)
}
#if LANG_CXX11
void Game_TableConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableConfig.name)
}
#endif
void Game_TableConfig::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableConfig.name)
}
void Game_TableConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableConfig.name)
}
::std::string* Game_TableConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Game_TableConfig::release_name() {
  // @@protoc_insertion_point(field_release:proto.Game.TableConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Game_TableConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableConfig.name)
}

// string dealer = 4;
void Game_TableConfig::clear_dealer() {
  dealer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Game_TableConfig::dealer() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableConfig.dealer)
  return dealer_.GetNoArena();
}
void Game_TableConfig::set_dealer(const ::std::string& value) {
  
  dealer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableConfig.dealer)
}
#if LANG_CXX11
void Game_TableConfig::set_dealer(::std::string&& value) {
  
  dealer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableConfig.dealer)
}
#endif
void Game_TableConfig::set_dealer(const char* value) {
  
  dealer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableConfig.dealer)
}
void Game_TableConfig::set_dealer(const char* value, size_t size) {
  
  dealer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableConfig.dealer)
}
::std::string* Game_TableConfig::mutable_dealer() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableConfig.dealer)
  return dealer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Game_TableConfig::release_dealer() {
  // @@protoc_insertion_point(field_release:proto.Game.TableConfig.dealer)
  
  return dealer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Game_TableConfig::set_allocated_dealer(::std::string* dealer) {
  if (dealer != NULL) {
    
  } else {
    
  }
  dealer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dealer);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableConfig.dealer)
}

// string date = 5;
void Game_TableConfig::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Game_TableConfig::date() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableConfig.date)
  return date_.GetNoArena();
}
void Game_TableConfig::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableConfig.date)
}
#if LANG_CXX11
void Game_TableConfig::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableConfig.date)
}
#endif
void Game_TableConfig::set_date(const char* value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableConfig.date)
}
void Game_TableConfig::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableConfig.date)
}
::std::string* Game_TableConfig::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableConfig.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Game_TableConfig::release_date() {
  // @@protoc_insertion_point(field_release:proto.Game.TableConfig.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Game_TableConfig::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableConfig.date)
}

// string limit = 6;
void Game_TableConfig::clear_limit() {
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Game_TableConfig::limit() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableConfig.limit)
  return limit_.GetNoArena();
}
void Game_TableConfig::set_limit(const ::std::string& value) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableConfig.limit)
}
#if LANG_CXX11
void Game_TableConfig::set_limit(::std::string&& value) {
  
  limit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableConfig.limit)
}
#endif
void Game_TableConfig::set_limit(const char* value) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableConfig.limit)
}
void Game_TableConfig::set_limit(const char* value, size_t size) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableConfig.limit)
}
::std::string* Game_TableConfig::mutable_limit() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableConfig.limit)
  return limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Game_TableConfig::release_limit() {
  // @@protoc_insertion_point(field_release:proto.Game.TableConfig.limit)
  
  return limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Game_TableConfig::set_allocated_limit(::std::string* limit) {
  if (limit != NULL) {
    
  } else {
    
  }
  limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), limit);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableConfig.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Game_TableHistory::kTableIDFieldNumber;
const int Game_TableHistory::kWayFieldNumber;
const int Game_TableHistory::kCountsFieldNumber;
const int Game_TableHistory::kPokerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Game_TableHistory::Game_TableHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Game.TableHistory)
}
Game_TableHistory::Game_TableHistory(const Game_TableHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  way_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.way().size() > 0) {
    way_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.way_);
  }
  counts_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.counts().size() > 0) {
    counts_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.counts_);
  }
  poker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.poker().size() > 0) {
    poker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.poker_);
  }
  tableid_ = from.tableid_;
  // @@protoc_insertion_point(copy_constructor:proto.Game.TableHistory)
}

void Game_TableHistory::SharedCtor() {
  way_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  counts_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tableid_ = 0u;
  _cached_size_ = 0;
}

Game_TableHistory::~Game_TableHistory() {
  // @@protoc_insertion_point(destructor:proto.Game.TableHistory)
  SharedDtor();
}

void Game_TableHistory::SharedDtor() {
  way_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  counts_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Game_TableHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game_TableHistory::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[26].descriptor;
}

const Game_TableHistory& Game_TableHistory::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Game_TableHistory* Game_TableHistory::New(::google::protobuf::Arena* arena) const {
  Game_TableHistory* n = new Game_TableHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Game_TableHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Game.TableHistory)
  way_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  counts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tableid_ = 0u;
}

bool Game_TableHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Game.TableHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tableID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string way = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_way()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->way().data(), this->way().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Game.TableHistory.way"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string counts = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_counts()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->counts().data(), this->counts().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Game.TableHistory.counts"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string poker = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poker()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->poker().data(), this->poker().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Game.TableHistory.poker"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Game.TableHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Game.TableHistory)
  return false;
#undef DO_
}

void Game_TableHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Game.TableHistory)
  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // string way = 2;
  if (this->way().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->way().data(), this->way().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableHistory.way");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->way(), output);
  }

  // string counts = 3;
  if (this->counts().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->counts().data(), this->counts().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableHistory.counts");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->counts(), output);
  }

  // string poker = 4;
  if (this->poker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->poker().data(), this->poker().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableHistory.poker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->poker(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Game.TableHistory)
}

::google::protobuf::uint8* Game_TableHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Game.TableHistory)
  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // string way = 2;
  if (this->way().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->way().data(), this->way().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableHistory.way");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->way(), target);
  }

  // string counts = 3;
  if (this->counts().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->counts().data(), this->counts().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableHistory.counts");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->counts(), target);
  }

  // string poker = 4;
  if (this->poker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->poker().data(), this->poker().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.TableHistory.poker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->poker(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Game.TableHistory)
  return target;
}

size_t Game_TableHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Game.TableHistory)
  size_t total_size = 0;

  // string way = 2;
  if (this->way().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->way());
  }

  // string counts = 3;
  if (this->counts().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->counts());
  }

  // string poker = 4;
  if (this->poker().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->poker());
  }

  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tableid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game_TableHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Game.TableHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const Game_TableHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Game_TableHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Game.TableHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Game.TableHistory)
    MergeFrom(*source);
  }
}

void Game_TableHistory::MergeFrom(const Game_TableHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Game.TableHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.way().size() > 0) {

    way_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.way_);
  }
  if (from.counts().size() > 0) {

    counts_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.counts_);
  }
  if (from.poker().size() > 0) {

    poker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.poker_);
  }
  if (from.tableid() != 0) {
    set_tableid(from.tableid());
  }
}

void Game_TableHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Game.TableHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game_TableHistory::CopyFrom(const Game_TableHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Game.TableHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_TableHistory::IsInitialized() const {
  return true;
}

void Game_TableHistory::Swap(Game_TableHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Game_TableHistory::InternalSwap(Game_TableHistory* other) {
  way_.Swap(&other->way_);
  counts_.Swap(&other->counts_);
  poker_.Swap(&other->poker_);
  std::swap(tableid_, other->tableid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Game_TableHistory::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Game_TableHistory

// uint32 tableID = 1;
void Game_TableHistory::clear_tableid() {
  tableid_ = 0u;
}
::google::protobuf::uint32 Game_TableHistory::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableHistory.tableID)
  return tableid_;
}
void Game_TableHistory::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableHistory.tableID)
}

// string way = 2;
void Game_TableHistory::clear_way() {
  way_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Game_TableHistory::way() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableHistory.way)
  return way_.GetNoArena();
}
void Game_TableHistory::set_way(const ::std::string& value) {
  
  way_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableHistory.way)
}
#if LANG_CXX11
void Game_TableHistory::set_way(::std::string&& value) {
  
  way_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableHistory.way)
}
#endif
void Game_TableHistory::set_way(const char* value) {
  
  way_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableHistory.way)
}
void Game_TableHistory::set_way(const char* value, size_t size) {
  
  way_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableHistory.way)
}
::std::string* Game_TableHistory::mutable_way() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableHistory.way)
  return way_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Game_TableHistory::release_way() {
  // @@protoc_insertion_point(field_release:proto.Game.TableHistory.way)
  
  return way_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Game_TableHistory::set_allocated_way(::std::string* way) {
  if (way != NULL) {
    
  } else {
    
  }
  way_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), way);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableHistory.way)
}

// string counts = 3;
void Game_TableHistory::clear_counts() {
  counts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Game_TableHistory::counts() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableHistory.counts)
  return counts_.GetNoArena();
}
void Game_TableHistory::set_counts(const ::std::string& value) {
  
  counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableHistory.counts)
}
#if LANG_CXX11
void Game_TableHistory::set_counts(::std::string&& value) {
  
  counts_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableHistory.counts)
}
#endif
void Game_TableHistory::set_counts(const char* value) {
  
  counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableHistory.counts)
}
void Game_TableHistory::set_counts(const char* value, size_t size) {
  
  counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableHistory.counts)
}
::std::string* Game_TableHistory::mutable_counts() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableHistory.counts)
  return counts_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Game_TableHistory::release_counts() {
  // @@protoc_insertion_point(field_release:proto.Game.TableHistory.counts)
  
  return counts_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Game_TableHistory::set_allocated_counts(::std::string* counts) {
  if (counts != NULL) {
    
  } else {
    
  }
  counts_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), counts);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableHistory.counts)
}

// string poker = 4;
void Game_TableHistory::clear_poker() {
  poker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Game_TableHistory::poker() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableHistory.poker)
  return poker_.GetNoArena();
}
void Game_TableHistory::set_poker(const ::std::string& value) {
  
  poker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableHistory.poker)
}
#if LANG_CXX11
void Game_TableHistory::set_poker(::std::string&& value) {
  
  poker_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableHistory.poker)
}
#endif
void Game_TableHistory::set_poker(const char* value) {
  
  poker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableHistory.poker)
}
void Game_TableHistory::set_poker(const char* value, size_t size) {
  
  poker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableHistory.poker)
}
::std::string* Game_TableHistory::mutable_poker() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableHistory.poker)
  return poker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Game_TableHistory::release_poker() {
  // @@protoc_insertion_point(field_release:proto.Game.TableHistory.poker)
  
  return poker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Game_TableHistory::set_allocated_poker(::std::string* poker) {
  if (poker != NULL) {
    
  } else {
    
  }
  poker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), poker);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableHistory.poker)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Game_VirtualTable_Seat::kUnameFieldNumber;
const int Game_VirtualTable_Seat::kUidFieldNumber;
const int Game_VirtualTable_Seat::kBalanceFieldNumber;
const int Game_VirtualTable_Seat::kAvatarFieldNumber;
const int Game_VirtualTable_Seat::kBetinfoFieldNumber;
const int Game_VirtualTable_Seat::kSeatIDFieldNumber;
const int Game_VirtualTable_Seat::kIsSeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Game_VirtualTable_Seat::Game_VirtualTable_Seat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Game.VirtualTable.Seat)
}
Game_VirtualTable_Seat::Game_VirtualTable_Seat(const Game_VirtualTable_Seat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& Game_VirtualTable_Seat_BetinfoEntry_descriptor = protobuf_client_2eproto::file_level_metadata[27].descriptor;
  betinfo_.SetAssignDescriptorCallback(
      protobuf_client_2eproto::protobuf_AssignDescriptorsOnce);
  betinfo_.SetEntryDescriptor(
      &Game_VirtualTable_Seat_BetinfoEntry_descriptor);
  betinfo_.MergeFrom(from.betinfo_);
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uname().size() > 0) {
    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.avatar().size() > 0) {
    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  ::memcpy(&uid_, &from.uid_,
    reinterpret_cast<char*>(&isseat_) -
    reinterpret_cast<char*>(&uid_) + sizeof(isseat_));
  // @@protoc_insertion_point(copy_constructor:proto.Game.VirtualTable.Seat)
}

void Game_VirtualTable_Seat::SharedCtor() {
  const ::google::protobuf::Descriptor*& Game_VirtualTable_Seat_BetinfoEntry_descriptor = protobuf_client_2eproto::file_level_metadata[27].descriptor;
  betinfo_.SetAssignDescriptorCallback(
      protobuf_client_2eproto::protobuf_AssignDescriptorsOnce);
  betinfo_.SetEntryDescriptor(
      &Game_VirtualTable_Seat_BetinfoEntry_descriptor);
  uname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, reinterpret_cast<char*>(&isseat_) -
    reinterpret_cast<char*>(&uid_) + sizeof(isseat_));
  _cached_size_ = 0;
}

Game_VirtualTable_Seat::~Game_VirtualTable_Seat() {
  // @@protoc_insertion_point(destructor:proto.Game.VirtualTable.Seat)
  SharedDtor();
}

void Game_VirtualTable_Seat::SharedDtor() {
  uname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Game_VirtualTable_Seat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game_VirtualTable_Seat::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[28].descriptor;
}

const Game_VirtualTable_Seat& Game_VirtualTable_Seat::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Game_VirtualTable_Seat* Game_VirtualTable_Seat::New(::google::protobuf::Arena* arena) const {
  Game_VirtualTable_Seat* n = new Game_VirtualTable_Seat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Game_VirtualTable_Seat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Game.VirtualTable.Seat)
  betinfo_.Clear();
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, reinterpret_cast<char*>(&isseat_) -
    reinterpret_cast<char*>(&uid_) + sizeof(isseat_));
}

bool Game_VirtualTable_Seat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Game.VirtualTable.Seat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uname = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Game.VirtualTable.Seat.uname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 uid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double balance = 3;
      case 3: {
        if (tag == 25u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string avatar = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Game.VirtualTable.Seat.avatar"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, double> betinfo = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          Game_VirtualTable_Seat_BetinfoEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, double > > parser(&betinfo_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // uint32 seatID = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seatid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isSeat = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isseat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Game.VirtualTable.Seat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Game.VirtualTable.Seat)
  return false;
#undef DO_
}

void Game_VirtualTable_Seat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Game.VirtualTable.Seat)
  // string uname = 1;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.VirtualTable.Seat.uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uname(), output);
  }

  // int64 uid = 2;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  // double balance = 3;
  if (this->balance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->balance(), output);
  }

  // string avatar = 4;
  if (this->avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.VirtualTable.Seat.avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->avatar(), output);
  }

  // map<int32, double> betinfo = 5;
  if (!this->betinfo().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->betinfo().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->betinfo().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->betinfo().begin();
          it != this->betinfo().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Game_VirtualTable_Seat_BetinfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(betinfo_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<Game_VirtualTable_Seat_BetinfoEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->betinfo().begin();
          it != this->betinfo().end(); ++it) {
        entry.reset(betinfo_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    }
  }

  // uint32 seatID = 6;
  if (this->seatid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seatid(), output);
  }

  // bool isSeat = 7;
  if (this->isseat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isseat(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Game.VirtualTable.Seat)
}

::google::protobuf::uint8* Game_VirtualTable_Seat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Game.VirtualTable.Seat)
  // string uname = 1;
  if (this->uname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.VirtualTable.Seat.uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uname(), target);
  }

  // int64 uid = 2;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  // double balance = 3;
  if (this->balance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->balance(), target);
  }

  // string avatar = 4;
  if (this->avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Game.VirtualTable.Seat.avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->avatar(), target);
  }

  // map<int32, double> betinfo = 5;
  if (!this->betinfo().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->betinfo().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->betinfo().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->betinfo().begin();
          it != this->betinfo().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Game_VirtualTable_Seat_BetinfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(betinfo_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<Game_VirtualTable_Seat_BetinfoEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
          it = this->betinfo().begin();
          it != this->betinfo().end(); ++it) {
        entry.reset(betinfo_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 seatID = 6;
  if (this->seatid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seatid(), target);
  }

  // bool isSeat = 7;
  if (this->isseat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isseat(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Game.VirtualTable.Seat)
  return target;
}

size_t Game_VirtualTable_Seat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Game.VirtualTable.Seat)
  size_t total_size = 0;

  // map<int32, double> betinfo = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->betinfo_size());
  {
    ::google::protobuf::scoped_ptr<Game_VirtualTable_Seat_BetinfoEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, double >::const_iterator
        it = this->betinfo().begin();
        it != this->betinfo().end(); ++it) {
      entry.reset(betinfo_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string uname = 1;
  if (this->uname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uname());
  }

  // string avatar = 4;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->avatar());
  }

  // int64 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uid());
  }

  // double balance = 3;
  if (this->balance() != 0) {
    total_size += 1 + 8;
  }

  // uint32 seatID = 6;
  if (this->seatid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seatid());
  }

  // bool isSeat = 7;
  if (this->isseat() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game_VirtualTable_Seat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Game.VirtualTable.Seat)
  GOOGLE_DCHECK_NE(&from, this);
  const Game_VirtualTable_Seat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Game_VirtualTable_Seat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Game.VirtualTable.Seat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Game.VirtualTable.Seat)
    MergeFrom(*source);
  }
}

void Game_VirtualTable_Seat::MergeFrom(const Game_VirtualTable_Seat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Game.VirtualTable.Seat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  betinfo_.MergeFrom(from.betinfo_);
  if (from.uname().size() > 0) {

    uname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uname_);
  }
  if (from.avatar().size() > 0) {

    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.balance() != 0) {
    set_balance(from.balance());
  }
  if (from.seatid() != 0) {
    set_seatid(from.seatid());
  }
  if (from.isseat() != 0) {
    set_isseat(from.isseat());
  }
}

void Game_VirtualTable_Seat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Game.VirtualTable.Seat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game_VirtualTable_Seat::CopyFrom(const Game_VirtualTable_Seat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Game.VirtualTable.Seat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_VirtualTable_Seat::IsInitialized() const {
  return true;
}

void Game_VirtualTable_Seat::Swap(Game_VirtualTable_Seat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Game_VirtualTable_Seat::InternalSwap(Game_VirtualTable_Seat* other) {
  betinfo_.Swap(&other->betinfo_);
  uname_.Swap(&other->uname_);
  avatar_.Swap(&other->avatar_);
  std::swap(uid_, other->uid_);
  std::swap(balance_, other->balance_);
  std::swap(seatid_, other->seatid_);
  std::swap(isseat_, other->isseat_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Game_VirtualTable_Seat::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Game_VirtualTable_Seat

// string uname = 1;
void Game_VirtualTable_Seat::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Game_VirtualTable_Seat::uname() const {
  // @@protoc_insertion_point(field_get:proto.Game.VirtualTable.Seat.uname)
  return uname_.GetNoArena();
}
void Game_VirtualTable_Seat::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.VirtualTable.Seat.uname)
}
#if LANG_CXX11
void Game_VirtualTable_Seat::set_uname(::std::string&& value) {
  
  uname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.VirtualTable.Seat.uname)
}
#endif
void Game_VirtualTable_Seat::set_uname(const char* value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.VirtualTable.Seat.uname)
}
void Game_VirtualTable_Seat::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.VirtualTable.Seat.uname)
}
::std::string* Game_VirtualTable_Seat::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.VirtualTable.Seat.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Game_VirtualTable_Seat::release_uname() {
  // @@protoc_insertion_point(field_release:proto.Game.VirtualTable.Seat.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Game_VirtualTable_Seat::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.VirtualTable.Seat.uname)
}

// int64 uid = 2;
void Game_VirtualTable_Seat::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Game_VirtualTable_Seat::uid() const {
  // @@protoc_insertion_point(field_get:proto.Game.VirtualTable.Seat.uid)
  return uid_;
}
void Game_VirtualTable_Seat::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.VirtualTable.Seat.uid)
}

// double balance = 3;
void Game_VirtualTable_Seat::clear_balance() {
  balance_ = 0;
}
double Game_VirtualTable_Seat::balance() const {
  // @@protoc_insertion_point(field_get:proto.Game.VirtualTable.Seat.balance)
  return balance_;
}
void Game_VirtualTable_Seat::set_balance(double value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.VirtualTable.Seat.balance)
}

// string avatar = 4;
void Game_VirtualTable_Seat::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Game_VirtualTable_Seat::avatar() const {
  // @@protoc_insertion_point(field_get:proto.Game.VirtualTable.Seat.avatar)
  return avatar_.GetNoArena();
}
void Game_VirtualTable_Seat::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.VirtualTable.Seat.avatar)
}
#if LANG_CXX11
void Game_VirtualTable_Seat::set_avatar(::std::string&& value) {
  
  avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.VirtualTable.Seat.avatar)
}
#endif
void Game_VirtualTable_Seat::set_avatar(const char* value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.VirtualTable.Seat.avatar)
}
void Game_VirtualTable_Seat::set_avatar(const char* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.VirtualTable.Seat.avatar)
}
::std::string* Game_VirtualTable_Seat::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.VirtualTable.Seat.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Game_VirtualTable_Seat::release_avatar() {
  // @@protoc_insertion_point(field_release:proto.Game.VirtualTable.Seat.avatar)
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Game_VirtualTable_Seat::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.VirtualTable.Seat.avatar)
}

// map<int32, double> betinfo = 5;
int Game_VirtualTable_Seat::betinfo_size() const {
  return betinfo_.size();
}
void Game_VirtualTable_Seat::clear_betinfo() {
  betinfo_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, double >&
Game_VirtualTable_Seat::betinfo() const {
  // @@protoc_insertion_point(field_map:proto.Game.VirtualTable.Seat.betinfo)
  return betinfo_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, double >*
Game_VirtualTable_Seat::mutable_betinfo() {
  // @@protoc_insertion_point(field_mutable_map:proto.Game.VirtualTable.Seat.betinfo)
  return betinfo_.MutableMap();
}

// uint32 seatID = 6;
void Game_VirtualTable_Seat::clear_seatid() {
  seatid_ = 0u;
}
::google::protobuf::uint32 Game_VirtualTable_Seat::seatid() const {
  // @@protoc_insertion_point(field_get:proto.Game.VirtualTable.Seat.seatID)
  return seatid_;
}
void Game_VirtualTable_Seat::set_seatid(::google::protobuf::uint32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.VirtualTable.Seat.seatID)
}

// bool isSeat = 7;
void Game_VirtualTable_Seat::clear_isseat() {
  isseat_ = false;
}
bool Game_VirtualTable_Seat::isseat() const {
  // @@protoc_insertion_point(field_get:proto.Game.VirtualTable.Seat.isSeat)
  return isseat_;
}
void Game_VirtualTable_Seat::set_isseat(bool value) {
  
  isseat_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.VirtualTable.Seat.isSeat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Game_VirtualTable_Table::kTableIDFieldNumber;
const int Game_VirtualTable_Table::kMaxSeatNumFieldNumber;
const int Game_VirtualTable_Table::kSeatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Game_VirtualTable_Table::Game_VirtualTable_Table()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Game.VirtualTable.Table)
}
Game_VirtualTable_Table::Game_VirtualTable_Table(const Game_VirtualTable_Table& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& Game_VirtualTable_Table_SeatsEntry_descriptor = protobuf_client_2eproto::file_level_metadata[29].descriptor;
  seats_.SetAssignDescriptorCallback(
      protobuf_client_2eproto::protobuf_AssignDescriptorsOnce);
  seats_.SetEntryDescriptor(
      &Game_VirtualTable_Table_SeatsEntry_descriptor);
  seats_.MergeFrom(from.seats_);
  ::memcpy(&tableid_, &from.tableid_,
    reinterpret_cast<char*>(&maxseatnum_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(maxseatnum_));
  // @@protoc_insertion_point(copy_constructor:proto.Game.VirtualTable.Table)
}

void Game_VirtualTable_Table::SharedCtor() {
  const ::google::protobuf::Descriptor*& Game_VirtualTable_Table_SeatsEntry_descriptor = protobuf_client_2eproto::file_level_metadata[29].descriptor;
  seats_.SetAssignDescriptorCallback(
      protobuf_client_2eproto::protobuf_AssignDescriptorsOnce);
  seats_.SetEntryDescriptor(
      &Game_VirtualTable_Table_SeatsEntry_descriptor);
  ::memset(&tableid_, 0, reinterpret_cast<char*>(&maxseatnum_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(maxseatnum_));
  _cached_size_ = 0;
}

Game_VirtualTable_Table::~Game_VirtualTable_Table() {
  // @@protoc_insertion_point(destructor:proto.Game.VirtualTable.Table)
  SharedDtor();
}

void Game_VirtualTable_Table::SharedDtor() {
}

void Game_VirtualTable_Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game_VirtualTable_Table::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[30].descriptor;
}

const Game_VirtualTable_Table& Game_VirtualTable_Table::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Game_VirtualTable_Table* Game_VirtualTable_Table::New(::google::protobuf::Arena* arena) const {
  Game_VirtualTable_Table* n = new Game_VirtualTable_Table;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Game_VirtualTable_Table::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Game.VirtualTable.Table)
  seats_.Clear();
  ::memset(&tableid_, 0, reinterpret_cast<char*>(&maxseatnum_) -
    reinterpret_cast<char*>(&tableid_) + sizeof(maxseatnum_));
}

bool Game_VirtualTable_Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Game.VirtualTable.Table)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 tableID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 maxSeatNum = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxseatnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.Game.VirtualTable.Seat> seats = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          Game_VirtualTable_Table_SeatsEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat > > parser(&seats_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Game.VirtualTable.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Game.VirtualTable.Table)
  return false;
#undef DO_
}

void Game_VirtualTable_Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Game.VirtualTable.Table)
  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // uint32 maxSeatNum = 2;
  if (this->maxseatnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxseatnum(), output);
  }

  // map<uint32, .proto.Game.VirtualTable.Seat> seats = 3;
  if (!this->seats().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->seats().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->seats().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat >::const_iterator
          it = this->seats().begin();
          it != this->seats().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Game_VirtualTable_Table_SeatsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(seats_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<Game_VirtualTable_Table_SeatsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat >::const_iterator
          it = this->seats().begin();
          it != this->seats().end(); ++it) {
        entry.reset(seats_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:proto.Game.VirtualTable.Table)
}

::google::protobuf::uint8* Game_VirtualTable_Table::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Game.VirtualTable.Table)
  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // uint32 maxSeatNum = 2;
  if (this->maxseatnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxseatnum(), target);
  }

  // map<uint32, .proto.Game.VirtualTable.Seat> seats = 3;
  if (!this->seats().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->seats().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->seats().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat >::const_iterator
          it = this->seats().begin();
          it != this->seats().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Game_VirtualTable_Table_SeatsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(seats_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<Game_VirtualTable_Table_SeatsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat >::const_iterator
          it = this->seats().begin();
          it != this->seats().end(); ++it) {
        entry.reset(seats_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Game.VirtualTable.Table)
  return target;
}

size_t Game_VirtualTable_Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Game.VirtualTable.Table)
  size_t total_size = 0;

  // map<uint32, .proto.Game.VirtualTable.Seat> seats = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->seats_size());
  {
    ::google::protobuf::scoped_ptr<Game_VirtualTable_Table_SeatsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat >::const_iterator
        it = this->seats().begin();
        it != this->seats().end(); ++it) {
      entry.reset(seats_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 tableID = 1;
  if (this->tableid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tableid());
  }

  // uint32 maxSeatNum = 2;
  if (this->maxseatnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxseatnum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game_VirtualTable_Table::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Game.VirtualTable.Table)
  GOOGLE_DCHECK_NE(&from, this);
  const Game_VirtualTable_Table* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Game_VirtualTable_Table>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Game.VirtualTable.Table)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Game.VirtualTable.Table)
    MergeFrom(*source);
  }
}

void Game_VirtualTable_Table::MergeFrom(const Game_VirtualTable_Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Game.VirtualTable.Table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seats_.MergeFrom(from.seats_);
  if (from.tableid() != 0) {
    set_tableid(from.tableid());
  }
  if (from.maxseatnum() != 0) {
    set_maxseatnum(from.maxseatnum());
  }
}

void Game_VirtualTable_Table::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Game.VirtualTable.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game_VirtualTable_Table::CopyFrom(const Game_VirtualTable_Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Game.VirtualTable.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_VirtualTable_Table::IsInitialized() const {
  return true;
}

void Game_VirtualTable_Table::Swap(Game_VirtualTable_Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Game_VirtualTable_Table::InternalSwap(Game_VirtualTable_Table* other) {
  seats_.Swap(&other->seats_);
  std::swap(tableid_, other->tableid_);
  std::swap(maxseatnum_, other->maxseatnum_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Game_VirtualTable_Table::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Game_VirtualTable_Table

// uint32 tableID = 1;
void Game_VirtualTable_Table::clear_tableid() {
  tableid_ = 0u;
}
::google::protobuf::uint32 Game_VirtualTable_Table::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Game.VirtualTable.Table.tableID)
  return tableid_;
}
void Game_VirtualTable_Table::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.VirtualTable.Table.tableID)
}

// uint32 maxSeatNum = 2;
void Game_VirtualTable_Table::clear_maxseatnum() {
  maxseatnum_ = 0u;
}
::google::protobuf::uint32 Game_VirtualTable_Table::maxseatnum() const {
  // @@protoc_insertion_point(field_get:proto.Game.VirtualTable.Table.maxSeatNum)
  return maxseatnum_;
}
void Game_VirtualTable_Table::set_maxseatnum(::google::protobuf::uint32 value) {
  
  maxseatnum_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.VirtualTable.Table.maxSeatNum)
}

// map<uint32, .proto.Game.VirtualTable.Seat> seats = 3;
int Game_VirtualTable_Table::seats_size() const {
  return seats_.size();
}
void Game_VirtualTable_Table::clear_seats() {
  seats_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat >&
Game_VirtualTable_Table::seats() const {
  // @@protoc_insertion_point(field_map:proto.Game.VirtualTable.Table.seats)
  return seats_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat >*
Game_VirtualTable_Table::mutable_seats() {
  // @@protoc_insertion_point(field_mutable_map:proto.Game.VirtualTable.Table.seats)
  return seats_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Game_VirtualTable::Game_VirtualTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Game.VirtualTable)
}
Game_VirtualTable::Game_VirtualTable(const Game_VirtualTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.Game.VirtualTable)
}

void Game_VirtualTable::SharedCtor() {
  _cached_size_ = 0;
}

Game_VirtualTable::~Game_VirtualTable() {
  // @@protoc_insertion_point(destructor:proto.Game.VirtualTable)
  SharedDtor();
}

void Game_VirtualTable::SharedDtor() {
}

void Game_VirtualTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game_VirtualTable::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[31].descriptor;
}

const Game_VirtualTable& Game_VirtualTable::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Game_VirtualTable* Game_VirtualTable::New(::google::protobuf::Arena* arena) const {
  Game_VirtualTable* n = new Game_VirtualTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Game_VirtualTable::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Game.VirtualTable)
}

bool Game_VirtualTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Game.VirtualTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Game.VirtualTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Game.VirtualTable)
  return false;
#undef DO_
}

void Game_VirtualTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Game.VirtualTable)
  // @@protoc_insertion_point(serialize_end:proto.Game.VirtualTable)
}

::google::protobuf::uint8* Game_VirtualTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Game.VirtualTable)
  // @@protoc_insertion_point(serialize_to_array_end:proto.Game.VirtualTable)
  return target;
}

size_t Game_VirtualTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Game.VirtualTable)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game_VirtualTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Game.VirtualTable)
  GOOGLE_DCHECK_NE(&from, this);
  const Game_VirtualTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Game_VirtualTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Game.VirtualTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Game.VirtualTable)
    MergeFrom(*source);
  }
}

void Game_VirtualTable::MergeFrom(const Game_VirtualTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Game.VirtualTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Game_VirtualTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Game.VirtualTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game_VirtualTable::CopyFrom(const Game_VirtualTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Game.VirtualTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_VirtualTable::IsInitialized() const {
  return true;
}

void Game_VirtualTable::Swap(Game_VirtualTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Game_VirtualTable::InternalSwap(Game_VirtualTable* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Game_VirtualTable::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Game_VirtualTable

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Game::Game()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_client_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Game)
}
Game::Game(const Game& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.Game)
}

void Game::SharedCtor() {
  _cached_size_ = 0;
}

Game::~Game() {
  // @@protoc_insertion_point(destructor:proto.Game)
  SharedDtor();
}

void Game::SharedDtor() {
}

void Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game::descriptor() {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[32].descriptor;
}

const Game& Game::default_instance() {
  protobuf_client_2eproto::InitDefaults();
  return *internal_default_instance();
}

Game* Game::New(::google::protobuf::Arena* arena) const {
  Game* n = new Game;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Game::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Game)
}

bool Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Game)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Game)
  return false;
#undef DO_
}

void Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Game)
  // @@protoc_insertion_point(serialize_end:proto.Game)
}

::google::protobuf::uint8* Game::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.Game)
  // @@protoc_insertion_point(serialize_to_array_end:proto.Game)
  return target;
}

size_t Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Game)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Game)
  GOOGLE_DCHECK_NE(&from, this);
  const Game* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Game>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Game)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Game)
    MergeFrom(*source);
  }
}

void Game::MergeFrom(const Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Game)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Game::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game::CopyFrom(const Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game::IsInitialized() const {
  return true;
}

void Game::Swap(Game* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Game::InternalSwap(Game* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Game::GetMetadata() const {
  protobuf_client_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_client_2eproto::file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Game

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
