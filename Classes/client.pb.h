// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#ifndef PROTOBUF_client_2eproto__INCLUDED
#define PROTOBUF_client_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace proto {
class AutoID;
class AutoIDDefaultTypeInternal;
extern AutoIDDefaultTypeInternal _AutoID_default_instance_;
class CommonReply;
class CommonReplyDefaultTypeInternal;
extern CommonReplyDefaultTypeInternal _CommonReply_default_instance_;
class Game;
class GameDefaultTypeInternal;
extern GameDefaultTypeInternal _Game_default_instance_;
class Game_Bet;
class Game_BetDefaultTypeInternal;
extern Game_BetDefaultTypeInternal _Game_Bet_default_instance_;
class Game_JoinTable;
class Game_JoinTableDefaultTypeInternal;
extern Game_JoinTableDefaultTypeInternal _Game_JoinTable_default_instance_;
class Game_LeaveTable;
class Game_LeaveTableDefaultTypeInternal;
extern Game_LeaveTableDefaultTypeInternal _Game_LeaveTable_default_instance_;
class Game_TableConfig;
class Game_TableConfigDefaultTypeInternal;
extern Game_TableConfigDefaultTypeInternal _Game_TableConfig_default_instance_;
class Game_TableHistory;
class Game_TableHistoryDefaultTypeInternal;
extern Game_TableHistoryDefaultTypeInternal _Game_TableHistory_default_instance_;
class Game_TableStatus;
class Game_TableStatusDefaultTypeInternal;
extern Game_TableStatusDefaultTypeInternal _Game_TableStatus_default_instance_;
class Game_Tip;
class Game_TipDefaultTypeInternal;
extern Game_TipDefaultTypeInternal _Game_Tip_default_instance_;
class Game_UserSnapshot;
class Game_UserSnapshotDefaultTypeInternal;
extern Game_UserSnapshotDefaultTypeInternal _Game_UserSnapshot_default_instance_;
class Game_VirtualTable;
class Game_VirtualTableDefaultTypeInternal;
extern Game_VirtualTableDefaultTypeInternal _Game_VirtualTable_default_instance_;
class Game_VirtualTable_Seat;
class Game_VirtualTable_SeatDefaultTypeInternal;
extern Game_VirtualTable_SeatDefaultTypeInternal _Game_VirtualTable_Seat_default_instance_;
class Game_VirtualTable_Table;
class Game_VirtualTable_TableDefaultTypeInternal;
extern Game_VirtualTable_TableDefaultTypeInternal _Game_VirtualTable_Table_default_instance_;
class Lobby;
class LobbyDefaultTypeInternal;
extern LobbyDefaultTypeInternal _Lobby_default_instance_;
class Lobby_TableSnapshot;
class Lobby_TableSnapshotDefaultTypeInternal;
extern Lobby_TableSnapshotDefaultTypeInternal _Lobby_TableSnapshot_default_instance_;
class Lobby_UserSnapshot;
class Lobby_UserSnapshotDefaultTypeInternal;
extern Lobby_UserSnapshotDefaultTypeInternal _Lobby_UserSnapshot_default_instance_;
class String;
class StringDefaultTypeInternal;
extern StringDefaultTypeInternal _String_default_instance_;
class Test;
class TestDefaultTypeInternal;
extern TestDefaultTypeInternal _Test_default_instance_;
class Test_Map;
class Test_MapDefaultTypeInternal;
extern Test_MapDefaultTypeInternal _Test_Map_default_instance_;
class Test_Oneof;
class Test_OneofDefaultTypeInternal;
extern Test_OneofDefaultTypeInternal _Test_Oneof_default_instance_;
class UserRequest;
class UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
class UserRequest_GameExit;
class UserRequest_GameExitDefaultTypeInternal;
extern UserRequest_GameExitDefaultTypeInternal _UserRequest_GameExit_default_instance_;
class UserRequest_GameLogin;
class UserRequest_GameLoginDefaultTypeInternal;
extern UserRequest_GameLoginDefaultTypeInternal _UserRequest_GameLogin_default_instance_;
class UserRequest_LobbyLogin;
class UserRequest_LobbyLoginDefaultTypeInternal;
extern UserRequest_LobbyLoginDefaultTypeInternal _UserRequest_LobbyLogin_default_instance_;
class UserRequest_NilBody;
class UserRequest_NilBodyDefaultTypeInternal;
extern UserRequest_NilBodyDefaultTypeInternal _UserRequest_NilBody_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_client_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_client_2eproto

enum Game_Subtype {
  Game_Subtype_UnKnow = 0,
  Game_Subtype_ClassicBaccarat = 111,
  Game_Subtype_MianYongBaccarat = 112,
  Game_Subtype_SuperBaccarat = 113,
  Game_Subtype_ChainBaccarat = 114,
  Game_Subtype_MianYongChainBaccarat = 115,
  Game_Subtype_LongHu = 211,
  Game_Subtype_Roulette = 311,
  Game_Subtype_SicBo = 411,
  Game_Subtype_FanTan = 511,
  Game_Subtype_TexasPoker = 611,
  Game_Subtype_Game_Subtype_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Game_Subtype_Game_Subtype_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Game_Subtype_IsValid(int value);
const Game_Subtype Game_Subtype_Subtype_MIN = Game_Subtype_UnKnow;
const Game_Subtype Game_Subtype_Subtype_MAX = Game_Subtype_TexasPoker;
const int Game_Subtype_Subtype_ARRAYSIZE = Game_Subtype_Subtype_MAX + 1;

const ::google::protobuf::EnumDescriptor* Game_Subtype_descriptor();
inline const ::std::string& Game_Subtype_Name(Game_Subtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    Game_Subtype_descriptor(), value);
}
inline bool Game_Subtype_Parse(
    const ::std::string& name, Game_Subtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Game_Subtype>(
    Game_Subtype_descriptor(), name, value);
}
enum Command {
  client_heart_beat = 0,
  client_heart_beat_ack = 1,
  user_lobby_login = 10,
  user_lobby_login_ack = 11,
  user_game_login = 50,
  user_game_login_ack = 51,
  user_game_exit = 60,
  user_game_exit_ack = 61,
  user_lobby_logout = 400,
  user_lobby_logout_ack = 401,
  server_message_push = 110,
  lobby_change_avatar = 510,
  lobby_change_avatar_ack = 511,
  lobby_change_nick = 520,
  lobby_change_nick_ack = 521,
  lobby_player_push = 600,
  lobby_videourl_push = 601,
  lobby_status_push = 602,
  lobby_playercount_push = 603,
  game_leave_table = 1000,
  game_leave_table_ack = 1001,
  game_join_table = 1010,
  game_join_table_ack = 1011,
  game_bet = 1020,
  game_bet_ack = 1021,
  game_tip = 1030,
  game_tip_ack = 1031,
  game_table_snapshot_push = 1901,
  game_table_status_push = 1902,
  game_table_config_push = 1903,
  game_table_history_push = 1904,
  game_player_push = 1905,
  game_virtual_table_push = 1906,
  dealer_command = 2000,
  test_oneof = 10002,
  test_map = 10003,
  Command_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Command_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Command_IsValid(int value);
const Command Command_MIN = client_heart_beat;
const Command Command_MAX = test_map;
const int Command_ARRAYSIZE = Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* Command_descriptor();
inline const ::std::string& Command_Name(Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    Command_descriptor(), value);
}
inline bool Command_Parse(
    const ::std::string& name, Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command>(
    Command_descriptor(), name, value);
}
enum GameType {
  UnKnow = 0,
  Baccarat = 11,
  LongHu = 12,
  Roulette = 13,
  SicBo = 14,
  FanTan = 15,
  TexasPoker = 16,
  GameType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GameType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GameType_IsValid(int value);
const GameType GameType_MIN = UnKnow;
const GameType GameType_MAX = TexasPoker;
const int GameType_ARRAYSIZE = GameType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameType_descriptor();
inline const ::std::string& GameType_Name(GameType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameType_descriptor(), value);
}
inline bool GameType_Parse(
    const ::std::string& name, GameType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameType>(
    GameType_descriptor(), name, value);
}
// ===================================================================

class Test_Oneof : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Test.Oneof) */ {
 public:
  Test_Oneof();
  virtual ~Test_Oneof();

  Test_Oneof(const Test_Oneof& from);

  inline Test_Oneof& operator=(const Test_Oneof& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test_Oneof& default_instance();

  enum TestOneofCase {
    kName = 1,
    kAge = 2,
    TEST_ONEOF_NOT_SET = 0,
  };

  static inline const Test_Oneof* internal_default_instance() {
    return reinterpret_cast<const Test_Oneof*>(
               &_Test_Oneof_default_instance_);
  }

  void Swap(Test_Oneof* other);

  // implements Message ----------------------------------------------

  inline Test_Oneof* New() const PROTOBUF_FINAL { return New(NULL); }

  Test_Oneof* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Test_Oneof& from);
  void MergeFrom(const Test_Oneof& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Test_Oneof* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  private:
  bool has_name() const;
  public:
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 age = 2;
  private:
  bool has_age() const;
  public:
  void clear_age();
  static const int kAgeFieldNumber = 2;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  TestOneofCase test_oneof_case() const;
  // @@protoc_insertion_point(class_scope:proto.Test.Oneof)
 private:
  void set_has_name();
  void set_has_age();

  inline bool has_test_oneof() const;
  void clear_test_oneof();
  inline void clear_has_test_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TestOneofUnion {
    TestOneofUnion() {}
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::int32 age_;
  } test_oneof_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Test_Map : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Test.Map) */ {
 public:
  Test_Map();
  virtual ~Test_Map();

  Test_Map(const Test_Map& from);

  inline Test_Map& operator=(const Test_Map& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test_Map& default_instance();

  static inline const Test_Map* internal_default_instance() {
    return reinterpret_cast<const Test_Map*>(
               &_Test_Map_default_instance_);
  }

  void Swap(Test_Map* other);

  // implements Message ----------------------------------------------

  inline Test_Map* New() const PROTOBUF_FINAL { return New(NULL); }

  Test_Map* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Test_Map& from);
  void MergeFrom(const Test_Map& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Test_Map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, double> body = 1;
  int body_size() const;
  void clear_body();
  static const int kBodyFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, double >&
      body() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, double >*
      mutable_body();

  // @@protoc_insertion_point(class_scope:proto.Test.Map)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::uint32, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 >
      Test_Map_BodyEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::uint32, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > body_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Test : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Test) */ {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();

  static inline const Test* internal_default_instance() {
    return reinterpret_cast<const Test*>(
               &_Test_default_instance_);
  }

  void Swap(Test* other);

  // implements Message ----------------------------------------------

  inline Test* New() const PROTOBUF_FINAL { return New(NULL); }

  Test* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Test* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Test_Oneof Oneof;
  typedef Test_Map Map;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.Test)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CommonReply) */ {
 public:
  CommonReply();
  virtual ~CommonReply();

  CommonReply(const CommonReply& from);

  inline CommonReply& operator=(const CommonReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonReply& default_instance();

  static inline const CommonReply* internal_default_instance() {
    return reinterpret_cast<const CommonReply*>(
               &_CommonReply_default_instance_);
  }

  void Swap(CommonReply* other);

  // implements Message ----------------------------------------------

  inline CommonReply* New() const PROTOBUF_FINAL { return New(NULL); }

  CommonReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommonReply& from);
  void MergeFrom(const CommonReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommonReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string desc = 2;
  void clear_desc();
  static const int kDescFieldNumber = 2;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.CommonReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AutoID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.AutoID) */ {
 public:
  AutoID();
  virtual ~AutoID();

  AutoID(const AutoID& from);

  inline AutoID& operator=(const AutoID& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoID& default_instance();

  static inline const AutoID* internal_default_instance() {
    return reinterpret_cast<const AutoID*>(
               &_AutoID_default_instance_);
  }

  void Swap(AutoID* other);

  // implements Message ----------------------------------------------

  inline AutoID* New() const PROTOBUF_FINAL { return New(NULL); }

  AutoID* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AutoID& from);
  void MergeFrom(const AutoID& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AutoID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto.AutoID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 id_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class String : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.String) */ {
 public:
  String();
  virtual ~String();

  String(const String& from);

  inline String& operator=(const String& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const String& default_instance();

  static inline const String* internal_default_instance() {
    return reinterpret_cast<const String*>(
               &_String_default_instance_);
  }

  void Swap(String* other);

  // implements Message ----------------------------------------------

  inline String* New() const PROTOBUF_FINAL { return New(NULL); }

  String* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const String& from);
  void MergeFrom(const String& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(String* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string str = 1;
  void clear_str();
  static const int kStrFieldNumber = 1;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  #if LANG_CXX11
  void set_str(::std::string&& value);
  #endif
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // @@protoc_insertion_point(class_scope:proto.String)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserRequest_LobbyLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.UserRequest.LobbyLogin) */ {
 public:
  UserRequest_LobbyLogin();
  virtual ~UserRequest_LobbyLogin();

  UserRequest_LobbyLogin(const UserRequest_LobbyLogin& from);

  inline UserRequest_LobbyLogin& operator=(const UserRequest_LobbyLogin& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRequest_LobbyLogin& default_instance();

  static inline const UserRequest_LobbyLogin* internal_default_instance() {
    return reinterpret_cast<const UserRequest_LobbyLogin*>(
               &_UserRequest_LobbyLogin_default_instance_);
  }

  void Swap(UserRequest_LobbyLogin* other);

  // implements Message ----------------------------------------------

  inline UserRequest_LobbyLogin* New() const PROTOBUF_FINAL { return New(NULL); }

  UserRequest_LobbyLogin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserRequest_LobbyLogin& from);
  void MergeFrom(const UserRequest_LobbyLogin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserRequest_LobbyLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string passwd = 2;
  void clear_passwd();
  static const int kPasswdFieldNumber = 2;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // string way = 3;
  void clear_way();
  static const int kWayFieldNumber = 3;
  const ::std::string& way() const;
  void set_way(const ::std::string& value);
  #if LANG_CXX11
  void set_way(::std::string&& value);
  #endif
  void set_way(const char* value);
  void set_way(const char* value, size_t size);
  ::std::string* mutable_way();
  ::std::string* release_way();
  void set_allocated_way(::std::string* way);

  // string ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint32 platform = 5;
  void clear_platform();
  static const int kPlatformFieldNumber = 5;
  ::google::protobuf::uint32 platform() const;
  void set_platform(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.UserRequest.LobbyLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  ::google::protobuf::internal::ArenaStringPtr way_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint32 platform_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserRequest_NilBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.UserRequest.NilBody) */ {
 public:
  UserRequest_NilBody();
  virtual ~UserRequest_NilBody();

  UserRequest_NilBody(const UserRequest_NilBody& from);

  inline UserRequest_NilBody& operator=(const UserRequest_NilBody& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRequest_NilBody& default_instance();

  static inline const UserRequest_NilBody* internal_default_instance() {
    return reinterpret_cast<const UserRequest_NilBody*>(
               &_UserRequest_NilBody_default_instance_);
  }

  void Swap(UserRequest_NilBody* other);

  // implements Message ----------------------------------------------

  inline UserRequest_NilBody* New() const PROTOBUF_FINAL { return New(NULL); }

  UserRequest_NilBody* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserRequest_NilBody& from);
  void MergeFrom(const UserRequest_NilBody& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserRequest_NilBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.UserRequest.NilBody)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserRequest_GameLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.UserRequest.GameLogin) */ {
 public:
  UserRequest_GameLogin();
  virtual ~UserRequest_GameLogin();

  UserRequest_GameLogin(const UserRequest_GameLogin& from);

  inline UserRequest_GameLogin& operator=(const UserRequest_GameLogin& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRequest_GameLogin& default_instance();

  static inline const UserRequest_GameLogin* internal_default_instance() {
    return reinterpret_cast<const UserRequest_GameLogin*>(
               &_UserRequest_GameLogin_default_instance_);
  }

  void Swap(UserRequest_GameLogin* other);

  // implements Message ----------------------------------------------

  inline UserRequest_GameLogin* New() const PROTOBUF_FINAL { return New(NULL); }

  UserRequest_GameLogin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserRequest_GameLogin& from);
  void MergeFrom(const UserRequest_GameLogin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserRequest_GameLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GameType gameID = 1;
  void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  ::proto::GameType gameid() const;
  void set_gameid(::proto::GameType value);

  // uint32 tableID = 2;
  void clear_tableid();
  static const int kTableIDFieldNumber = 2;
  ::google::protobuf::uint32 tableid() const;
  void set_tableid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.UserRequest.GameLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int gameid_;
  ::google::protobuf::uint32 tableid_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserRequest_GameExit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.UserRequest.GameExit) */ {
 public:
  UserRequest_GameExit();
  virtual ~UserRequest_GameExit();

  UserRequest_GameExit(const UserRequest_GameExit& from);

  inline UserRequest_GameExit& operator=(const UserRequest_GameExit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRequest_GameExit& default_instance();

  static inline const UserRequest_GameExit* internal_default_instance() {
    return reinterpret_cast<const UserRequest_GameExit*>(
               &_UserRequest_GameExit_default_instance_);
  }

  void Swap(UserRequest_GameExit* other);

  // implements Message ----------------------------------------------

  inline UserRequest_GameExit* New() const PROTOBUF_FINAL { return New(NULL); }

  UserRequest_GameExit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserRequest_GameExit& from);
  void MergeFrom(const UserRequest_GameExit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserRequest_GameExit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GameType gameID = 1;
  void clear_gameid();
  static const int kGameIDFieldNumber = 1;
  ::proto::GameType gameid() const;
  void set_gameid(::proto::GameType value);

  // @@protoc_insertion_point(class_scope:proto.UserRequest.GameExit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int gameid_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.UserRequest) */ {
 public:
  UserRequest();
  virtual ~UserRequest();

  UserRequest(const UserRequest& from);

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRequest& default_instance();

  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }

  void Swap(UserRequest* other);

  // implements Message ----------------------------------------------

  inline UserRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UserRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserRequest& from);
  void MergeFrom(const UserRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserRequest_LobbyLogin LobbyLogin;
  typedef UserRequest_NilBody NilBody;
  typedef UserRequest_GameLogin GameLogin;
  typedef UserRequest_GameExit GameExit;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.UserRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Lobby_UserSnapshot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Lobby.UserSnapshot) */ {
 public:
  Lobby_UserSnapshot();
  virtual ~Lobby_UserSnapshot();

  Lobby_UserSnapshot(const Lobby_UserSnapshot& from);

  inline Lobby_UserSnapshot& operator=(const Lobby_UserSnapshot& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lobby_UserSnapshot& default_instance();

  static inline const Lobby_UserSnapshot* internal_default_instance() {
    return reinterpret_cast<const Lobby_UserSnapshot*>(
               &_Lobby_UserSnapshot_default_instance_);
  }

  void Swap(Lobby_UserSnapshot* other);

  // implements Message ----------------------------------------------

  inline Lobby_UserSnapshot* New() const PROTOBUF_FINAL { return New(NULL); }

  Lobby_UserSnapshot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lobby_UserSnapshot& from);
  void MergeFrom(const Lobby_UserSnapshot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lobby_UserSnapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string nick = 2;
  void clear_nick();
  static const int kNickFieldNumber = 2;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // string videoChips = 4;
  void clear_videochips();
  static const int kVideoChipsFieldNumber = 4;
  const ::std::string& videochips() const;
  void set_videochips(const ::std::string& value);
  #if LANG_CXX11
  void set_videochips(::std::string&& value);
  #endif
  void set_videochips(const char* value);
  void set_videochips(const char* value, size_t size);
  ::std::string* mutable_videochips();
  ::std::string* release_videochips();
  void set_allocated_videochips(::std::string* videochips);

  // string rouletteChips = 5;
  void clear_roulettechips();
  static const int kRouletteChipsFieldNumber = 5;
  const ::std::string& roulettechips() const;
  void set_roulettechips(const ::std::string& value);
  #if LANG_CXX11
  void set_roulettechips(::std::string&& value);
  #endif
  void set_roulettechips(const char* value);
  void set_roulettechips(const char* value, size_t size);
  ::std::string* mutable_roulettechips();
  ::std::string* release_roulettechips();
  void set_allocated_roulettechips(::std::string* roulettechips);

  // string moneysort = 7;
  void clear_moneysort();
  static const int kMoneysortFieldNumber = 7;
  const ::std::string& moneysort() const;
  void set_moneysort(const ::std::string& value);
  #if LANG_CXX11
  void set_moneysort(::std::string&& value);
  #endif
  void set_moneysort(const char* value);
  void set_moneysort(const char* value, size_t size);
  ::std::string* mutable_moneysort();
  ::std::string* release_moneysort();
  void set_allocated_moneysort(::std::string* moneysort);

  // double balance = 3;
  void clear_balance();
  static const int kBalanceFieldNumber = 3;
  double balance() const;
  void set_balance(double value);

  // uint64 limits = 6;
  void clear_limits();
  static const int kLimitsFieldNumber = 6;
  ::google::protobuf::uint64 limits() const;
  void set_limits(::google::protobuf::uint64 value);

  // int64 parentID = 8;
  void clear_parentid();
  static const int kParentIDFieldNumber = 8;
  ::google::protobuf::int64 parentid() const;
  void set_parentid(::google::protobuf::int64 value);

  // int64 uid = 11;
  void clear_uid();
  static const int kUidFieldNumber = 11;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // bool isTip = 9;
  void clear_istip();
  static const int kIsTipFieldNumber = 9;
  bool istip() const;
  void set_istip(bool value);

  // bool isChat = 10;
  void clear_ischat();
  static const int kIsChatFieldNumber = 10;
  bool ischat() const;
  void set_ischat(bool value);

  // @@protoc_insertion_point(class_scope:proto.Lobby.UserSnapshot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr videochips_;
  ::google::protobuf::internal::ArenaStringPtr roulettechips_;
  ::google::protobuf::internal::ArenaStringPtr moneysort_;
  double balance_;
  ::google::protobuf::uint64 limits_;
  ::google::protobuf::int64 parentid_;
  ::google::protobuf::int64 uid_;
  bool istip_;
  bool ischat_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Lobby_TableSnapshot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Lobby.TableSnapshot) */ {
 public:
  Lobby_TableSnapshot();
  virtual ~Lobby_TableSnapshot();

  Lobby_TableSnapshot(const Lobby_TableSnapshot& from);

  inline Lobby_TableSnapshot& operator=(const Lobby_TableSnapshot& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lobby_TableSnapshot& default_instance();

  static inline const Lobby_TableSnapshot* internal_default_instance() {
    return reinterpret_cast<const Lobby_TableSnapshot*>(
               &_Lobby_TableSnapshot_default_instance_);
  }

  void Swap(Lobby_TableSnapshot* other);

  // implements Message ----------------------------------------------

  inline Lobby_TableSnapshot* New() const PROTOBUF_FINAL { return New(NULL); }

  Lobby_TableSnapshot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lobby_TableSnapshot& from);
  void MergeFrom(const Lobby_TableSnapshot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lobby_TableSnapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ways = 7;
  void clear_ways();
  static const int kWaysFieldNumber = 7;
  const ::std::string& ways() const;
  void set_ways(const ::std::string& value);
  #if LANG_CXX11
  void set_ways(::std::string&& value);
  #endif
  void set_ways(const char* value);
  void set_ways(const char* value, size_t size);
  ::std::string* mutable_ways();
  ::std::string* release_ways();
  void set_allocated_ways(::std::string* ways);

  // string counts = 8;
  void clear_counts();
  static const int kCountsFieldNumber = 8;
  const ::std::string& counts() const;
  void set_counts(const ::std::string& value);
  #if LANG_CXX11
  void set_counts(::std::string&& value);
  #endif
  void set_counts(const char* value);
  void set_counts(const char* value, size_t size);
  ::std::string* mutable_counts();
  ::std::string* release_counts();
  void set_allocated_counts(::std::string* counts);

  // string dealer = 10;
  void clear_dealer();
  static const int kDealerFieldNumber = 10;
  const ::std::string& dealer() const;
  void set_dealer(const ::std::string& value);
  #if LANG_CXX11
  void set_dealer(::std::string&& value);
  #endif
  void set_dealer(const char* value);
  void set_dealer(const char* value, size_t size);
  ::std::string* mutable_dealer();
  ::std::string* release_dealer();
  void set_allocated_dealer(::std::string* dealer);

  // string limit = 11;
  void clear_limit();
  static const int kLimitFieldNumber = 11;
  const ::std::string& limit() const;
  void set_limit(const ::std::string& value);
  #if LANG_CXX11
  void set_limit(::std::string&& value);
  #endif
  void set_limit(const char* value);
  void set_limit(const char* value, size_t size);
  ::std::string* mutable_limit();
  ::std::string* release_limit();
  void set_allocated_limit(::std::string* limit);

  // uint32 gameType = 1;
  void clear_gametype();
  static const int kGameTypeFieldNumber = 1;
  ::google::protobuf::uint32 gametype() const;
  void set_gametype(::google::protobuf::uint32 value);

  // uint32 tableID = 2;
  void clear_tableid();
  static const int kTableIDFieldNumber = 2;
  ::google::protobuf::uint32 tableid() const;
  void set_tableid(::google::protobuf::uint32 value);

  // int32 stage = 3;
  void clear_stage();
  static const int kStageFieldNumber = 3;
  ::google::protobuf::int32 stage() const;
  void set_stage(::google::protobuf::int32 value);

  // int32 inning = 4;
  void clear_inning();
  static const int kInningFieldNumber = 4;
  ::google::protobuf::int32 inning() const;
  void set_inning(::google::protobuf::int32 value);

  // uint32 status = 5;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // int32 time = 6;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // bool isopen = 9;
  void clear_isopen();
  static const int kIsopenFieldNumber = 9;
  bool isopen() const;
  void set_isopen(bool value);

  // uint32 platform = 12;
  void clear_platform();
  static const int kPlatformFieldNumber = 12;
  ::google::protobuf::uint32 platform() const;
  void set_platform(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.Lobby.TableSnapshot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ways_;
  ::google::protobuf::internal::ArenaStringPtr counts_;
  ::google::protobuf::internal::ArenaStringPtr dealer_;
  ::google::protobuf::internal::ArenaStringPtr limit_;
  ::google::protobuf::uint32 gametype_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::int32 stage_;
  ::google::protobuf::int32 inning_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::int32 time_;
  bool isopen_;
  ::google::protobuf::uint32 platform_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Lobby : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Lobby) */ {
 public:
  Lobby();
  virtual ~Lobby();

  Lobby(const Lobby& from);

  inline Lobby& operator=(const Lobby& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lobby& default_instance();

  static inline const Lobby* internal_default_instance() {
    return reinterpret_cast<const Lobby*>(
               &_Lobby_default_instance_);
  }

  void Swap(Lobby* other);

  // implements Message ----------------------------------------------

  inline Lobby* New() const PROTOBUF_FINAL { return New(NULL); }

  Lobby* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lobby& from);
  void MergeFrom(const Lobby& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lobby* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Lobby_UserSnapshot UserSnapshot;
  typedef Lobby_TableSnapshot TableSnapshot;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.Lobby)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Game_JoinTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Game.JoinTable) */ {
 public:
  Game_JoinTable();
  virtual ~Game_JoinTable();

  Game_JoinTable(const Game_JoinTable& from);

  inline Game_JoinTable& operator=(const Game_JoinTable& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game_JoinTable& default_instance();

  static inline const Game_JoinTable* internal_default_instance() {
    return reinterpret_cast<const Game_JoinTable*>(
               &_Game_JoinTable_default_instance_);
  }

  void Swap(Game_JoinTable* other);

  // implements Message ----------------------------------------------

  inline Game_JoinTable* New() const PROTOBUF_FINAL { return New(NULL); }

  Game_JoinTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Game_JoinTable& from);
  void MergeFrom(const Game_JoinTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Game_JoinTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 tableID = 1;
  void clear_tableid();
  static const int kTableIDFieldNumber = 1;
  ::google::protobuf::uint32 tableid() const;
  void set_tableid(::google::protobuf::uint32 value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.Game.JoinTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Game_LeaveTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Game.LeaveTable) */ {
 public:
  Game_LeaveTable();
  virtual ~Game_LeaveTable();

  Game_LeaveTable(const Game_LeaveTable& from);

  inline Game_LeaveTable& operator=(const Game_LeaveTable& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game_LeaveTable& default_instance();

  static inline const Game_LeaveTable* internal_default_instance() {
    return reinterpret_cast<const Game_LeaveTable*>(
               &_Game_LeaveTable_default_instance_);
  }

  void Swap(Game_LeaveTable* other);

  // implements Message ----------------------------------------------

  inline Game_LeaveTable* New() const PROTOBUF_FINAL { return New(NULL); }

  Game_LeaveTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Game_LeaveTable& from);
  void MergeFrom(const Game_LeaveTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Game_LeaveTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 tableID = 1;
  void clear_tableid();
  static const int kTableIDFieldNumber = 1;
  ::google::protobuf::uint32 tableid() const;
  void set_tableid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.Game.LeaveTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 tableid_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Game_Bet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Game.Bet) */ {
 public:
  Game_Bet();
  virtual ~Game_Bet();

  Game_Bet(const Game_Bet& from);

  inline Game_Bet& operator=(const Game_Bet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game_Bet& default_instance();

  static inline const Game_Bet* internal_default_instance() {
    return reinterpret_cast<const Game_Bet*>(
               &_Game_Bet_default_instance_);
  }

  void Swap(Game_Bet* other);

  // implements Message ----------------------------------------------

  inline Game_Bet* New() const PROTOBUF_FINAL { return New(NULL); }

  Game_Bet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Game_Bet& from);
  void MergeFrom(const Game_Bet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Game_Bet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, double> detail = 3;
  int detail_size() const;
  void clear_detail();
  static const int kDetailFieldNumber = 3;
  const ::google::protobuf::Map< ::google::protobuf::int32, double >&
      detail() const;
  ::google::protobuf::Map< ::google::protobuf::int32, double >*
      mutable_detail();

  // uint32 tableID = 1;
  void clear_tableid();
  static const int kTableIDFieldNumber = 1;
  ::google::protobuf::uint32 tableid() const;
  void set_tableid(::google::protobuf::uint32 value);

  // .proto.Game.Subtype subtype = 2;
  void clear_subtype();
  static const int kSubtypeFieldNumber = 2;
  ::proto::Game_Subtype subtype() const;
  void set_subtype(::proto::Game_Subtype value);

  // @@protoc_insertion_point(class_scope:proto.Game.Bet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::int32, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 >
      Game_Bet_DetailEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::int32, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > detail_;
  ::google::protobuf::uint32 tableid_;
  int subtype_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Game_Tip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Game.Tip) */ {
 public:
  Game_Tip();
  virtual ~Game_Tip();

  Game_Tip(const Game_Tip& from);

  inline Game_Tip& operator=(const Game_Tip& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game_Tip& default_instance();

  static inline const Game_Tip* internal_default_instance() {
    return reinterpret_cast<const Game_Tip*>(
               &_Game_Tip_default_instance_);
  }

  void Swap(Game_Tip* other);

  // implements Message ----------------------------------------------

  inline Game_Tip* New() const PROTOBUF_FINAL { return New(NULL); }

  Game_Tip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Game_Tip& from);
  void MergeFrom(const Game_Tip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Game_Tip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 tableID = 1;
  void clear_tableid();
  static const int kTableIDFieldNumber = 1;
  ::google::protobuf::uint32 tableid() const;
  void set_tableid(::google::protobuf::uint32 value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // double amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  double amount() const;
  void set_amount(double value);

  // @@protoc_insertion_point(class_scope:proto.Game.Tip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::int32 type_;
  double amount_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Game_UserSnapshot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Game.UserSnapshot) */ {
 public:
  Game_UserSnapshot();
  virtual ~Game_UserSnapshot();

  Game_UserSnapshot(const Game_UserSnapshot& from);

  inline Game_UserSnapshot& operator=(const Game_UserSnapshot& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game_UserSnapshot& default_instance();

  static inline const Game_UserSnapshot* internal_default_instance() {
    return reinterpret_cast<const Game_UserSnapshot*>(
               &_Game_UserSnapshot_default_instance_);
  }

  void Swap(Game_UserSnapshot* other);

  // implements Message ----------------------------------------------

  inline Game_UserSnapshot* New() const PROTOBUF_FINAL { return New(NULL); }

  Game_UserSnapshot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Game_UserSnapshot& from);
  void MergeFrom(const Game_UserSnapshot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Game_UserSnapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, double> betinfo = 8;
  int betinfo_size() const;
  void clear_betinfo();
  static const int kBetinfoFieldNumber = 8;
  const ::google::protobuf::Map< ::google::protobuf::int32, double >&
      betinfo() const;
  ::google::protobuf::Map< ::google::protobuf::int32, double >*
      mutable_betinfo();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // double balance = 2;
  void clear_balance();
  static const int kBalanceFieldNumber = 2;
  double balance() const;
  void set_balance(double value);

  // uint32 home = 3;
  void clear_home();
  static const int kHomeFieldNumber = 3;
  ::google::protobuf::uint32 home() const;
  void set_home(::google::protobuf::uint32 value);

  // uint32 vtable = 4;
  void clear_vtable();
  static const int kVtableFieldNumber = 4;
  ::google::protobuf::uint32 vtable() const;
  void set_vtable(::google::protobuf::uint32 value);

  // double winlose = 6;
  void clear_winlose();
  static const int kWinloseFieldNumber = 6;
  double winlose() const;
  void set_winlose(double value);

  // double totalbet = 7;
  void clear_totalbet();
  static const int kTotalbetFieldNumber = 7;
  double totalbet() const;
  void set_totalbet(double value);

  // uint32 vseat = 5;
  void clear_vseat();
  static const int kVseatFieldNumber = 5;
  ::google::protobuf::uint32 vseat() const;
  void set_vseat(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.Game.UserSnapshot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::int32, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 >
      Game_UserSnapshot_BetinfoEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::int32, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > betinfo_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double balance_;
  ::google::protobuf::uint32 home_;
  ::google::protobuf::uint32 vtable_;
  double winlose_;
  double totalbet_;
  ::google::protobuf::uint32 vseat_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Game_TableStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Game.TableStatus) */ {
 public:
  Game_TableStatus();
  virtual ~Game_TableStatus();

  Game_TableStatus(const Game_TableStatus& from);

  inline Game_TableStatus& operator=(const Game_TableStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game_TableStatus& default_instance();

  static inline const Game_TableStatus* internal_default_instance() {
    return reinterpret_cast<const Game_TableStatus*>(
               &_Game_TableStatus_default_instance_);
  }

  void Swap(Game_TableStatus* other);

  // implements Message ----------------------------------------------

  inline Game_TableStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  Game_TableStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Game_TableStatus& from);
  void MergeFrom(const Game_TableStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Game_TableStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, double> betinfo = 8;
  int betinfo_size() const;
  void clear_betinfo();
  static const int kBetinfoFieldNumber = 8;
  const ::google::protobuf::Map< ::google::protobuf::int32, double >&
      betinfo() const;
  ::google::protobuf::Map< ::google::protobuf::int32, double >*
      mutable_betinfo();

  // map<int32, double> vbetinfo = 9;
  int vbetinfo_size() const;
  void clear_vbetinfo();
  static const int kVbetinfoFieldNumber = 9;
  const ::google::protobuf::Map< ::google::protobuf::int32, double >&
      vbetinfo() const;
  ::google::protobuf::Map< ::google::protobuf::int32, double >*
      mutable_vbetinfo();

  // string poker = 6;
  void clear_poker();
  static const int kPokerFieldNumber = 6;
  const ::std::string& poker() const;
  void set_poker(const ::std::string& value);
  #if LANG_CXX11
  void set_poker(::std::string&& value);
  #endif
  void set_poker(const char* value);
  void set_poker(const char* value, size_t size);
  ::std::string* mutable_poker();
  ::std::string* release_poker();
  void set_allocated_poker(::std::string* poker);

  // string result = 7;
  void clear_result();
  static const int kResultFieldNumber = 7;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // uint32 tableID = 1;
  void clear_tableid();
  static const int kTableIDFieldNumber = 1;
  ::google::protobuf::uint32 tableid() const;
  void set_tableid(::google::protobuf::uint32 value);

  // int32 stage = 2;
  void clear_stage();
  static const int kStageFieldNumber = 2;
  ::google::protobuf::int32 stage() const;
  void set_stage(::google::protobuf::int32 value);

  // int32 inning = 3;
  void clear_inning();
  static const int kInningFieldNumber = 3;
  ::google::protobuf::int32 inning() const;
  void set_inning(::google::protobuf::int32 value);

  // uint32 status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // int32 time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // int32 pokerIndex = 11;
  void clear_pokerindex();
  static const int kPokerIndexFieldNumber = 11;
  ::google::protobuf::int32 pokerindex() const;
  void set_pokerindex(::google::protobuf::int32 value);

  // double winlose = 10;
  void clear_winlose();
  static const int kWinloseFieldNumber = 10;
  double winlose() const;
  void set_winlose(double value);

  // @@protoc_insertion_point(class_scope:proto.Game.TableStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::int32, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 >
      Game_TableStatus_BetinfoEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::int32, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > betinfo_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::int32, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 >
      Game_TableStatus_VbetinfoEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::int32, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > vbetinfo_;
  ::google::protobuf::internal::ArenaStringPtr poker_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::int32 stage_;
  ::google::protobuf::int32 inning_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 pokerindex_;
  double winlose_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Game_TableConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Game.TableConfig) */ {
 public:
  Game_TableConfig();
  virtual ~Game_TableConfig();

  Game_TableConfig(const Game_TableConfig& from);

  inline Game_TableConfig& operator=(const Game_TableConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game_TableConfig& default_instance();

  static inline const Game_TableConfig* internal_default_instance() {
    return reinterpret_cast<const Game_TableConfig*>(
               &_Game_TableConfig_default_instance_);
  }

  void Swap(Game_TableConfig* other);

  // implements Message ----------------------------------------------

  inline Game_TableConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  Game_TableConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Game_TableConfig& from);
  void MergeFrom(const Game_TableConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Game_TableConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string dealer = 4;
  void clear_dealer();
  static const int kDealerFieldNumber = 4;
  const ::std::string& dealer() const;
  void set_dealer(const ::std::string& value);
  #if LANG_CXX11
  void set_dealer(::std::string&& value);
  #endif
  void set_dealer(const char* value);
  void set_dealer(const char* value, size_t size);
  ::std::string* mutable_dealer();
  ::std::string* release_dealer();
  void set_allocated_dealer(::std::string* dealer);

  // string date = 5;
  void clear_date();
  static const int kDateFieldNumber = 5;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // string limit = 6;
  void clear_limit();
  static const int kLimitFieldNumber = 6;
  const ::std::string& limit() const;
  void set_limit(const ::std::string& value);
  #if LANG_CXX11
  void set_limit(::std::string&& value);
  #endif
  void set_limit(const char* value);
  void set_limit(const char* value, size_t size);
  ::std::string* mutable_limit();
  ::std::string* release_limit();
  void set_allocated_limit(::std::string* limit);

  // uint32 tableID = 1;
  void clear_tableid();
  static const int kTableIDFieldNumber = 1;
  ::google::protobuf::uint32 tableid() const;
  void set_tableid(::google::protobuf::uint32 value);

  // int32 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.Game.TableConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr dealer_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr limit_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::int32 time_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Game_TableHistory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Game.TableHistory) */ {
 public:
  Game_TableHistory();
  virtual ~Game_TableHistory();

  Game_TableHistory(const Game_TableHistory& from);

  inline Game_TableHistory& operator=(const Game_TableHistory& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game_TableHistory& default_instance();

  static inline const Game_TableHistory* internal_default_instance() {
    return reinterpret_cast<const Game_TableHistory*>(
               &_Game_TableHistory_default_instance_);
  }

  void Swap(Game_TableHistory* other);

  // implements Message ----------------------------------------------

  inline Game_TableHistory* New() const PROTOBUF_FINAL { return New(NULL); }

  Game_TableHistory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Game_TableHistory& from);
  void MergeFrom(const Game_TableHistory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Game_TableHistory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string way = 2;
  void clear_way();
  static const int kWayFieldNumber = 2;
  const ::std::string& way() const;
  void set_way(const ::std::string& value);
  #if LANG_CXX11
  void set_way(::std::string&& value);
  #endif
  void set_way(const char* value);
  void set_way(const char* value, size_t size);
  ::std::string* mutable_way();
  ::std::string* release_way();
  void set_allocated_way(::std::string* way);

  // string counts = 3;
  void clear_counts();
  static const int kCountsFieldNumber = 3;
  const ::std::string& counts() const;
  void set_counts(const ::std::string& value);
  #if LANG_CXX11
  void set_counts(::std::string&& value);
  #endif
  void set_counts(const char* value);
  void set_counts(const char* value, size_t size);
  ::std::string* mutable_counts();
  ::std::string* release_counts();
  void set_allocated_counts(::std::string* counts);

  // string poker = 4;
  void clear_poker();
  static const int kPokerFieldNumber = 4;
  const ::std::string& poker() const;
  void set_poker(const ::std::string& value);
  #if LANG_CXX11
  void set_poker(::std::string&& value);
  #endif
  void set_poker(const char* value);
  void set_poker(const char* value, size_t size);
  ::std::string* mutable_poker();
  ::std::string* release_poker();
  void set_allocated_poker(::std::string* poker);

  // uint32 tableID = 1;
  void clear_tableid();
  static const int kTableIDFieldNumber = 1;
  ::google::protobuf::uint32 tableid() const;
  void set_tableid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.Game.TableHistory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr way_;
  ::google::protobuf::internal::ArenaStringPtr counts_;
  ::google::protobuf::internal::ArenaStringPtr poker_;
  ::google::protobuf::uint32 tableid_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Game_VirtualTable_Seat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Game.VirtualTable.Seat) */ {
 public:
  Game_VirtualTable_Seat();
  virtual ~Game_VirtualTable_Seat();

  Game_VirtualTable_Seat(const Game_VirtualTable_Seat& from);

  inline Game_VirtualTable_Seat& operator=(const Game_VirtualTable_Seat& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game_VirtualTable_Seat& default_instance();

  static inline const Game_VirtualTable_Seat* internal_default_instance() {
    return reinterpret_cast<const Game_VirtualTable_Seat*>(
               &_Game_VirtualTable_Seat_default_instance_);
  }

  void Swap(Game_VirtualTable_Seat* other);

  // implements Message ----------------------------------------------

  inline Game_VirtualTable_Seat* New() const PROTOBUF_FINAL { return New(NULL); }

  Game_VirtualTable_Seat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Game_VirtualTable_Seat& from);
  void MergeFrom(const Game_VirtualTable_Seat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Game_VirtualTable_Seat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, double> betinfo = 5;
  int betinfo_size() const;
  void clear_betinfo();
  static const int kBetinfoFieldNumber = 5;
  const ::google::protobuf::Map< ::google::protobuf::int32, double >&
      betinfo() const;
  ::google::protobuf::Map< ::google::protobuf::int32, double >*
      mutable_betinfo();

  // string uname = 1;
  void clear_uname();
  static const int kUnameFieldNumber = 1;
  const ::std::string& uname() const;
  void set_uname(const ::std::string& value);
  #if LANG_CXX11
  void set_uname(::std::string&& value);
  #endif
  void set_uname(const char* value);
  void set_uname(const char* value, size_t size);
  ::std::string* mutable_uname();
  ::std::string* release_uname();
  void set_allocated_uname(::std::string* uname);

  // string avatar = 4;
  void clear_avatar();
  static const int kAvatarFieldNumber = 4;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_avatar(::std::string&& value);
  #endif
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // int64 uid = 2;
  void clear_uid();
  static const int kUidFieldNumber = 2;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // double balance = 3;
  void clear_balance();
  static const int kBalanceFieldNumber = 3;
  double balance() const;
  void set_balance(double value);

  // uint32 seatID = 6;
  void clear_seatid();
  static const int kSeatIDFieldNumber = 6;
  ::google::protobuf::uint32 seatid() const;
  void set_seatid(::google::protobuf::uint32 value);

  // bool isSeat = 7;
  void clear_isseat();
  static const int kIsSeatFieldNumber = 7;
  bool isseat() const;
  void set_isseat(bool value);

  // @@protoc_insertion_point(class_scope:proto.Game.VirtualTable.Seat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::int32, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 >
      Game_VirtualTable_Seat_BetinfoEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::int32, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > betinfo_;
  ::google::protobuf::internal::ArenaStringPtr uname_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  ::google::protobuf::int64 uid_;
  double balance_;
  ::google::protobuf::uint32 seatid_;
  bool isseat_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Game_VirtualTable_Table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Game.VirtualTable.Table) */ {
 public:
  Game_VirtualTable_Table();
  virtual ~Game_VirtualTable_Table();

  Game_VirtualTable_Table(const Game_VirtualTable_Table& from);

  inline Game_VirtualTable_Table& operator=(const Game_VirtualTable_Table& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game_VirtualTable_Table& default_instance();

  static inline const Game_VirtualTable_Table* internal_default_instance() {
    return reinterpret_cast<const Game_VirtualTable_Table*>(
               &_Game_VirtualTable_Table_default_instance_);
  }

  void Swap(Game_VirtualTable_Table* other);

  // implements Message ----------------------------------------------

  inline Game_VirtualTable_Table* New() const PROTOBUF_FINAL { return New(NULL); }

  Game_VirtualTable_Table* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Game_VirtualTable_Table& from);
  void MergeFrom(const Game_VirtualTable_Table& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Game_VirtualTable_Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .proto.Game.VirtualTable.Seat> seats = 3;
  int seats_size() const;
  void clear_seats();
  static const int kSeatsFieldNumber = 3;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat >&
      seats() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat >*
      mutable_seats();

  // uint32 tableID = 1;
  void clear_tableid();
  static const int kTableIDFieldNumber = 1;
  ::google::protobuf::uint32 tableid() const;
  void set_tableid(::google::protobuf::uint32 value);

  // uint32 maxSeatNum = 2;
  void clear_maxseatnum();
  static const int kMaxSeatNumFieldNumber = 2;
  ::google::protobuf::uint32 maxseatnum() const;
  void set_maxseatnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.Game.VirtualTable.Table)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Game_VirtualTable_Table_SeatsEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > seats_;
  ::google::protobuf::uint32 tableid_;
  ::google::protobuf::uint32 maxseatnum_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Game_VirtualTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Game.VirtualTable) */ {
 public:
  Game_VirtualTable();
  virtual ~Game_VirtualTable();

  Game_VirtualTable(const Game_VirtualTable& from);

  inline Game_VirtualTable& operator=(const Game_VirtualTable& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game_VirtualTable& default_instance();

  static inline const Game_VirtualTable* internal_default_instance() {
    return reinterpret_cast<const Game_VirtualTable*>(
               &_Game_VirtualTable_default_instance_);
  }

  void Swap(Game_VirtualTable* other);

  // implements Message ----------------------------------------------

  inline Game_VirtualTable* New() const PROTOBUF_FINAL { return New(NULL); }

  Game_VirtualTable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Game_VirtualTable& from);
  void MergeFrom(const Game_VirtualTable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Game_VirtualTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Game_VirtualTable_Seat Seat;
  typedef Game_VirtualTable_Table Table;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.Game.VirtualTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Game : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Game) */ {
 public:
  Game();
  virtual ~Game();

  Game(const Game& from);

  inline Game& operator=(const Game& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game& default_instance();

  static inline const Game* internal_default_instance() {
    return reinterpret_cast<const Game*>(
               &_Game_default_instance_);
  }

  void Swap(Game* other);

  // implements Message ----------------------------------------------

  inline Game* New() const PROTOBUF_FINAL { return New(NULL); }

  Game* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Game& from);
  void MergeFrom(const Game& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Game* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Game_JoinTable JoinTable;
  typedef Game_LeaveTable LeaveTable;
  typedef Game_Bet Bet;
  typedef Game_Tip Tip;
  typedef Game_UserSnapshot UserSnapshot;
  typedef Game_TableStatus TableStatus;
  typedef Game_TableConfig TableConfig;
  typedef Game_TableHistory TableHistory;
  typedef Game_VirtualTable VirtualTable;

  typedef Game_Subtype Subtype;
  static const Subtype UnKnow =
    Game_Subtype_UnKnow;
  static const Subtype ClassicBaccarat =
    Game_Subtype_ClassicBaccarat;
  static const Subtype MianYongBaccarat =
    Game_Subtype_MianYongBaccarat;
  static const Subtype SuperBaccarat =
    Game_Subtype_SuperBaccarat;
  static const Subtype ChainBaccarat =
    Game_Subtype_ChainBaccarat;
  static const Subtype MianYongChainBaccarat =
    Game_Subtype_MianYongChainBaccarat;
  static const Subtype LongHu =
    Game_Subtype_LongHu;
  static const Subtype Roulette =
    Game_Subtype_Roulette;
  static const Subtype SicBo =
    Game_Subtype_SicBo;
  static const Subtype FanTan =
    Game_Subtype_FanTan;
  static const Subtype TexasPoker =
    Game_Subtype_TexasPoker;
  static inline bool Subtype_IsValid(int value) {
    return Game_Subtype_IsValid(value);
  }
  static const Subtype Subtype_MIN =
    Game_Subtype_Subtype_MIN;
  static const Subtype Subtype_MAX =
    Game_Subtype_Subtype_MAX;
  static const int Subtype_ARRAYSIZE =
    Game_Subtype_Subtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Subtype_descriptor() {
    return Game_Subtype_descriptor();
  }
  static inline const ::std::string& Subtype_Name(Subtype value) {
    return Game_Subtype_Name(value);
  }
  static inline bool Subtype_Parse(const ::std::string& name,
      Subtype* value) {
    return Game_Subtype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.Game)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_client_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Test_Oneof

// string name = 1;
inline bool Test_Oneof::has_name() const {
  return test_oneof_case() == kName;
}
inline void Test_Oneof::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void Test_Oneof::clear_name() {
  if (has_name()) {
    test_oneof_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_test_oneof();
  }
}
inline const ::std::string& Test_Oneof::name() const {
  // @@protoc_insertion_point(field_get:proto.Test.Oneof.name)
  if (has_name()) {
    return test_oneof_.name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Test_Oneof::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.Test.Oneof.name)
  if (!has_name()) {
    clear_test_oneof();
    set_has_name();
    test_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Test.Oneof.name)
}
#if LANG_CXX11
inline void Test_Oneof::set_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.Test.Oneof.name)
  if (!has_name()) {
    clear_test_oneof();
    set_has_name();
    test_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Test.Oneof.name)
}
#endif
inline void Test_Oneof::set_name(const char* value) {
  if (!has_name()) {
    clear_test_oneof();
    set_has_name();
    test_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Test.Oneof.name)
}
inline void Test_Oneof::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_test_oneof();
    set_has_name();
    test_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  test_oneof_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Test.Oneof.name)
}
inline ::std::string* Test_Oneof::mutable_name() {
  if (!has_name()) {
    clear_test_oneof();
    set_has_name();
    test_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:proto.Test.Oneof.name)
  return test_oneof_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test_Oneof::release_name() {
  // @@protoc_insertion_point(field_release:proto.Test.Oneof.name)
  if (has_name()) {
    clear_has_test_oneof();
    return test_oneof_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Test_Oneof::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    test_oneof_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_test_oneof();
  if (name != NULL) {
    set_has_name();
    test_oneof_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Test.Oneof.name)
}

// int32 age = 2;
inline bool Test_Oneof::has_age() const {
  return test_oneof_case() == kAge;
}
inline void Test_Oneof::set_has_age() {
  _oneof_case_[0] = kAge;
}
inline void Test_Oneof::clear_age() {
  if (has_age()) {
    test_oneof_.age_ = 0;
    clear_has_test_oneof();
  }
}
inline ::google::protobuf::int32 Test_Oneof::age() const {
  // @@protoc_insertion_point(field_get:proto.Test.Oneof.age)
  if (has_age()) {
    return test_oneof_.age_;
  }
  return 0;
}
inline void Test_Oneof::set_age(::google::protobuf::int32 value) {
  if (!has_age()) {
    clear_test_oneof();
    set_has_age();
  }
  test_oneof_.age_ = value;
  // @@protoc_insertion_point(field_set:proto.Test.Oneof.age)
}

inline bool Test_Oneof::has_test_oneof() const {
  return test_oneof_case() != TEST_ONEOF_NOT_SET;
}
inline void Test_Oneof::clear_has_test_oneof() {
  _oneof_case_[0] = TEST_ONEOF_NOT_SET;
}
inline Test_Oneof::TestOneofCase Test_Oneof::test_oneof_case() const {
  return Test_Oneof::TestOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Test_Map

// map<uint32, double> body = 1;
inline int Test_Map::body_size() const {
  return body_.size();
}
inline void Test_Map::clear_body() {
  body_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, double >&
Test_Map::body() const {
  // @@protoc_insertion_point(field_map:proto.Test.Map.body)
  return body_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, double >*
Test_Map::mutable_body() {
  // @@protoc_insertion_point(field_mutable_map:proto.Test.Map.body)
  return body_.MutableMap();
}

// -------------------------------------------------------------------

// Test

// -------------------------------------------------------------------

// CommonReply

// int32 code = 1;
inline void CommonReply::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 CommonReply::code() const {
  // @@protoc_insertion_point(field_get:proto.CommonReply.code)
  return code_;
}
inline void CommonReply::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:proto.CommonReply.code)
}

// string desc = 2;
inline void CommonReply::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonReply::desc() const {
  // @@protoc_insertion_point(field_get:proto.CommonReply.desc)
  return desc_.GetNoArena();
}
inline void CommonReply::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CommonReply.desc)
}
#if LANG_CXX11
inline void CommonReply::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.CommonReply.desc)
}
#endif
inline void CommonReply::set_desc(const char* value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CommonReply.desc)
}
inline void CommonReply::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CommonReply.desc)
}
inline ::std::string* CommonReply::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:proto.CommonReply.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonReply::release_desc() {
  // @@protoc_insertion_point(field_release:proto.CommonReply.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonReply::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:proto.CommonReply.desc)
}

// -------------------------------------------------------------------

// AutoID

// int64 id = 1;
inline void AutoID::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AutoID::id() const {
  // @@protoc_insertion_point(field_get:proto.AutoID.id)
  return id_;
}
inline void AutoID::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.AutoID.id)
}

// -------------------------------------------------------------------

// String

// string str = 1;
inline void String::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& String::str() const {
  // @@protoc_insertion_point(field_get:proto.String.str)
  return str_.GetNoArena();
}
inline void String::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.String.str)
}
#if LANG_CXX11
inline void String::set_str(::std::string&& value) {
  
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.String.str)
}
#endif
inline void String::set_str(const char* value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.String.str)
}
inline void String::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.String.str)
}
inline ::std::string* String::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:proto.String.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* String::release_str() {
  // @@protoc_insertion_point(field_release:proto.String.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void String::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:proto.String.str)
}

// -------------------------------------------------------------------

// UserRequest_LobbyLogin

// string name = 1;
inline void UserRequest_LobbyLogin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRequest_LobbyLogin::name() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.LobbyLogin.name)
  return name_.GetNoArena();
}
inline void UserRequest_LobbyLogin::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.UserRequest.LobbyLogin.name)
}
#if LANG_CXX11
inline void UserRequest_LobbyLogin::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UserRequest.LobbyLogin.name)
}
#endif
inline void UserRequest_LobbyLogin::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UserRequest.LobbyLogin.name)
}
inline void UserRequest_LobbyLogin::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UserRequest.LobbyLogin.name)
}
inline ::std::string* UserRequest_LobbyLogin::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.UserRequest.LobbyLogin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRequest_LobbyLogin::release_name() {
  // @@protoc_insertion_point(field_release:proto.UserRequest.LobbyLogin.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRequest_LobbyLogin::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.UserRequest.LobbyLogin.name)
}

// string passwd = 2;
inline void UserRequest_LobbyLogin::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRequest_LobbyLogin::passwd() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.LobbyLogin.passwd)
  return passwd_.GetNoArena();
}
inline void UserRequest_LobbyLogin::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.UserRequest.LobbyLogin.passwd)
}
#if LANG_CXX11
inline void UserRequest_LobbyLogin::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UserRequest.LobbyLogin.passwd)
}
#endif
inline void UserRequest_LobbyLogin::set_passwd(const char* value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UserRequest.LobbyLogin.passwd)
}
inline void UserRequest_LobbyLogin::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UserRequest.LobbyLogin.passwd)
}
inline ::std::string* UserRequest_LobbyLogin::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:proto.UserRequest.LobbyLogin.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRequest_LobbyLogin::release_passwd() {
  // @@protoc_insertion_point(field_release:proto.UserRequest.LobbyLogin.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRequest_LobbyLogin::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:proto.UserRequest.LobbyLogin.passwd)
}

// string way = 3;
inline void UserRequest_LobbyLogin::clear_way() {
  way_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRequest_LobbyLogin::way() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.LobbyLogin.way)
  return way_.GetNoArena();
}
inline void UserRequest_LobbyLogin::set_way(const ::std::string& value) {
  
  way_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.UserRequest.LobbyLogin.way)
}
#if LANG_CXX11
inline void UserRequest_LobbyLogin::set_way(::std::string&& value) {
  
  way_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UserRequest.LobbyLogin.way)
}
#endif
inline void UserRequest_LobbyLogin::set_way(const char* value) {
  
  way_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UserRequest.LobbyLogin.way)
}
inline void UserRequest_LobbyLogin::set_way(const char* value, size_t size) {
  
  way_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UserRequest.LobbyLogin.way)
}
inline ::std::string* UserRequest_LobbyLogin::mutable_way() {
  
  // @@protoc_insertion_point(field_mutable:proto.UserRequest.LobbyLogin.way)
  return way_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRequest_LobbyLogin::release_way() {
  // @@protoc_insertion_point(field_release:proto.UserRequest.LobbyLogin.way)
  
  return way_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRequest_LobbyLogin::set_allocated_way(::std::string* way) {
  if (way != NULL) {
    
  } else {
    
  }
  way_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), way);
  // @@protoc_insertion_point(field_set_allocated:proto.UserRequest.LobbyLogin.way)
}

// string ip = 4;
inline void UserRequest_LobbyLogin::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRequest_LobbyLogin::ip() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.LobbyLogin.ip)
  return ip_.GetNoArena();
}
inline void UserRequest_LobbyLogin::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.UserRequest.LobbyLogin.ip)
}
#if LANG_CXX11
inline void UserRequest_LobbyLogin::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UserRequest.LobbyLogin.ip)
}
#endif
inline void UserRequest_LobbyLogin::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UserRequest.LobbyLogin.ip)
}
inline void UserRequest_LobbyLogin::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UserRequest.LobbyLogin.ip)
}
inline ::std::string* UserRequest_LobbyLogin::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:proto.UserRequest.LobbyLogin.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRequest_LobbyLogin::release_ip() {
  // @@protoc_insertion_point(field_release:proto.UserRequest.LobbyLogin.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRequest_LobbyLogin::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:proto.UserRequest.LobbyLogin.ip)
}

// uint32 platform = 5;
inline void UserRequest_LobbyLogin::clear_platform() {
  platform_ = 0u;
}
inline ::google::protobuf::uint32 UserRequest_LobbyLogin::platform() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.LobbyLogin.platform)
  return platform_;
}
inline void UserRequest_LobbyLogin::set_platform(::google::protobuf::uint32 value) {
  
  platform_ = value;
  // @@protoc_insertion_point(field_set:proto.UserRequest.LobbyLogin.platform)
}

// -------------------------------------------------------------------

// UserRequest_NilBody

// -------------------------------------------------------------------

// UserRequest_GameLogin

// .proto.GameType gameID = 1;
inline void UserRequest_GameLogin::clear_gameid() {
  gameid_ = 0;
}
inline ::proto::GameType UserRequest_GameLogin::gameid() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.GameLogin.gameID)
  return static_cast< ::proto::GameType >(gameid_);
}
inline void UserRequest_GameLogin::set_gameid(::proto::GameType value) {
  
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.UserRequest.GameLogin.gameID)
}

// uint32 tableID = 2;
inline void UserRequest_GameLogin::clear_tableid() {
  tableid_ = 0u;
}
inline ::google::protobuf::uint32 UserRequest_GameLogin::tableid() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.GameLogin.tableID)
  return tableid_;
}
inline void UserRequest_GameLogin::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.UserRequest.GameLogin.tableID)
}

// -------------------------------------------------------------------

// UserRequest_GameExit

// .proto.GameType gameID = 1;
inline void UserRequest_GameExit::clear_gameid() {
  gameid_ = 0;
}
inline ::proto::GameType UserRequest_GameExit::gameid() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.GameExit.gameID)
  return static_cast< ::proto::GameType >(gameid_);
}
inline void UserRequest_GameExit::set_gameid(::proto::GameType value) {
  
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.UserRequest.GameExit.gameID)
}

// -------------------------------------------------------------------

// UserRequest

// -------------------------------------------------------------------

// Lobby_UserSnapshot

// string name = 1;
inline void Lobby_UserSnapshot::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Lobby_UserSnapshot::name() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.name)
  return name_.GetNoArena();
}
inline void Lobby_UserSnapshot::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.name)
}
#if LANG_CXX11
inline void Lobby_UserSnapshot::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.UserSnapshot.name)
}
#endif
inline void Lobby_UserSnapshot::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.UserSnapshot.name)
}
inline void Lobby_UserSnapshot::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.UserSnapshot.name)
}
inline ::std::string* Lobby_UserSnapshot::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.UserSnapshot.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lobby_UserSnapshot::release_name() {
  // @@protoc_insertion_point(field_release:proto.Lobby.UserSnapshot.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lobby_UserSnapshot::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.UserSnapshot.name)
}

// string nick = 2;
inline void Lobby_UserSnapshot::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Lobby_UserSnapshot::nick() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.nick)
  return nick_.GetNoArena();
}
inline void Lobby_UserSnapshot::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.nick)
}
#if LANG_CXX11
inline void Lobby_UserSnapshot::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.UserSnapshot.nick)
}
#endif
inline void Lobby_UserSnapshot::set_nick(const char* value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.UserSnapshot.nick)
}
inline void Lobby_UserSnapshot::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.UserSnapshot.nick)
}
inline ::std::string* Lobby_UserSnapshot::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.UserSnapshot.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lobby_UserSnapshot::release_nick() {
  // @@protoc_insertion_point(field_release:proto.Lobby.UserSnapshot.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lobby_UserSnapshot::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.UserSnapshot.nick)
}

// double balance = 3;
inline void Lobby_UserSnapshot::clear_balance() {
  balance_ = 0;
}
inline double Lobby_UserSnapshot::balance() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.balance)
  return balance_;
}
inline void Lobby_UserSnapshot::set_balance(double value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.balance)
}

// string videoChips = 4;
inline void Lobby_UserSnapshot::clear_videochips() {
  videochips_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Lobby_UserSnapshot::videochips() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.videoChips)
  return videochips_.GetNoArena();
}
inline void Lobby_UserSnapshot::set_videochips(const ::std::string& value) {
  
  videochips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.videoChips)
}
#if LANG_CXX11
inline void Lobby_UserSnapshot::set_videochips(::std::string&& value) {
  
  videochips_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.UserSnapshot.videoChips)
}
#endif
inline void Lobby_UserSnapshot::set_videochips(const char* value) {
  
  videochips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.UserSnapshot.videoChips)
}
inline void Lobby_UserSnapshot::set_videochips(const char* value, size_t size) {
  
  videochips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.UserSnapshot.videoChips)
}
inline ::std::string* Lobby_UserSnapshot::mutable_videochips() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.UserSnapshot.videoChips)
  return videochips_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lobby_UserSnapshot::release_videochips() {
  // @@protoc_insertion_point(field_release:proto.Lobby.UserSnapshot.videoChips)
  
  return videochips_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lobby_UserSnapshot::set_allocated_videochips(::std::string* videochips) {
  if (videochips != NULL) {
    
  } else {
    
  }
  videochips_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videochips);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.UserSnapshot.videoChips)
}

// string rouletteChips = 5;
inline void Lobby_UserSnapshot::clear_roulettechips() {
  roulettechips_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Lobby_UserSnapshot::roulettechips() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.rouletteChips)
  return roulettechips_.GetNoArena();
}
inline void Lobby_UserSnapshot::set_roulettechips(const ::std::string& value) {
  
  roulettechips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.rouletteChips)
}
#if LANG_CXX11
inline void Lobby_UserSnapshot::set_roulettechips(::std::string&& value) {
  
  roulettechips_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.UserSnapshot.rouletteChips)
}
#endif
inline void Lobby_UserSnapshot::set_roulettechips(const char* value) {
  
  roulettechips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.UserSnapshot.rouletteChips)
}
inline void Lobby_UserSnapshot::set_roulettechips(const char* value, size_t size) {
  
  roulettechips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.UserSnapshot.rouletteChips)
}
inline ::std::string* Lobby_UserSnapshot::mutable_roulettechips() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.UserSnapshot.rouletteChips)
  return roulettechips_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lobby_UserSnapshot::release_roulettechips() {
  // @@protoc_insertion_point(field_release:proto.Lobby.UserSnapshot.rouletteChips)
  
  return roulettechips_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lobby_UserSnapshot::set_allocated_roulettechips(::std::string* roulettechips) {
  if (roulettechips != NULL) {
    
  } else {
    
  }
  roulettechips_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roulettechips);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.UserSnapshot.rouletteChips)
}

// uint64 limits = 6;
inline void Lobby_UserSnapshot::clear_limits() {
  limits_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Lobby_UserSnapshot::limits() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.limits)
  return limits_;
}
inline void Lobby_UserSnapshot::set_limits(::google::protobuf::uint64 value) {
  
  limits_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.limits)
}

// string moneysort = 7;
inline void Lobby_UserSnapshot::clear_moneysort() {
  moneysort_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Lobby_UserSnapshot::moneysort() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.moneysort)
  return moneysort_.GetNoArena();
}
inline void Lobby_UserSnapshot::set_moneysort(const ::std::string& value) {
  
  moneysort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.moneysort)
}
#if LANG_CXX11
inline void Lobby_UserSnapshot::set_moneysort(::std::string&& value) {
  
  moneysort_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.UserSnapshot.moneysort)
}
#endif
inline void Lobby_UserSnapshot::set_moneysort(const char* value) {
  
  moneysort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.UserSnapshot.moneysort)
}
inline void Lobby_UserSnapshot::set_moneysort(const char* value, size_t size) {
  
  moneysort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.UserSnapshot.moneysort)
}
inline ::std::string* Lobby_UserSnapshot::mutable_moneysort() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.UserSnapshot.moneysort)
  return moneysort_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lobby_UserSnapshot::release_moneysort() {
  // @@protoc_insertion_point(field_release:proto.Lobby.UserSnapshot.moneysort)
  
  return moneysort_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lobby_UserSnapshot::set_allocated_moneysort(::std::string* moneysort) {
  if (moneysort != NULL) {
    
  } else {
    
  }
  moneysort_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moneysort);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.UserSnapshot.moneysort)
}

// int64 parentID = 8;
inline void Lobby_UserSnapshot::clear_parentid() {
  parentid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Lobby_UserSnapshot::parentid() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.parentID)
  return parentid_;
}
inline void Lobby_UserSnapshot::set_parentid(::google::protobuf::int64 value) {
  
  parentid_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.parentID)
}

// bool isTip = 9;
inline void Lobby_UserSnapshot::clear_istip() {
  istip_ = false;
}
inline bool Lobby_UserSnapshot::istip() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.isTip)
  return istip_;
}
inline void Lobby_UserSnapshot::set_istip(bool value) {
  
  istip_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.isTip)
}

// bool isChat = 10;
inline void Lobby_UserSnapshot::clear_ischat() {
  ischat_ = false;
}
inline bool Lobby_UserSnapshot::ischat() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.isChat)
  return ischat_;
}
inline void Lobby_UserSnapshot::set_ischat(bool value) {
  
  ischat_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.isChat)
}

// int64 uid = 11;
inline void Lobby_UserSnapshot::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Lobby_UserSnapshot::uid() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.UserSnapshot.uid)
  return uid_;
}
inline void Lobby_UserSnapshot::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.UserSnapshot.uid)
}

// -------------------------------------------------------------------

// Lobby_TableSnapshot

// uint32 gameType = 1;
inline void Lobby_TableSnapshot::clear_gametype() {
  gametype_ = 0u;
}
inline ::google::protobuf::uint32 Lobby_TableSnapshot::gametype() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.gameType)
  return gametype_;
}
inline void Lobby_TableSnapshot::set_gametype(::google::protobuf::uint32 value) {
  
  gametype_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.gameType)
}

// uint32 tableID = 2;
inline void Lobby_TableSnapshot::clear_tableid() {
  tableid_ = 0u;
}
inline ::google::protobuf::uint32 Lobby_TableSnapshot::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.tableID)
  return tableid_;
}
inline void Lobby_TableSnapshot::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.tableID)
}

// int32 stage = 3;
inline void Lobby_TableSnapshot::clear_stage() {
  stage_ = 0;
}
inline ::google::protobuf::int32 Lobby_TableSnapshot::stage() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.stage)
  return stage_;
}
inline void Lobby_TableSnapshot::set_stage(::google::protobuf::int32 value) {
  
  stage_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.stage)
}

// int32 inning = 4;
inline void Lobby_TableSnapshot::clear_inning() {
  inning_ = 0;
}
inline ::google::protobuf::int32 Lobby_TableSnapshot::inning() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.inning)
  return inning_;
}
inline void Lobby_TableSnapshot::set_inning(::google::protobuf::int32 value) {
  
  inning_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.inning)
}

// uint32 status = 5;
inline void Lobby_TableSnapshot::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 Lobby_TableSnapshot::status() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.status)
  return status_;
}
inline void Lobby_TableSnapshot::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.status)
}

// int32 time = 6;
inline void Lobby_TableSnapshot::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 Lobby_TableSnapshot::time() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.time)
  return time_;
}
inline void Lobby_TableSnapshot::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.time)
}

// string ways = 7;
inline void Lobby_TableSnapshot::clear_ways() {
  ways_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Lobby_TableSnapshot::ways() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.ways)
  return ways_.GetNoArena();
}
inline void Lobby_TableSnapshot::set_ways(const ::std::string& value) {
  
  ways_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.ways)
}
#if LANG_CXX11
inline void Lobby_TableSnapshot::set_ways(::std::string&& value) {
  
  ways_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.TableSnapshot.ways)
}
#endif
inline void Lobby_TableSnapshot::set_ways(const char* value) {
  
  ways_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.TableSnapshot.ways)
}
inline void Lobby_TableSnapshot::set_ways(const char* value, size_t size) {
  
  ways_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.TableSnapshot.ways)
}
inline ::std::string* Lobby_TableSnapshot::mutable_ways() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.TableSnapshot.ways)
  return ways_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lobby_TableSnapshot::release_ways() {
  // @@protoc_insertion_point(field_release:proto.Lobby.TableSnapshot.ways)
  
  return ways_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lobby_TableSnapshot::set_allocated_ways(::std::string* ways) {
  if (ways != NULL) {
    
  } else {
    
  }
  ways_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ways);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.TableSnapshot.ways)
}

// string counts = 8;
inline void Lobby_TableSnapshot::clear_counts() {
  counts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Lobby_TableSnapshot::counts() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.counts)
  return counts_.GetNoArena();
}
inline void Lobby_TableSnapshot::set_counts(const ::std::string& value) {
  
  counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.counts)
}
#if LANG_CXX11
inline void Lobby_TableSnapshot::set_counts(::std::string&& value) {
  
  counts_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.TableSnapshot.counts)
}
#endif
inline void Lobby_TableSnapshot::set_counts(const char* value) {
  
  counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.TableSnapshot.counts)
}
inline void Lobby_TableSnapshot::set_counts(const char* value, size_t size) {
  
  counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.TableSnapshot.counts)
}
inline ::std::string* Lobby_TableSnapshot::mutable_counts() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.TableSnapshot.counts)
  return counts_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lobby_TableSnapshot::release_counts() {
  // @@protoc_insertion_point(field_release:proto.Lobby.TableSnapshot.counts)
  
  return counts_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lobby_TableSnapshot::set_allocated_counts(::std::string* counts) {
  if (counts != NULL) {
    
  } else {
    
  }
  counts_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), counts);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.TableSnapshot.counts)
}

// bool isopen = 9;
inline void Lobby_TableSnapshot::clear_isopen() {
  isopen_ = false;
}
inline bool Lobby_TableSnapshot::isopen() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.isopen)
  return isopen_;
}
inline void Lobby_TableSnapshot::set_isopen(bool value) {
  
  isopen_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.isopen)
}

// string dealer = 10;
inline void Lobby_TableSnapshot::clear_dealer() {
  dealer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Lobby_TableSnapshot::dealer() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.dealer)
  return dealer_.GetNoArena();
}
inline void Lobby_TableSnapshot::set_dealer(const ::std::string& value) {
  
  dealer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.dealer)
}
#if LANG_CXX11
inline void Lobby_TableSnapshot::set_dealer(::std::string&& value) {
  
  dealer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.TableSnapshot.dealer)
}
#endif
inline void Lobby_TableSnapshot::set_dealer(const char* value) {
  
  dealer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.TableSnapshot.dealer)
}
inline void Lobby_TableSnapshot::set_dealer(const char* value, size_t size) {
  
  dealer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.TableSnapshot.dealer)
}
inline ::std::string* Lobby_TableSnapshot::mutable_dealer() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.TableSnapshot.dealer)
  return dealer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lobby_TableSnapshot::release_dealer() {
  // @@protoc_insertion_point(field_release:proto.Lobby.TableSnapshot.dealer)
  
  return dealer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lobby_TableSnapshot::set_allocated_dealer(::std::string* dealer) {
  if (dealer != NULL) {
    
  } else {
    
  }
  dealer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dealer);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.TableSnapshot.dealer)
}

// string limit = 11;
inline void Lobby_TableSnapshot::clear_limit() {
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Lobby_TableSnapshot::limit() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.limit)
  return limit_.GetNoArena();
}
inline void Lobby_TableSnapshot::set_limit(const ::std::string& value) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.limit)
}
#if LANG_CXX11
inline void Lobby_TableSnapshot::set_limit(::std::string&& value) {
  
  limit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Lobby.TableSnapshot.limit)
}
#endif
inline void Lobby_TableSnapshot::set_limit(const char* value) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Lobby.TableSnapshot.limit)
}
inline void Lobby_TableSnapshot::set_limit(const char* value, size_t size) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Lobby.TableSnapshot.limit)
}
inline ::std::string* Lobby_TableSnapshot::mutable_limit() {
  
  // @@protoc_insertion_point(field_mutable:proto.Lobby.TableSnapshot.limit)
  return limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lobby_TableSnapshot::release_limit() {
  // @@protoc_insertion_point(field_release:proto.Lobby.TableSnapshot.limit)
  
  return limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lobby_TableSnapshot::set_allocated_limit(::std::string* limit) {
  if (limit != NULL) {
    
  } else {
    
  }
  limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), limit);
  // @@protoc_insertion_point(field_set_allocated:proto.Lobby.TableSnapshot.limit)
}

// uint32 platform = 12;
inline void Lobby_TableSnapshot::clear_platform() {
  platform_ = 0u;
}
inline ::google::protobuf::uint32 Lobby_TableSnapshot::platform() const {
  // @@protoc_insertion_point(field_get:proto.Lobby.TableSnapshot.platform)
  return platform_;
}
inline void Lobby_TableSnapshot::set_platform(::google::protobuf::uint32 value) {
  
  platform_ = value;
  // @@protoc_insertion_point(field_set:proto.Lobby.TableSnapshot.platform)
}

// -------------------------------------------------------------------

// Lobby

// -------------------------------------------------------------------

// Game_JoinTable

// uint32 tableID = 1;
inline void Game_JoinTable::clear_tableid() {
  tableid_ = 0u;
}
inline ::google::protobuf::uint32 Game_JoinTable::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Game.JoinTable.tableID)
  return tableid_;
}
inline void Game_JoinTable::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.JoinTable.tableID)
}

// int32 type = 2;
inline void Game_JoinTable::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Game_JoinTable::type() const {
  // @@protoc_insertion_point(field_get:proto.Game.JoinTable.type)
  return type_;
}
inline void Game_JoinTable::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.JoinTable.type)
}

// -------------------------------------------------------------------

// Game_LeaveTable

// uint32 tableID = 1;
inline void Game_LeaveTable::clear_tableid() {
  tableid_ = 0u;
}
inline ::google::protobuf::uint32 Game_LeaveTable::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Game.LeaveTable.tableID)
  return tableid_;
}
inline void Game_LeaveTable::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.LeaveTable.tableID)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Game_Bet

// uint32 tableID = 1;
inline void Game_Bet::clear_tableid() {
  tableid_ = 0u;
}
inline ::google::protobuf::uint32 Game_Bet::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Game.Bet.tableID)
  return tableid_;
}
inline void Game_Bet::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.Bet.tableID)
}

// .proto.Game.Subtype subtype = 2;
inline void Game_Bet::clear_subtype() {
  subtype_ = 0;
}
inline ::proto::Game_Subtype Game_Bet::subtype() const {
  // @@protoc_insertion_point(field_get:proto.Game.Bet.subtype)
  return static_cast< ::proto::Game_Subtype >(subtype_);
}
inline void Game_Bet::set_subtype(::proto::Game_Subtype value) {
  
  subtype_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.Bet.subtype)
}

// map<int32, double> detail = 3;
inline int Game_Bet::detail_size() const {
  return detail_.size();
}
inline void Game_Bet::clear_detail() {
  detail_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, double >&
Game_Bet::detail() const {
  // @@protoc_insertion_point(field_map:proto.Game.Bet.detail)
  return detail_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, double >*
Game_Bet::mutable_detail() {
  // @@protoc_insertion_point(field_mutable_map:proto.Game.Bet.detail)
  return detail_.MutableMap();
}

// -------------------------------------------------------------------

// Game_Tip

// uint32 tableID = 1;
inline void Game_Tip::clear_tableid() {
  tableid_ = 0u;
}
inline ::google::protobuf::uint32 Game_Tip::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Game.Tip.tableID)
  return tableid_;
}
inline void Game_Tip::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.Tip.tableID)
}

// int32 type = 2;
inline void Game_Tip::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Game_Tip::type() const {
  // @@protoc_insertion_point(field_get:proto.Game.Tip.type)
  return type_;
}
inline void Game_Tip::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.Tip.type)
}

// double amount = 3;
inline void Game_Tip::clear_amount() {
  amount_ = 0;
}
inline double Game_Tip::amount() const {
  // @@protoc_insertion_point(field_get:proto.Game.Tip.amount)
  return amount_;
}
inline void Game_Tip::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.Tip.amount)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Game_UserSnapshot

// string name = 1;
inline void Game_UserSnapshot::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Game_UserSnapshot::name() const {
  // @@protoc_insertion_point(field_get:proto.Game.UserSnapshot.name)
  return name_.GetNoArena();
}
inline void Game_UserSnapshot::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.UserSnapshot.name)
}
#if LANG_CXX11
inline void Game_UserSnapshot::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.UserSnapshot.name)
}
#endif
inline void Game_UserSnapshot::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.UserSnapshot.name)
}
inline void Game_UserSnapshot::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.UserSnapshot.name)
}
inline ::std::string* Game_UserSnapshot::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.UserSnapshot.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Game_UserSnapshot::release_name() {
  // @@protoc_insertion_point(field_release:proto.Game.UserSnapshot.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Game_UserSnapshot::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.UserSnapshot.name)
}

// double balance = 2;
inline void Game_UserSnapshot::clear_balance() {
  balance_ = 0;
}
inline double Game_UserSnapshot::balance() const {
  // @@protoc_insertion_point(field_get:proto.Game.UserSnapshot.balance)
  return balance_;
}
inline void Game_UserSnapshot::set_balance(double value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.UserSnapshot.balance)
}

// uint32 home = 3;
inline void Game_UserSnapshot::clear_home() {
  home_ = 0u;
}
inline ::google::protobuf::uint32 Game_UserSnapshot::home() const {
  // @@protoc_insertion_point(field_get:proto.Game.UserSnapshot.home)
  return home_;
}
inline void Game_UserSnapshot::set_home(::google::protobuf::uint32 value) {
  
  home_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.UserSnapshot.home)
}

// uint32 vtable = 4;
inline void Game_UserSnapshot::clear_vtable() {
  vtable_ = 0u;
}
inline ::google::protobuf::uint32 Game_UserSnapshot::vtable() const {
  // @@protoc_insertion_point(field_get:proto.Game.UserSnapshot.vtable)
  return vtable_;
}
inline void Game_UserSnapshot::set_vtable(::google::protobuf::uint32 value) {
  
  vtable_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.UserSnapshot.vtable)
}

// uint32 vseat = 5;
inline void Game_UserSnapshot::clear_vseat() {
  vseat_ = 0u;
}
inline ::google::protobuf::uint32 Game_UserSnapshot::vseat() const {
  // @@protoc_insertion_point(field_get:proto.Game.UserSnapshot.vseat)
  return vseat_;
}
inline void Game_UserSnapshot::set_vseat(::google::protobuf::uint32 value) {
  
  vseat_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.UserSnapshot.vseat)
}

// double winlose = 6;
inline void Game_UserSnapshot::clear_winlose() {
  winlose_ = 0;
}
inline double Game_UserSnapshot::winlose() const {
  // @@protoc_insertion_point(field_get:proto.Game.UserSnapshot.winlose)
  return winlose_;
}
inline void Game_UserSnapshot::set_winlose(double value) {
  
  winlose_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.UserSnapshot.winlose)
}

// double totalbet = 7;
inline void Game_UserSnapshot::clear_totalbet() {
  totalbet_ = 0;
}
inline double Game_UserSnapshot::totalbet() const {
  // @@protoc_insertion_point(field_get:proto.Game.UserSnapshot.totalbet)
  return totalbet_;
}
inline void Game_UserSnapshot::set_totalbet(double value) {
  
  totalbet_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.UserSnapshot.totalbet)
}

// map<int32, double> betinfo = 8;
inline int Game_UserSnapshot::betinfo_size() const {
  return betinfo_.size();
}
inline void Game_UserSnapshot::clear_betinfo() {
  betinfo_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, double >&
Game_UserSnapshot::betinfo() const {
  // @@protoc_insertion_point(field_map:proto.Game.UserSnapshot.betinfo)
  return betinfo_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, double >*
Game_UserSnapshot::mutable_betinfo() {
  // @@protoc_insertion_point(field_mutable_map:proto.Game.UserSnapshot.betinfo)
  return betinfo_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Game_TableStatus

// uint32 tableID = 1;
inline void Game_TableStatus::clear_tableid() {
  tableid_ = 0u;
}
inline ::google::protobuf::uint32 Game_TableStatus::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.tableID)
  return tableid_;
}
inline void Game_TableStatus::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.tableID)
}

// int32 stage = 2;
inline void Game_TableStatus::clear_stage() {
  stage_ = 0;
}
inline ::google::protobuf::int32 Game_TableStatus::stage() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.stage)
  return stage_;
}
inline void Game_TableStatus::set_stage(::google::protobuf::int32 value) {
  
  stage_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.stage)
}

// int32 inning = 3;
inline void Game_TableStatus::clear_inning() {
  inning_ = 0;
}
inline ::google::protobuf::int32 Game_TableStatus::inning() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.inning)
  return inning_;
}
inline void Game_TableStatus::set_inning(::google::protobuf::int32 value) {
  
  inning_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.inning)
}

// uint32 status = 4;
inline void Game_TableStatus::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 Game_TableStatus::status() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.status)
  return status_;
}
inline void Game_TableStatus::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.status)
}

// int32 time = 5;
inline void Game_TableStatus::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 Game_TableStatus::time() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.time)
  return time_;
}
inline void Game_TableStatus::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.time)
}

// string poker = 6;
inline void Game_TableStatus::clear_poker() {
  poker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Game_TableStatus::poker() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.poker)
  return poker_.GetNoArena();
}
inline void Game_TableStatus::set_poker(const ::std::string& value) {
  
  poker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.poker)
}
#if LANG_CXX11
inline void Game_TableStatus::set_poker(::std::string&& value) {
  
  poker_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableStatus.poker)
}
#endif
inline void Game_TableStatus::set_poker(const char* value) {
  
  poker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableStatus.poker)
}
inline void Game_TableStatus::set_poker(const char* value, size_t size) {
  
  poker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableStatus.poker)
}
inline ::std::string* Game_TableStatus::mutable_poker() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableStatus.poker)
  return poker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Game_TableStatus::release_poker() {
  // @@protoc_insertion_point(field_release:proto.Game.TableStatus.poker)
  
  return poker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Game_TableStatus::set_allocated_poker(::std::string* poker) {
  if (poker != NULL) {
    
  } else {
    
  }
  poker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), poker);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableStatus.poker)
}

// string result = 7;
inline void Game_TableStatus::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Game_TableStatus::result() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.result)
  return result_.GetNoArena();
}
inline void Game_TableStatus::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.result)
}
#if LANG_CXX11
inline void Game_TableStatus::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableStatus.result)
}
#endif
inline void Game_TableStatus::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableStatus.result)
}
inline void Game_TableStatus::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableStatus.result)
}
inline ::std::string* Game_TableStatus::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableStatus.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Game_TableStatus::release_result() {
  // @@protoc_insertion_point(field_release:proto.Game.TableStatus.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Game_TableStatus::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableStatus.result)
}

// map<int32, double> betinfo = 8;
inline int Game_TableStatus::betinfo_size() const {
  return betinfo_.size();
}
inline void Game_TableStatus::clear_betinfo() {
  betinfo_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, double >&
Game_TableStatus::betinfo() const {
  // @@protoc_insertion_point(field_map:proto.Game.TableStatus.betinfo)
  return betinfo_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, double >*
Game_TableStatus::mutable_betinfo() {
  // @@protoc_insertion_point(field_mutable_map:proto.Game.TableStatus.betinfo)
  return betinfo_.MutableMap();
}

// map<int32, double> vbetinfo = 9;
inline int Game_TableStatus::vbetinfo_size() const {
  return vbetinfo_.size();
}
inline void Game_TableStatus::clear_vbetinfo() {
  vbetinfo_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, double >&
Game_TableStatus::vbetinfo() const {
  // @@protoc_insertion_point(field_map:proto.Game.TableStatus.vbetinfo)
  return vbetinfo_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, double >*
Game_TableStatus::mutable_vbetinfo() {
  // @@protoc_insertion_point(field_mutable_map:proto.Game.TableStatus.vbetinfo)
  return vbetinfo_.MutableMap();
}

// double winlose = 10;
inline void Game_TableStatus::clear_winlose() {
  winlose_ = 0;
}
inline double Game_TableStatus::winlose() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.winlose)
  return winlose_;
}
inline void Game_TableStatus::set_winlose(double value) {
  
  winlose_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.winlose)
}

// int32 pokerIndex = 11;
inline void Game_TableStatus::clear_pokerindex() {
  pokerindex_ = 0;
}
inline ::google::protobuf::int32 Game_TableStatus::pokerindex() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableStatus.pokerIndex)
  return pokerindex_;
}
inline void Game_TableStatus::set_pokerindex(::google::protobuf::int32 value) {
  
  pokerindex_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableStatus.pokerIndex)
}

// -------------------------------------------------------------------

// Game_TableConfig

// uint32 tableID = 1;
inline void Game_TableConfig::clear_tableid() {
  tableid_ = 0u;
}
inline ::google::protobuf::uint32 Game_TableConfig::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableConfig.tableID)
  return tableid_;
}
inline void Game_TableConfig::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableConfig.tableID)
}

// int32 time = 2;
inline void Game_TableConfig::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 Game_TableConfig::time() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableConfig.time)
  return time_;
}
inline void Game_TableConfig::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableConfig.time)
}

// string name = 3;
inline void Game_TableConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Game_TableConfig::name() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableConfig.name)
  return name_.GetNoArena();
}
inline void Game_TableConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableConfig.name)
}
#if LANG_CXX11
inline void Game_TableConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableConfig.name)
}
#endif
inline void Game_TableConfig::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableConfig.name)
}
inline void Game_TableConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableConfig.name)
}
inline ::std::string* Game_TableConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Game_TableConfig::release_name() {
  // @@protoc_insertion_point(field_release:proto.Game.TableConfig.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Game_TableConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableConfig.name)
}

// string dealer = 4;
inline void Game_TableConfig::clear_dealer() {
  dealer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Game_TableConfig::dealer() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableConfig.dealer)
  return dealer_.GetNoArena();
}
inline void Game_TableConfig::set_dealer(const ::std::string& value) {
  
  dealer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableConfig.dealer)
}
#if LANG_CXX11
inline void Game_TableConfig::set_dealer(::std::string&& value) {
  
  dealer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableConfig.dealer)
}
#endif
inline void Game_TableConfig::set_dealer(const char* value) {
  
  dealer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableConfig.dealer)
}
inline void Game_TableConfig::set_dealer(const char* value, size_t size) {
  
  dealer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableConfig.dealer)
}
inline ::std::string* Game_TableConfig::mutable_dealer() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableConfig.dealer)
  return dealer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Game_TableConfig::release_dealer() {
  // @@protoc_insertion_point(field_release:proto.Game.TableConfig.dealer)
  
  return dealer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Game_TableConfig::set_allocated_dealer(::std::string* dealer) {
  if (dealer != NULL) {
    
  } else {
    
  }
  dealer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dealer);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableConfig.dealer)
}

// string date = 5;
inline void Game_TableConfig::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Game_TableConfig::date() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableConfig.date)
  return date_.GetNoArena();
}
inline void Game_TableConfig::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableConfig.date)
}
#if LANG_CXX11
inline void Game_TableConfig::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableConfig.date)
}
#endif
inline void Game_TableConfig::set_date(const char* value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableConfig.date)
}
inline void Game_TableConfig::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableConfig.date)
}
inline ::std::string* Game_TableConfig::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableConfig.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Game_TableConfig::release_date() {
  // @@protoc_insertion_point(field_release:proto.Game.TableConfig.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Game_TableConfig::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableConfig.date)
}

// string limit = 6;
inline void Game_TableConfig::clear_limit() {
  limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Game_TableConfig::limit() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableConfig.limit)
  return limit_.GetNoArena();
}
inline void Game_TableConfig::set_limit(const ::std::string& value) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableConfig.limit)
}
#if LANG_CXX11
inline void Game_TableConfig::set_limit(::std::string&& value) {
  
  limit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableConfig.limit)
}
#endif
inline void Game_TableConfig::set_limit(const char* value) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableConfig.limit)
}
inline void Game_TableConfig::set_limit(const char* value, size_t size) {
  
  limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableConfig.limit)
}
inline ::std::string* Game_TableConfig::mutable_limit() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableConfig.limit)
  return limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Game_TableConfig::release_limit() {
  // @@protoc_insertion_point(field_release:proto.Game.TableConfig.limit)
  
  return limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Game_TableConfig::set_allocated_limit(::std::string* limit) {
  if (limit != NULL) {
    
  } else {
    
  }
  limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), limit);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableConfig.limit)
}

// -------------------------------------------------------------------

// Game_TableHistory

// uint32 tableID = 1;
inline void Game_TableHistory::clear_tableid() {
  tableid_ = 0u;
}
inline ::google::protobuf::uint32 Game_TableHistory::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableHistory.tableID)
  return tableid_;
}
inline void Game_TableHistory::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.TableHistory.tableID)
}

// string way = 2;
inline void Game_TableHistory::clear_way() {
  way_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Game_TableHistory::way() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableHistory.way)
  return way_.GetNoArena();
}
inline void Game_TableHistory::set_way(const ::std::string& value) {
  
  way_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableHistory.way)
}
#if LANG_CXX11
inline void Game_TableHistory::set_way(::std::string&& value) {
  
  way_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableHistory.way)
}
#endif
inline void Game_TableHistory::set_way(const char* value) {
  
  way_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableHistory.way)
}
inline void Game_TableHistory::set_way(const char* value, size_t size) {
  
  way_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableHistory.way)
}
inline ::std::string* Game_TableHistory::mutable_way() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableHistory.way)
  return way_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Game_TableHistory::release_way() {
  // @@protoc_insertion_point(field_release:proto.Game.TableHistory.way)
  
  return way_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Game_TableHistory::set_allocated_way(::std::string* way) {
  if (way != NULL) {
    
  } else {
    
  }
  way_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), way);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableHistory.way)
}

// string counts = 3;
inline void Game_TableHistory::clear_counts() {
  counts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Game_TableHistory::counts() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableHistory.counts)
  return counts_.GetNoArena();
}
inline void Game_TableHistory::set_counts(const ::std::string& value) {
  
  counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableHistory.counts)
}
#if LANG_CXX11
inline void Game_TableHistory::set_counts(::std::string&& value) {
  
  counts_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableHistory.counts)
}
#endif
inline void Game_TableHistory::set_counts(const char* value) {
  
  counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableHistory.counts)
}
inline void Game_TableHistory::set_counts(const char* value, size_t size) {
  
  counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableHistory.counts)
}
inline ::std::string* Game_TableHistory::mutable_counts() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableHistory.counts)
  return counts_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Game_TableHistory::release_counts() {
  // @@protoc_insertion_point(field_release:proto.Game.TableHistory.counts)
  
  return counts_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Game_TableHistory::set_allocated_counts(::std::string* counts) {
  if (counts != NULL) {
    
  } else {
    
  }
  counts_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), counts);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableHistory.counts)
}

// string poker = 4;
inline void Game_TableHistory::clear_poker() {
  poker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Game_TableHistory::poker() const {
  // @@protoc_insertion_point(field_get:proto.Game.TableHistory.poker)
  return poker_.GetNoArena();
}
inline void Game_TableHistory::set_poker(const ::std::string& value) {
  
  poker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.TableHistory.poker)
}
#if LANG_CXX11
inline void Game_TableHistory::set_poker(::std::string&& value) {
  
  poker_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.TableHistory.poker)
}
#endif
inline void Game_TableHistory::set_poker(const char* value) {
  
  poker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.TableHistory.poker)
}
inline void Game_TableHistory::set_poker(const char* value, size_t size) {
  
  poker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.TableHistory.poker)
}
inline ::std::string* Game_TableHistory::mutable_poker() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.TableHistory.poker)
  return poker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Game_TableHistory::release_poker() {
  // @@protoc_insertion_point(field_release:proto.Game.TableHistory.poker)
  
  return poker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Game_TableHistory::set_allocated_poker(::std::string* poker) {
  if (poker != NULL) {
    
  } else {
    
  }
  poker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), poker);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.TableHistory.poker)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Game_VirtualTable_Seat

// string uname = 1;
inline void Game_VirtualTable_Seat::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Game_VirtualTable_Seat::uname() const {
  // @@protoc_insertion_point(field_get:proto.Game.VirtualTable.Seat.uname)
  return uname_.GetNoArena();
}
inline void Game_VirtualTable_Seat::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.VirtualTable.Seat.uname)
}
#if LANG_CXX11
inline void Game_VirtualTable_Seat::set_uname(::std::string&& value) {
  
  uname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.VirtualTable.Seat.uname)
}
#endif
inline void Game_VirtualTable_Seat::set_uname(const char* value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.VirtualTable.Seat.uname)
}
inline void Game_VirtualTable_Seat::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.VirtualTable.Seat.uname)
}
inline ::std::string* Game_VirtualTable_Seat::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.VirtualTable.Seat.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Game_VirtualTable_Seat::release_uname() {
  // @@protoc_insertion_point(field_release:proto.Game.VirtualTable.Seat.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Game_VirtualTable_Seat::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.VirtualTable.Seat.uname)
}

// int64 uid = 2;
inline void Game_VirtualTable_Seat::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Game_VirtualTable_Seat::uid() const {
  // @@protoc_insertion_point(field_get:proto.Game.VirtualTable.Seat.uid)
  return uid_;
}
inline void Game_VirtualTable_Seat::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.VirtualTable.Seat.uid)
}

// double balance = 3;
inline void Game_VirtualTable_Seat::clear_balance() {
  balance_ = 0;
}
inline double Game_VirtualTable_Seat::balance() const {
  // @@protoc_insertion_point(field_get:proto.Game.VirtualTable.Seat.balance)
  return balance_;
}
inline void Game_VirtualTable_Seat::set_balance(double value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.VirtualTable.Seat.balance)
}

// string avatar = 4;
inline void Game_VirtualTable_Seat::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Game_VirtualTable_Seat::avatar() const {
  // @@protoc_insertion_point(field_get:proto.Game.VirtualTable.Seat.avatar)
  return avatar_.GetNoArena();
}
inline void Game_VirtualTable_Seat::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Game.VirtualTable.Seat.avatar)
}
#if LANG_CXX11
inline void Game_VirtualTable_Seat::set_avatar(::std::string&& value) {
  
  avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Game.VirtualTable.Seat.avatar)
}
#endif
inline void Game_VirtualTable_Seat::set_avatar(const char* value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Game.VirtualTable.Seat.avatar)
}
inline void Game_VirtualTable_Seat::set_avatar(const char* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Game.VirtualTable.Seat.avatar)
}
inline ::std::string* Game_VirtualTable_Seat::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:proto.Game.VirtualTable.Seat.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Game_VirtualTable_Seat::release_avatar() {
  // @@protoc_insertion_point(field_release:proto.Game.VirtualTable.Seat.avatar)
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Game_VirtualTable_Seat::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:proto.Game.VirtualTable.Seat.avatar)
}

// map<int32, double> betinfo = 5;
inline int Game_VirtualTable_Seat::betinfo_size() const {
  return betinfo_.size();
}
inline void Game_VirtualTable_Seat::clear_betinfo() {
  betinfo_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, double >&
Game_VirtualTable_Seat::betinfo() const {
  // @@protoc_insertion_point(field_map:proto.Game.VirtualTable.Seat.betinfo)
  return betinfo_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, double >*
Game_VirtualTable_Seat::mutable_betinfo() {
  // @@protoc_insertion_point(field_mutable_map:proto.Game.VirtualTable.Seat.betinfo)
  return betinfo_.MutableMap();
}

// uint32 seatID = 6;
inline void Game_VirtualTable_Seat::clear_seatid() {
  seatid_ = 0u;
}
inline ::google::protobuf::uint32 Game_VirtualTable_Seat::seatid() const {
  // @@protoc_insertion_point(field_get:proto.Game.VirtualTable.Seat.seatID)
  return seatid_;
}
inline void Game_VirtualTable_Seat::set_seatid(::google::protobuf::uint32 value) {
  
  seatid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.VirtualTable.Seat.seatID)
}

// bool isSeat = 7;
inline void Game_VirtualTable_Seat::clear_isseat() {
  isseat_ = false;
}
inline bool Game_VirtualTable_Seat::isseat() const {
  // @@protoc_insertion_point(field_get:proto.Game.VirtualTable.Seat.isSeat)
  return isseat_;
}
inline void Game_VirtualTable_Seat::set_isseat(bool value) {
  
  isseat_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.VirtualTable.Seat.isSeat)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Game_VirtualTable_Table

// uint32 tableID = 1;
inline void Game_VirtualTable_Table::clear_tableid() {
  tableid_ = 0u;
}
inline ::google::protobuf::uint32 Game_VirtualTable_Table::tableid() const {
  // @@protoc_insertion_point(field_get:proto.Game.VirtualTable.Table.tableID)
  return tableid_;
}
inline void Game_VirtualTable_Table::set_tableid(::google::protobuf::uint32 value) {
  
  tableid_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.VirtualTable.Table.tableID)
}

// uint32 maxSeatNum = 2;
inline void Game_VirtualTable_Table::clear_maxseatnum() {
  maxseatnum_ = 0u;
}
inline ::google::protobuf::uint32 Game_VirtualTable_Table::maxseatnum() const {
  // @@protoc_insertion_point(field_get:proto.Game.VirtualTable.Table.maxSeatNum)
  return maxseatnum_;
}
inline void Game_VirtualTable_Table::set_maxseatnum(::google::protobuf::uint32 value) {
  
  maxseatnum_ = value;
  // @@protoc_insertion_point(field_set:proto.Game.VirtualTable.Table.maxSeatNum)
}

// map<uint32, .proto.Game.VirtualTable.Seat> seats = 3;
inline int Game_VirtualTable_Table::seats_size() const {
  return seats_.size();
}
inline void Game_VirtualTable_Table::clear_seats() {
  seats_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat >&
Game_VirtualTable_Table::seats() const {
  // @@protoc_insertion_point(field_map:proto.Game.VirtualTable.Table.seats)
  return seats_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::Game_VirtualTable_Seat >*
Game_VirtualTable_Table::mutable_seats() {
  // @@protoc_insertion_point(field_mutable_map:proto.Game.VirtualTable.Table.seats)
  return seats_.MutableMap();
}

// -------------------------------------------------------------------

// Game_VirtualTable

// -------------------------------------------------------------------

// Game

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::Game_Subtype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::Game_Subtype>() {
  return ::proto::Game_Subtype_descriptor();
}
template <> struct is_proto_enum< ::proto::Command> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::Command>() {
  return ::proto::Command_descriptor();
}
template <> struct is_proto_enum< ::proto::GameType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GameType>() {
  return ::proto::GameType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eproto__INCLUDED
